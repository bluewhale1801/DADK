
Turning.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   0000010c  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00004fb8  08000110  08000110  00010110  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000048  080050c8  080050c8  000150c8  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08005110  08005110  00020078  2**0
                  CONTENTS
  4 .ARM          00000000  08005110  08005110  00020078  2**0
                  CONTENTS
  5 .preinit_array 00000000  08005110  08005110  00020078  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08005110  08005110  00015110  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08005114  08005114  00015114  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000078  20000000  08005118  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00000284  20000078  08005190  00020078  2**2
                  ALLOC
 10 ._user_heap_stack 00000604  200002fc  08005190  000202fc  2**0
                  ALLOC
 11 .ARM.attributes 00000029  00000000  00000000  00020078  2**0
                  CONTENTS, READONLY
 12 .debug_info   0000c96e  00000000  00000000  000200a1  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 000023b7  00000000  00000000  0002ca0f  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00000d40  00000000  00000000  0002edc8  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_ranges 00000c38  00000000  00000000  0002fb08  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  00018c64  00000000  00000000  00030740  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   0000f491  00000000  00000000  000493a4  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    0008b315  00000000  00000000  00058835  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000050  00000000  00000000  000e3b4a  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00003a90  00000000  00000000  000e3b9c  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000110 <__do_global_dtors_aux>:
 8000110:	b510      	push	{r4, lr}
 8000112:	4c05      	ldr	r4, [pc, #20]	; (8000128 <__do_global_dtors_aux+0x18>)
 8000114:	7823      	ldrb	r3, [r4, #0]
 8000116:	b933      	cbnz	r3, 8000126 <__do_global_dtors_aux+0x16>
 8000118:	4b04      	ldr	r3, [pc, #16]	; (800012c <__do_global_dtors_aux+0x1c>)
 800011a:	b113      	cbz	r3, 8000122 <__do_global_dtors_aux+0x12>
 800011c:	4804      	ldr	r0, [pc, #16]	; (8000130 <__do_global_dtors_aux+0x20>)
 800011e:	f3af 8000 	nop.w
 8000122:	2301      	movs	r3, #1
 8000124:	7023      	strb	r3, [r4, #0]
 8000126:	bd10      	pop	{r4, pc}
 8000128:	20000078 	.word	0x20000078
 800012c:	00000000 	.word	0x00000000
 8000130:	080050b0 	.word	0x080050b0

08000134 <frame_dummy>:
 8000134:	b508      	push	{r3, lr}
 8000136:	4b03      	ldr	r3, [pc, #12]	; (8000144 <frame_dummy+0x10>)
 8000138:	b11b      	cbz	r3, 8000142 <frame_dummy+0xe>
 800013a:	4903      	ldr	r1, [pc, #12]	; (8000148 <frame_dummy+0x14>)
 800013c:	4803      	ldr	r0, [pc, #12]	; (800014c <frame_dummy+0x18>)
 800013e:	f3af 8000 	nop.w
 8000142:	bd08      	pop	{r3, pc}
 8000144:	00000000 	.word	0x00000000
 8000148:	2000007c 	.word	0x2000007c
 800014c:	080050b0 	.word	0x080050b0

08000150 <strlen>:
 8000150:	4603      	mov	r3, r0
 8000152:	f813 2b01 	ldrb.w	r2, [r3], #1
 8000156:	2a00      	cmp	r2, #0
 8000158:	d1fb      	bne.n	8000152 <strlen+0x2>
 800015a:	1a18      	subs	r0, r3, r0
 800015c:	3801      	subs	r0, #1
 800015e:	4770      	bx	lr

08000160 <__aeabi_drsub>:
 8000160:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000
 8000164:	e002      	b.n	800016c <__adddf3>
 8000166:	bf00      	nop

08000168 <__aeabi_dsub>:
 8000168:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000

0800016c <__adddf3>:
 800016c:	b530      	push	{r4, r5, lr}
 800016e:	ea4f 0441 	mov.w	r4, r1, lsl #1
 8000172:	ea4f 0543 	mov.w	r5, r3, lsl #1
 8000176:	ea94 0f05 	teq	r4, r5
 800017a:	bf08      	it	eq
 800017c:	ea90 0f02 	teqeq	r0, r2
 8000180:	bf1f      	itttt	ne
 8000182:	ea54 0c00 	orrsne.w	ip, r4, r0
 8000186:	ea55 0c02 	orrsne.w	ip, r5, r2
 800018a:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 800018e:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 8000192:	f000 80e2 	beq.w	800035a <__adddf3+0x1ee>
 8000196:	ea4f 5454 	mov.w	r4, r4, lsr #21
 800019a:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 800019e:	bfb8      	it	lt
 80001a0:	426d      	neglt	r5, r5
 80001a2:	dd0c      	ble.n	80001be <__adddf3+0x52>
 80001a4:	442c      	add	r4, r5
 80001a6:	ea80 0202 	eor.w	r2, r0, r2
 80001aa:	ea81 0303 	eor.w	r3, r1, r3
 80001ae:	ea82 0000 	eor.w	r0, r2, r0
 80001b2:	ea83 0101 	eor.w	r1, r3, r1
 80001b6:	ea80 0202 	eor.w	r2, r0, r2
 80001ba:	ea81 0303 	eor.w	r3, r1, r3
 80001be:	2d36      	cmp	r5, #54	; 0x36
 80001c0:	bf88      	it	hi
 80001c2:	bd30      	pophi	{r4, r5, pc}
 80001c4:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 80001c8:	ea4f 3101 	mov.w	r1, r1, lsl #12
 80001cc:	f44f 1c80 	mov.w	ip, #1048576	; 0x100000
 80001d0:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 80001d4:	d002      	beq.n	80001dc <__adddf3+0x70>
 80001d6:	4240      	negs	r0, r0
 80001d8:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80001dc:	f013 4f00 	tst.w	r3, #2147483648	; 0x80000000
 80001e0:	ea4f 3303 	mov.w	r3, r3, lsl #12
 80001e4:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 80001e8:	d002      	beq.n	80001f0 <__adddf3+0x84>
 80001ea:	4252      	negs	r2, r2
 80001ec:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 80001f0:	ea94 0f05 	teq	r4, r5
 80001f4:	f000 80a7 	beq.w	8000346 <__adddf3+0x1da>
 80001f8:	f1a4 0401 	sub.w	r4, r4, #1
 80001fc:	f1d5 0e20 	rsbs	lr, r5, #32
 8000200:	db0d      	blt.n	800021e <__adddf3+0xb2>
 8000202:	fa02 fc0e 	lsl.w	ip, r2, lr
 8000206:	fa22 f205 	lsr.w	r2, r2, r5
 800020a:	1880      	adds	r0, r0, r2
 800020c:	f141 0100 	adc.w	r1, r1, #0
 8000210:	fa03 f20e 	lsl.w	r2, r3, lr
 8000214:	1880      	adds	r0, r0, r2
 8000216:	fa43 f305 	asr.w	r3, r3, r5
 800021a:	4159      	adcs	r1, r3
 800021c:	e00e      	b.n	800023c <__adddf3+0xd0>
 800021e:	f1a5 0520 	sub.w	r5, r5, #32
 8000222:	f10e 0e20 	add.w	lr, lr, #32
 8000226:	2a01      	cmp	r2, #1
 8000228:	fa03 fc0e 	lsl.w	ip, r3, lr
 800022c:	bf28      	it	cs
 800022e:	f04c 0c02 	orrcs.w	ip, ip, #2
 8000232:	fa43 f305 	asr.w	r3, r3, r5
 8000236:	18c0      	adds	r0, r0, r3
 8000238:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 800023c:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8000240:	d507      	bpl.n	8000252 <__adddf3+0xe6>
 8000242:	f04f 0e00 	mov.w	lr, #0
 8000246:	f1dc 0c00 	rsbs	ip, ip, #0
 800024a:	eb7e 0000 	sbcs.w	r0, lr, r0
 800024e:	eb6e 0101 	sbc.w	r1, lr, r1
 8000252:	f5b1 1f80 	cmp.w	r1, #1048576	; 0x100000
 8000256:	d31b      	bcc.n	8000290 <__adddf3+0x124>
 8000258:	f5b1 1f00 	cmp.w	r1, #2097152	; 0x200000
 800025c:	d30c      	bcc.n	8000278 <__adddf3+0x10c>
 800025e:	0849      	lsrs	r1, r1, #1
 8000260:	ea5f 0030 	movs.w	r0, r0, rrx
 8000264:	ea4f 0c3c 	mov.w	ip, ip, rrx
 8000268:	f104 0401 	add.w	r4, r4, #1
 800026c:	ea4f 5244 	mov.w	r2, r4, lsl #21
 8000270:	f512 0f80 	cmn.w	r2, #4194304	; 0x400000
 8000274:	f080 809a 	bcs.w	80003ac <__adddf3+0x240>
 8000278:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
 800027c:	bf08      	it	eq
 800027e:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 8000282:	f150 0000 	adcs.w	r0, r0, #0
 8000286:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 800028a:	ea41 0105 	orr.w	r1, r1, r5
 800028e:	bd30      	pop	{r4, r5, pc}
 8000290:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 8000294:	4140      	adcs	r0, r0
 8000296:	eb41 0101 	adc.w	r1, r1, r1
 800029a:	3c01      	subs	r4, #1
 800029c:	bf28      	it	cs
 800029e:	f5b1 1f80 	cmpcs.w	r1, #1048576	; 0x100000
 80002a2:	d2e9      	bcs.n	8000278 <__adddf3+0x10c>
 80002a4:	f091 0f00 	teq	r1, #0
 80002a8:	bf04      	itt	eq
 80002aa:	4601      	moveq	r1, r0
 80002ac:	2000      	moveq	r0, #0
 80002ae:	fab1 f381 	clz	r3, r1
 80002b2:	bf08      	it	eq
 80002b4:	3320      	addeq	r3, #32
 80002b6:	f1a3 030b 	sub.w	r3, r3, #11
 80002ba:	f1b3 0220 	subs.w	r2, r3, #32
 80002be:	da0c      	bge.n	80002da <__adddf3+0x16e>
 80002c0:	320c      	adds	r2, #12
 80002c2:	dd08      	ble.n	80002d6 <__adddf3+0x16a>
 80002c4:	f102 0c14 	add.w	ip, r2, #20
 80002c8:	f1c2 020c 	rsb	r2, r2, #12
 80002cc:	fa01 f00c 	lsl.w	r0, r1, ip
 80002d0:	fa21 f102 	lsr.w	r1, r1, r2
 80002d4:	e00c      	b.n	80002f0 <__adddf3+0x184>
 80002d6:	f102 0214 	add.w	r2, r2, #20
 80002da:	bfd8      	it	le
 80002dc:	f1c2 0c20 	rsble	ip, r2, #32
 80002e0:	fa01 f102 	lsl.w	r1, r1, r2
 80002e4:	fa20 fc0c 	lsr.w	ip, r0, ip
 80002e8:	bfdc      	itt	le
 80002ea:	ea41 010c 	orrle.w	r1, r1, ip
 80002ee:	4090      	lslle	r0, r2
 80002f0:	1ae4      	subs	r4, r4, r3
 80002f2:	bfa2      	ittt	ge
 80002f4:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 80002f8:	4329      	orrge	r1, r5
 80002fa:	bd30      	popge	{r4, r5, pc}
 80002fc:	ea6f 0404 	mvn.w	r4, r4
 8000300:	3c1f      	subs	r4, #31
 8000302:	da1c      	bge.n	800033e <__adddf3+0x1d2>
 8000304:	340c      	adds	r4, #12
 8000306:	dc0e      	bgt.n	8000326 <__adddf3+0x1ba>
 8000308:	f104 0414 	add.w	r4, r4, #20
 800030c:	f1c4 0220 	rsb	r2, r4, #32
 8000310:	fa20 f004 	lsr.w	r0, r0, r4
 8000314:	fa01 f302 	lsl.w	r3, r1, r2
 8000318:	ea40 0003 	orr.w	r0, r0, r3
 800031c:	fa21 f304 	lsr.w	r3, r1, r4
 8000320:	ea45 0103 	orr.w	r1, r5, r3
 8000324:	bd30      	pop	{r4, r5, pc}
 8000326:	f1c4 040c 	rsb	r4, r4, #12
 800032a:	f1c4 0220 	rsb	r2, r4, #32
 800032e:	fa20 f002 	lsr.w	r0, r0, r2
 8000332:	fa01 f304 	lsl.w	r3, r1, r4
 8000336:	ea40 0003 	orr.w	r0, r0, r3
 800033a:	4629      	mov	r1, r5
 800033c:	bd30      	pop	{r4, r5, pc}
 800033e:	fa21 f004 	lsr.w	r0, r1, r4
 8000342:	4629      	mov	r1, r5
 8000344:	bd30      	pop	{r4, r5, pc}
 8000346:	f094 0f00 	teq	r4, #0
 800034a:	f483 1380 	eor.w	r3, r3, #1048576	; 0x100000
 800034e:	bf06      	itte	eq
 8000350:	f481 1180 	eoreq.w	r1, r1, #1048576	; 0x100000
 8000354:	3401      	addeq	r4, #1
 8000356:	3d01      	subne	r5, #1
 8000358:	e74e      	b.n	80001f8 <__adddf3+0x8c>
 800035a:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 800035e:	bf18      	it	ne
 8000360:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 8000364:	d029      	beq.n	80003ba <__adddf3+0x24e>
 8000366:	ea94 0f05 	teq	r4, r5
 800036a:	bf08      	it	eq
 800036c:	ea90 0f02 	teqeq	r0, r2
 8000370:	d005      	beq.n	800037e <__adddf3+0x212>
 8000372:	ea54 0c00 	orrs.w	ip, r4, r0
 8000376:	bf04      	itt	eq
 8000378:	4619      	moveq	r1, r3
 800037a:	4610      	moveq	r0, r2
 800037c:	bd30      	pop	{r4, r5, pc}
 800037e:	ea91 0f03 	teq	r1, r3
 8000382:	bf1e      	ittt	ne
 8000384:	2100      	movne	r1, #0
 8000386:	2000      	movne	r0, #0
 8000388:	bd30      	popne	{r4, r5, pc}
 800038a:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 800038e:	d105      	bne.n	800039c <__adddf3+0x230>
 8000390:	0040      	lsls	r0, r0, #1
 8000392:	4149      	adcs	r1, r1
 8000394:	bf28      	it	cs
 8000396:	f041 4100 	orrcs.w	r1, r1, #2147483648	; 0x80000000
 800039a:	bd30      	pop	{r4, r5, pc}
 800039c:	f514 0480 	adds.w	r4, r4, #4194304	; 0x400000
 80003a0:	bf3c      	itt	cc
 80003a2:	f501 1180 	addcc.w	r1, r1, #1048576	; 0x100000
 80003a6:	bd30      	popcc	{r4, r5, pc}
 80003a8:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 80003ac:	f045 41fe 	orr.w	r1, r5, #2130706432	; 0x7f000000
 80003b0:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 80003b4:	f04f 0000 	mov.w	r0, #0
 80003b8:	bd30      	pop	{r4, r5, pc}
 80003ba:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 80003be:	bf1a      	itte	ne
 80003c0:	4619      	movne	r1, r3
 80003c2:	4610      	movne	r0, r2
 80003c4:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 80003c8:	bf1c      	itt	ne
 80003ca:	460b      	movne	r3, r1
 80003cc:	4602      	movne	r2, r0
 80003ce:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 80003d2:	bf06      	itte	eq
 80003d4:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 80003d8:	ea91 0f03 	teqeq	r1, r3
 80003dc:	f441 2100 	orrne.w	r1, r1, #524288	; 0x80000
 80003e0:	bd30      	pop	{r4, r5, pc}
 80003e2:	bf00      	nop

080003e4 <__aeabi_ui2d>:
 80003e4:	f090 0f00 	teq	r0, #0
 80003e8:	bf04      	itt	eq
 80003ea:	2100      	moveq	r1, #0
 80003ec:	4770      	bxeq	lr
 80003ee:	b530      	push	{r4, r5, lr}
 80003f0:	f44f 6480 	mov.w	r4, #1024	; 0x400
 80003f4:	f104 0432 	add.w	r4, r4, #50	; 0x32
 80003f8:	f04f 0500 	mov.w	r5, #0
 80003fc:	f04f 0100 	mov.w	r1, #0
 8000400:	e750      	b.n	80002a4 <__adddf3+0x138>
 8000402:	bf00      	nop

08000404 <__aeabi_i2d>:
 8000404:	f090 0f00 	teq	r0, #0
 8000408:	bf04      	itt	eq
 800040a:	2100      	moveq	r1, #0
 800040c:	4770      	bxeq	lr
 800040e:	b530      	push	{r4, r5, lr}
 8000410:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000414:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000418:	f010 4500 	ands.w	r5, r0, #2147483648	; 0x80000000
 800041c:	bf48      	it	mi
 800041e:	4240      	negmi	r0, r0
 8000420:	f04f 0100 	mov.w	r1, #0
 8000424:	e73e      	b.n	80002a4 <__adddf3+0x138>
 8000426:	bf00      	nop

08000428 <__aeabi_f2d>:
 8000428:	0042      	lsls	r2, r0, #1
 800042a:	ea4f 01e2 	mov.w	r1, r2, asr #3
 800042e:	ea4f 0131 	mov.w	r1, r1, rrx
 8000432:	ea4f 7002 	mov.w	r0, r2, lsl #28
 8000436:	bf1f      	itttt	ne
 8000438:	f012 437f 	andsne.w	r3, r2, #4278190080	; 0xff000000
 800043c:	f093 4f7f 	teqne	r3, #4278190080	; 0xff000000
 8000440:	f081 5160 	eorne.w	r1, r1, #939524096	; 0x38000000
 8000444:	4770      	bxne	lr
 8000446:	f032 427f 	bics.w	r2, r2, #4278190080	; 0xff000000
 800044a:	bf08      	it	eq
 800044c:	4770      	bxeq	lr
 800044e:	f093 4f7f 	teq	r3, #4278190080	; 0xff000000
 8000452:	bf04      	itt	eq
 8000454:	f441 2100 	orreq.w	r1, r1, #524288	; 0x80000
 8000458:	4770      	bxeq	lr
 800045a:	b530      	push	{r4, r5, lr}
 800045c:	f44f 7460 	mov.w	r4, #896	; 0x380
 8000460:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8000464:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 8000468:	e71c      	b.n	80002a4 <__adddf3+0x138>
 800046a:	bf00      	nop

0800046c <__aeabi_ul2d>:
 800046c:	ea50 0201 	orrs.w	r2, r0, r1
 8000470:	bf08      	it	eq
 8000472:	4770      	bxeq	lr
 8000474:	b530      	push	{r4, r5, lr}
 8000476:	f04f 0500 	mov.w	r5, #0
 800047a:	e00a      	b.n	8000492 <__aeabi_l2d+0x16>

0800047c <__aeabi_l2d>:
 800047c:	ea50 0201 	orrs.w	r2, r0, r1
 8000480:	bf08      	it	eq
 8000482:	4770      	bxeq	lr
 8000484:	b530      	push	{r4, r5, lr}
 8000486:	f011 4500 	ands.w	r5, r1, #2147483648	; 0x80000000
 800048a:	d502      	bpl.n	8000492 <__aeabi_l2d+0x16>
 800048c:	4240      	negs	r0, r0
 800048e:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000492:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000496:	f104 0432 	add.w	r4, r4, #50	; 0x32
 800049a:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 800049e:	f43f aed8 	beq.w	8000252 <__adddf3+0xe6>
 80004a2:	f04f 0203 	mov.w	r2, #3
 80004a6:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80004aa:	bf18      	it	ne
 80004ac:	3203      	addne	r2, #3
 80004ae:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80004b2:	bf18      	it	ne
 80004b4:	3203      	addne	r2, #3
 80004b6:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 80004ba:	f1c2 0320 	rsb	r3, r2, #32
 80004be:	fa00 fc03 	lsl.w	ip, r0, r3
 80004c2:	fa20 f002 	lsr.w	r0, r0, r2
 80004c6:	fa01 fe03 	lsl.w	lr, r1, r3
 80004ca:	ea40 000e 	orr.w	r0, r0, lr
 80004ce:	fa21 f102 	lsr.w	r1, r1, r2
 80004d2:	4414      	add	r4, r2
 80004d4:	e6bd      	b.n	8000252 <__adddf3+0xe6>
 80004d6:	bf00      	nop

080004d8 <__aeabi_dmul>:
 80004d8:	b570      	push	{r4, r5, r6, lr}
 80004da:	f04f 0cff 	mov.w	ip, #255	; 0xff
 80004de:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 80004e2:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 80004e6:	bf1d      	ittte	ne
 80004e8:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 80004ec:	ea94 0f0c 	teqne	r4, ip
 80004f0:	ea95 0f0c 	teqne	r5, ip
 80004f4:	f000 f8de 	bleq	80006b4 <__aeabi_dmul+0x1dc>
 80004f8:	442c      	add	r4, r5
 80004fa:	ea81 0603 	eor.w	r6, r1, r3
 80004fe:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
 8000502:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
 8000506:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
 800050a:	bf18      	it	ne
 800050c:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
 8000510:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000514:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8000518:	d038      	beq.n	800058c <__aeabi_dmul+0xb4>
 800051a:	fba0 ce02 	umull	ip, lr, r0, r2
 800051e:	f04f 0500 	mov.w	r5, #0
 8000522:	fbe1 e502 	umlal	lr, r5, r1, r2
 8000526:	f006 4200 	and.w	r2, r6, #2147483648	; 0x80000000
 800052a:	fbe0 e503 	umlal	lr, r5, r0, r3
 800052e:	f04f 0600 	mov.w	r6, #0
 8000532:	fbe1 5603 	umlal	r5, r6, r1, r3
 8000536:	f09c 0f00 	teq	ip, #0
 800053a:	bf18      	it	ne
 800053c:	f04e 0e01 	orrne.w	lr, lr, #1
 8000540:	f1a4 04ff 	sub.w	r4, r4, #255	; 0xff
 8000544:	f5b6 7f00 	cmp.w	r6, #512	; 0x200
 8000548:	f564 7440 	sbc.w	r4, r4, #768	; 0x300
 800054c:	d204      	bcs.n	8000558 <__aeabi_dmul+0x80>
 800054e:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
 8000552:	416d      	adcs	r5, r5
 8000554:	eb46 0606 	adc.w	r6, r6, r6
 8000558:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
 800055c:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
 8000560:	ea4f 20c5 	mov.w	r0, r5, lsl #11
 8000564:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
 8000568:	ea4f 2ece 	mov.w	lr, lr, lsl #11
 800056c:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 8000570:	bf88      	it	hi
 8000572:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 8000576:	d81e      	bhi.n	80005b6 <__aeabi_dmul+0xde>
 8000578:	f1be 4f00 	cmp.w	lr, #2147483648	; 0x80000000
 800057c:	bf08      	it	eq
 800057e:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
 8000582:	f150 0000 	adcs.w	r0, r0, #0
 8000586:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 800058a:	bd70      	pop	{r4, r5, r6, pc}
 800058c:	f006 4600 	and.w	r6, r6, #2147483648	; 0x80000000
 8000590:	ea46 0101 	orr.w	r1, r6, r1
 8000594:	ea40 0002 	orr.w	r0, r0, r2
 8000598:	ea81 0103 	eor.w	r1, r1, r3
 800059c:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
 80005a0:	bfc2      	ittt	gt
 80005a2:	ebd4 050c 	rsbsgt	r5, r4, ip
 80005a6:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80005aa:	bd70      	popgt	{r4, r5, r6, pc}
 80005ac:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 80005b0:	f04f 0e00 	mov.w	lr, #0
 80005b4:	3c01      	subs	r4, #1
 80005b6:	f300 80ab 	bgt.w	8000710 <__aeabi_dmul+0x238>
 80005ba:	f114 0f36 	cmn.w	r4, #54	; 0x36
 80005be:	bfde      	ittt	le
 80005c0:	2000      	movle	r0, #0
 80005c2:	f001 4100 	andle.w	r1, r1, #2147483648	; 0x80000000
 80005c6:	bd70      	pople	{r4, r5, r6, pc}
 80005c8:	f1c4 0400 	rsb	r4, r4, #0
 80005cc:	3c20      	subs	r4, #32
 80005ce:	da35      	bge.n	800063c <__aeabi_dmul+0x164>
 80005d0:	340c      	adds	r4, #12
 80005d2:	dc1b      	bgt.n	800060c <__aeabi_dmul+0x134>
 80005d4:	f104 0414 	add.w	r4, r4, #20
 80005d8:	f1c4 0520 	rsb	r5, r4, #32
 80005dc:	fa00 f305 	lsl.w	r3, r0, r5
 80005e0:	fa20 f004 	lsr.w	r0, r0, r4
 80005e4:	fa01 f205 	lsl.w	r2, r1, r5
 80005e8:	ea40 0002 	orr.w	r0, r0, r2
 80005ec:	f001 4200 	and.w	r2, r1, #2147483648	; 0x80000000
 80005f0:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 80005f4:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 80005f8:	fa21 f604 	lsr.w	r6, r1, r4
 80005fc:	eb42 0106 	adc.w	r1, r2, r6
 8000600:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000604:	bf08      	it	eq
 8000606:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800060a:	bd70      	pop	{r4, r5, r6, pc}
 800060c:	f1c4 040c 	rsb	r4, r4, #12
 8000610:	f1c4 0520 	rsb	r5, r4, #32
 8000614:	fa00 f304 	lsl.w	r3, r0, r4
 8000618:	fa20 f005 	lsr.w	r0, r0, r5
 800061c:	fa01 f204 	lsl.w	r2, r1, r4
 8000620:	ea40 0002 	orr.w	r0, r0, r2
 8000624:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000628:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 800062c:	f141 0100 	adc.w	r1, r1, #0
 8000630:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000634:	bf08      	it	eq
 8000636:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800063a:	bd70      	pop	{r4, r5, r6, pc}
 800063c:	f1c4 0520 	rsb	r5, r4, #32
 8000640:	fa00 f205 	lsl.w	r2, r0, r5
 8000644:	ea4e 0e02 	orr.w	lr, lr, r2
 8000648:	fa20 f304 	lsr.w	r3, r0, r4
 800064c:	fa01 f205 	lsl.w	r2, r1, r5
 8000650:	ea43 0302 	orr.w	r3, r3, r2
 8000654:	fa21 f004 	lsr.w	r0, r1, r4
 8000658:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 800065c:	fa21 f204 	lsr.w	r2, r1, r4
 8000660:	ea20 0002 	bic.w	r0, r0, r2
 8000664:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
 8000668:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 800066c:	bf08      	it	eq
 800066e:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 8000672:	bd70      	pop	{r4, r5, r6, pc}
 8000674:	f094 0f00 	teq	r4, #0
 8000678:	d10f      	bne.n	800069a <__aeabi_dmul+0x1c2>
 800067a:	f001 4600 	and.w	r6, r1, #2147483648	; 0x80000000
 800067e:	0040      	lsls	r0, r0, #1
 8000680:	eb41 0101 	adc.w	r1, r1, r1
 8000684:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000688:	bf08      	it	eq
 800068a:	3c01      	subeq	r4, #1
 800068c:	d0f7      	beq.n	800067e <__aeabi_dmul+0x1a6>
 800068e:	ea41 0106 	orr.w	r1, r1, r6
 8000692:	f095 0f00 	teq	r5, #0
 8000696:	bf18      	it	ne
 8000698:	4770      	bxne	lr
 800069a:	f003 4600 	and.w	r6, r3, #2147483648	; 0x80000000
 800069e:	0052      	lsls	r2, r2, #1
 80006a0:	eb43 0303 	adc.w	r3, r3, r3
 80006a4:	f413 1f80 	tst.w	r3, #1048576	; 0x100000
 80006a8:	bf08      	it	eq
 80006aa:	3d01      	subeq	r5, #1
 80006ac:	d0f7      	beq.n	800069e <__aeabi_dmul+0x1c6>
 80006ae:	ea43 0306 	orr.w	r3, r3, r6
 80006b2:	4770      	bx	lr
 80006b4:	ea94 0f0c 	teq	r4, ip
 80006b8:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80006bc:	bf18      	it	ne
 80006be:	ea95 0f0c 	teqne	r5, ip
 80006c2:	d00c      	beq.n	80006de <__aeabi_dmul+0x206>
 80006c4:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 80006c8:	bf18      	it	ne
 80006ca:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 80006ce:	d1d1      	bne.n	8000674 <__aeabi_dmul+0x19c>
 80006d0:	ea81 0103 	eor.w	r1, r1, r3
 80006d4:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 80006d8:	f04f 0000 	mov.w	r0, #0
 80006dc:	bd70      	pop	{r4, r5, r6, pc}
 80006de:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 80006e2:	bf06      	itte	eq
 80006e4:	4610      	moveq	r0, r2
 80006e6:	4619      	moveq	r1, r3
 80006e8:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 80006ec:	d019      	beq.n	8000722 <__aeabi_dmul+0x24a>
 80006ee:	ea94 0f0c 	teq	r4, ip
 80006f2:	d102      	bne.n	80006fa <__aeabi_dmul+0x222>
 80006f4:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
 80006f8:	d113      	bne.n	8000722 <__aeabi_dmul+0x24a>
 80006fa:	ea95 0f0c 	teq	r5, ip
 80006fe:	d105      	bne.n	800070c <__aeabi_dmul+0x234>
 8000700:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
 8000704:	bf1c      	itt	ne
 8000706:	4610      	movne	r0, r2
 8000708:	4619      	movne	r1, r3
 800070a:	d10a      	bne.n	8000722 <__aeabi_dmul+0x24a>
 800070c:	ea81 0103 	eor.w	r1, r1, r3
 8000710:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000714:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8000718:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 800071c:	f04f 0000 	mov.w	r0, #0
 8000720:	bd70      	pop	{r4, r5, r6, pc}
 8000722:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8000726:	f441 0178 	orr.w	r1, r1, #16252928	; 0xf80000
 800072a:	bd70      	pop	{r4, r5, r6, pc}

0800072c <__aeabi_ddiv>:
 800072c:	b570      	push	{r4, r5, r6, lr}
 800072e:	f04f 0cff 	mov.w	ip, #255	; 0xff
 8000732:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 8000736:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 800073a:	bf1d      	ittte	ne
 800073c:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 8000740:	ea94 0f0c 	teqne	r4, ip
 8000744:	ea95 0f0c 	teqne	r5, ip
 8000748:	f000 f8a7 	bleq	800089a <__aeabi_ddiv+0x16e>
 800074c:	eba4 0405 	sub.w	r4, r4, r5
 8000750:	ea81 0e03 	eor.w	lr, r1, r3
 8000754:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 8000758:	ea4f 3101 	mov.w	r1, r1, lsl #12
 800075c:	f000 8088 	beq.w	8000870 <__aeabi_ddiv+0x144>
 8000760:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000764:	f04f 5580 	mov.w	r5, #268435456	; 0x10000000
 8000768:	ea45 1313 	orr.w	r3, r5, r3, lsr #4
 800076c:	ea43 6312 	orr.w	r3, r3, r2, lsr #24
 8000770:	ea4f 2202 	mov.w	r2, r2, lsl #8
 8000774:	ea45 1511 	orr.w	r5, r5, r1, lsr #4
 8000778:	ea45 6510 	orr.w	r5, r5, r0, lsr #24
 800077c:	ea4f 2600 	mov.w	r6, r0, lsl #8
 8000780:	f00e 4100 	and.w	r1, lr, #2147483648	; 0x80000000
 8000784:	429d      	cmp	r5, r3
 8000786:	bf08      	it	eq
 8000788:	4296      	cmpeq	r6, r2
 800078a:	f144 04fd 	adc.w	r4, r4, #253	; 0xfd
 800078e:	f504 7440 	add.w	r4, r4, #768	; 0x300
 8000792:	d202      	bcs.n	800079a <__aeabi_ddiv+0x6e>
 8000794:	085b      	lsrs	r3, r3, #1
 8000796:	ea4f 0232 	mov.w	r2, r2, rrx
 800079a:	1ab6      	subs	r6, r6, r2
 800079c:	eb65 0503 	sbc.w	r5, r5, r3
 80007a0:	085b      	lsrs	r3, r3, #1
 80007a2:	ea4f 0232 	mov.w	r2, r2, rrx
 80007a6:	f44f 1080 	mov.w	r0, #1048576	; 0x100000
 80007aa:	f44f 2c00 	mov.w	ip, #524288	; 0x80000
 80007ae:	ebb6 0e02 	subs.w	lr, r6, r2
 80007b2:	eb75 0e03 	sbcs.w	lr, r5, r3
 80007b6:	bf22      	ittt	cs
 80007b8:	1ab6      	subcs	r6, r6, r2
 80007ba:	4675      	movcs	r5, lr
 80007bc:	ea40 000c 	orrcs.w	r0, r0, ip
 80007c0:	085b      	lsrs	r3, r3, #1
 80007c2:	ea4f 0232 	mov.w	r2, r2, rrx
 80007c6:	ebb6 0e02 	subs.w	lr, r6, r2
 80007ca:	eb75 0e03 	sbcs.w	lr, r5, r3
 80007ce:	bf22      	ittt	cs
 80007d0:	1ab6      	subcs	r6, r6, r2
 80007d2:	4675      	movcs	r5, lr
 80007d4:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 80007d8:	085b      	lsrs	r3, r3, #1
 80007da:	ea4f 0232 	mov.w	r2, r2, rrx
 80007de:	ebb6 0e02 	subs.w	lr, r6, r2
 80007e2:	eb75 0e03 	sbcs.w	lr, r5, r3
 80007e6:	bf22      	ittt	cs
 80007e8:	1ab6      	subcs	r6, r6, r2
 80007ea:	4675      	movcs	r5, lr
 80007ec:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 80007f0:	085b      	lsrs	r3, r3, #1
 80007f2:	ea4f 0232 	mov.w	r2, r2, rrx
 80007f6:	ebb6 0e02 	subs.w	lr, r6, r2
 80007fa:	eb75 0e03 	sbcs.w	lr, r5, r3
 80007fe:	bf22      	ittt	cs
 8000800:	1ab6      	subcs	r6, r6, r2
 8000802:	4675      	movcs	r5, lr
 8000804:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 8000808:	ea55 0e06 	orrs.w	lr, r5, r6
 800080c:	d018      	beq.n	8000840 <__aeabi_ddiv+0x114>
 800080e:	ea4f 1505 	mov.w	r5, r5, lsl #4
 8000812:	ea45 7516 	orr.w	r5, r5, r6, lsr #28
 8000816:	ea4f 1606 	mov.w	r6, r6, lsl #4
 800081a:	ea4f 03c3 	mov.w	r3, r3, lsl #3
 800081e:	ea43 7352 	orr.w	r3, r3, r2, lsr #29
 8000822:	ea4f 02c2 	mov.w	r2, r2, lsl #3
 8000826:	ea5f 1c1c 	movs.w	ip, ip, lsr #4
 800082a:	d1c0      	bne.n	80007ae <__aeabi_ddiv+0x82>
 800082c:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000830:	d10b      	bne.n	800084a <__aeabi_ddiv+0x11e>
 8000832:	ea41 0100 	orr.w	r1, r1, r0
 8000836:	f04f 0000 	mov.w	r0, #0
 800083a:	f04f 4c00 	mov.w	ip, #2147483648	; 0x80000000
 800083e:	e7b6      	b.n	80007ae <__aeabi_ddiv+0x82>
 8000840:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000844:	bf04      	itt	eq
 8000846:	4301      	orreq	r1, r0
 8000848:	2000      	moveq	r0, #0
 800084a:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 800084e:	bf88      	it	hi
 8000850:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 8000854:	f63f aeaf 	bhi.w	80005b6 <__aeabi_dmul+0xde>
 8000858:	ebb5 0c03 	subs.w	ip, r5, r3
 800085c:	bf04      	itt	eq
 800085e:	ebb6 0c02 	subseq.w	ip, r6, r2
 8000862:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 8000866:	f150 0000 	adcs.w	r0, r0, #0
 800086a:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 800086e:	bd70      	pop	{r4, r5, r6, pc}
 8000870:	f00e 4e00 	and.w	lr, lr, #2147483648	; 0x80000000
 8000874:	ea4e 3111 	orr.w	r1, lr, r1, lsr #12
 8000878:	eb14 045c 	adds.w	r4, r4, ip, lsr #1
 800087c:	bfc2      	ittt	gt
 800087e:	ebd4 050c 	rsbsgt	r5, r4, ip
 8000882:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 8000886:	bd70      	popgt	{r4, r5, r6, pc}
 8000888:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 800088c:	f04f 0e00 	mov.w	lr, #0
 8000890:	3c01      	subs	r4, #1
 8000892:	e690      	b.n	80005b6 <__aeabi_dmul+0xde>
 8000894:	ea45 0e06 	orr.w	lr, r5, r6
 8000898:	e68d      	b.n	80005b6 <__aeabi_dmul+0xde>
 800089a:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 800089e:	ea94 0f0c 	teq	r4, ip
 80008a2:	bf08      	it	eq
 80008a4:	ea95 0f0c 	teqeq	r5, ip
 80008a8:	f43f af3b 	beq.w	8000722 <__aeabi_dmul+0x24a>
 80008ac:	ea94 0f0c 	teq	r4, ip
 80008b0:	d10a      	bne.n	80008c8 <__aeabi_ddiv+0x19c>
 80008b2:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 80008b6:	f47f af34 	bne.w	8000722 <__aeabi_dmul+0x24a>
 80008ba:	ea95 0f0c 	teq	r5, ip
 80008be:	f47f af25 	bne.w	800070c <__aeabi_dmul+0x234>
 80008c2:	4610      	mov	r0, r2
 80008c4:	4619      	mov	r1, r3
 80008c6:	e72c      	b.n	8000722 <__aeabi_dmul+0x24a>
 80008c8:	ea95 0f0c 	teq	r5, ip
 80008cc:	d106      	bne.n	80008dc <__aeabi_ddiv+0x1b0>
 80008ce:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 80008d2:	f43f aefd 	beq.w	80006d0 <__aeabi_dmul+0x1f8>
 80008d6:	4610      	mov	r0, r2
 80008d8:	4619      	mov	r1, r3
 80008da:	e722      	b.n	8000722 <__aeabi_dmul+0x24a>
 80008dc:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 80008e0:	bf18      	it	ne
 80008e2:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 80008e6:	f47f aec5 	bne.w	8000674 <__aeabi_dmul+0x19c>
 80008ea:	ea50 0441 	orrs.w	r4, r0, r1, lsl #1
 80008ee:	f47f af0d 	bne.w	800070c <__aeabi_dmul+0x234>
 80008f2:	ea52 0543 	orrs.w	r5, r2, r3, lsl #1
 80008f6:	f47f aeeb 	bne.w	80006d0 <__aeabi_dmul+0x1f8>
 80008fa:	e712      	b.n	8000722 <__aeabi_dmul+0x24a>

080008fc <__aeabi_d2uiz>:
 80008fc:	004a      	lsls	r2, r1, #1
 80008fe:	d211      	bcs.n	8000924 <__aeabi_d2uiz+0x28>
 8000900:	f512 1200 	adds.w	r2, r2, #2097152	; 0x200000
 8000904:	d211      	bcs.n	800092a <__aeabi_d2uiz+0x2e>
 8000906:	d50d      	bpl.n	8000924 <__aeabi_d2uiz+0x28>
 8000908:	f46f 7378 	mvn.w	r3, #992	; 0x3e0
 800090c:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000910:	d40e      	bmi.n	8000930 <__aeabi_d2uiz+0x34>
 8000912:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000916:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 800091a:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 800091e:	fa23 f002 	lsr.w	r0, r3, r2
 8000922:	4770      	bx	lr
 8000924:	f04f 0000 	mov.w	r0, #0
 8000928:	4770      	bx	lr
 800092a:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 800092e:	d102      	bne.n	8000936 <__aeabi_d2uiz+0x3a>
 8000930:	f04f 30ff 	mov.w	r0, #4294967295
 8000934:	4770      	bx	lr
 8000936:	f04f 0000 	mov.w	r0, #0
 800093a:	4770      	bx	lr

0800093c <__aeabi_d2f>:
 800093c:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000940:	f1b2 43e0 	subs.w	r3, r2, #1879048192	; 0x70000000
 8000944:	bf24      	itt	cs
 8000946:	f5b3 1c00 	subscs.w	ip, r3, #2097152	; 0x200000
 800094a:	f1dc 5cfe 	rsbscs	ip, ip, #532676608	; 0x1fc00000
 800094e:	d90d      	bls.n	800096c <__aeabi_d2f+0x30>
 8000950:	f001 4c00 	and.w	ip, r1, #2147483648	; 0x80000000
 8000954:	ea4f 02c0 	mov.w	r2, r0, lsl #3
 8000958:	ea4c 7050 	orr.w	r0, ip, r0, lsr #29
 800095c:	f1b2 4f00 	cmp.w	r2, #2147483648	; 0x80000000
 8000960:	eb40 0083 	adc.w	r0, r0, r3, lsl #2
 8000964:	bf08      	it	eq
 8000966:	f020 0001 	biceq.w	r0, r0, #1
 800096a:	4770      	bx	lr
 800096c:	f011 4f80 	tst.w	r1, #1073741824	; 0x40000000
 8000970:	d121      	bne.n	80009b6 <__aeabi_d2f+0x7a>
 8000972:	f113 7238 	adds.w	r2, r3, #48234496	; 0x2e00000
 8000976:	bfbc      	itt	lt
 8000978:	f001 4000 	andlt.w	r0, r1, #2147483648	; 0x80000000
 800097c:	4770      	bxlt	lr
 800097e:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000982:	ea4f 5252 	mov.w	r2, r2, lsr #21
 8000986:	f1c2 0218 	rsb	r2, r2, #24
 800098a:	f1c2 0c20 	rsb	ip, r2, #32
 800098e:	fa10 f30c 	lsls.w	r3, r0, ip
 8000992:	fa20 f002 	lsr.w	r0, r0, r2
 8000996:	bf18      	it	ne
 8000998:	f040 0001 	orrne.w	r0, r0, #1
 800099c:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 80009a0:	ea4f 23d3 	mov.w	r3, r3, lsr #11
 80009a4:	fa03 fc0c 	lsl.w	ip, r3, ip
 80009a8:	ea40 000c 	orr.w	r0, r0, ip
 80009ac:	fa23 f302 	lsr.w	r3, r3, r2
 80009b0:	ea4f 0343 	mov.w	r3, r3, lsl #1
 80009b4:	e7cc      	b.n	8000950 <__aeabi_d2f+0x14>
 80009b6:	ea7f 5362 	mvns.w	r3, r2, asr #21
 80009ba:	d107      	bne.n	80009cc <__aeabi_d2f+0x90>
 80009bc:	ea50 3301 	orrs.w	r3, r0, r1, lsl #12
 80009c0:	bf1e      	ittt	ne
 80009c2:	f04f 40fe 	movne.w	r0, #2130706432	; 0x7f000000
 80009c6:	f440 0040 	orrne.w	r0, r0, #12582912	; 0xc00000
 80009ca:	4770      	bxne	lr
 80009cc:	f001 4000 	and.w	r0, r1, #2147483648	; 0x80000000
 80009d0:	f040 40fe 	orr.w	r0, r0, #2130706432	; 0x7f000000
 80009d4:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 80009d8:	4770      	bx	lr
 80009da:	bf00      	nop

080009dc <__aeabi_frsub>:
 80009dc:	f080 4000 	eor.w	r0, r0, #2147483648	; 0x80000000
 80009e0:	e002      	b.n	80009e8 <__addsf3>
 80009e2:	bf00      	nop

080009e4 <__aeabi_fsub>:
 80009e4:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000

080009e8 <__addsf3>:
 80009e8:	0042      	lsls	r2, r0, #1
 80009ea:	bf1f      	itttt	ne
 80009ec:	ea5f 0341 	movsne.w	r3, r1, lsl #1
 80009f0:	ea92 0f03 	teqne	r2, r3
 80009f4:	ea7f 6c22 	mvnsne.w	ip, r2, asr #24
 80009f8:	ea7f 6c23 	mvnsne.w	ip, r3, asr #24
 80009fc:	d06a      	beq.n	8000ad4 <__addsf3+0xec>
 80009fe:	ea4f 6212 	mov.w	r2, r2, lsr #24
 8000a02:	ebd2 6313 	rsbs	r3, r2, r3, lsr #24
 8000a06:	bfc1      	itttt	gt
 8000a08:	18d2      	addgt	r2, r2, r3
 8000a0a:	4041      	eorgt	r1, r0
 8000a0c:	4048      	eorgt	r0, r1
 8000a0e:	4041      	eorgt	r1, r0
 8000a10:	bfb8      	it	lt
 8000a12:	425b      	neglt	r3, r3
 8000a14:	2b19      	cmp	r3, #25
 8000a16:	bf88      	it	hi
 8000a18:	4770      	bxhi	lr
 8000a1a:	f010 4f00 	tst.w	r0, #2147483648	; 0x80000000
 8000a1e:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 8000a22:	f020 407f 	bic.w	r0, r0, #4278190080	; 0xff000000
 8000a26:	bf18      	it	ne
 8000a28:	4240      	negne	r0, r0
 8000a2a:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 8000a2e:	f441 0100 	orr.w	r1, r1, #8388608	; 0x800000
 8000a32:	f021 417f 	bic.w	r1, r1, #4278190080	; 0xff000000
 8000a36:	bf18      	it	ne
 8000a38:	4249      	negne	r1, r1
 8000a3a:	ea92 0f03 	teq	r2, r3
 8000a3e:	d03f      	beq.n	8000ac0 <__addsf3+0xd8>
 8000a40:	f1a2 0201 	sub.w	r2, r2, #1
 8000a44:	fa41 fc03 	asr.w	ip, r1, r3
 8000a48:	eb10 000c 	adds.w	r0, r0, ip
 8000a4c:	f1c3 0320 	rsb	r3, r3, #32
 8000a50:	fa01 f103 	lsl.w	r1, r1, r3
 8000a54:	f000 4300 	and.w	r3, r0, #2147483648	; 0x80000000
 8000a58:	d502      	bpl.n	8000a60 <__addsf3+0x78>
 8000a5a:	4249      	negs	r1, r1
 8000a5c:	eb60 0040 	sbc.w	r0, r0, r0, lsl #1
 8000a60:	f5b0 0f00 	cmp.w	r0, #8388608	; 0x800000
 8000a64:	d313      	bcc.n	8000a8e <__addsf3+0xa6>
 8000a66:	f1b0 7f80 	cmp.w	r0, #16777216	; 0x1000000
 8000a6a:	d306      	bcc.n	8000a7a <__addsf3+0x92>
 8000a6c:	0840      	lsrs	r0, r0, #1
 8000a6e:	ea4f 0131 	mov.w	r1, r1, rrx
 8000a72:	f102 0201 	add.w	r2, r2, #1
 8000a76:	2afe      	cmp	r2, #254	; 0xfe
 8000a78:	d251      	bcs.n	8000b1e <__addsf3+0x136>
 8000a7a:	f1b1 4f00 	cmp.w	r1, #2147483648	; 0x80000000
 8000a7e:	eb40 50c2 	adc.w	r0, r0, r2, lsl #23
 8000a82:	bf08      	it	eq
 8000a84:	f020 0001 	biceq.w	r0, r0, #1
 8000a88:	ea40 0003 	orr.w	r0, r0, r3
 8000a8c:	4770      	bx	lr
 8000a8e:	0049      	lsls	r1, r1, #1
 8000a90:	eb40 0000 	adc.w	r0, r0, r0
 8000a94:	3a01      	subs	r2, #1
 8000a96:	bf28      	it	cs
 8000a98:	f5b0 0f00 	cmpcs.w	r0, #8388608	; 0x800000
 8000a9c:	d2ed      	bcs.n	8000a7a <__addsf3+0x92>
 8000a9e:	fab0 fc80 	clz	ip, r0
 8000aa2:	f1ac 0c08 	sub.w	ip, ip, #8
 8000aa6:	ebb2 020c 	subs.w	r2, r2, ip
 8000aaa:	fa00 f00c 	lsl.w	r0, r0, ip
 8000aae:	bfaa      	itet	ge
 8000ab0:	eb00 50c2 	addge.w	r0, r0, r2, lsl #23
 8000ab4:	4252      	neglt	r2, r2
 8000ab6:	4318      	orrge	r0, r3
 8000ab8:	bfbc      	itt	lt
 8000aba:	40d0      	lsrlt	r0, r2
 8000abc:	4318      	orrlt	r0, r3
 8000abe:	4770      	bx	lr
 8000ac0:	f092 0f00 	teq	r2, #0
 8000ac4:	f481 0100 	eor.w	r1, r1, #8388608	; 0x800000
 8000ac8:	bf06      	itte	eq
 8000aca:	f480 0000 	eoreq.w	r0, r0, #8388608	; 0x800000
 8000ace:	3201      	addeq	r2, #1
 8000ad0:	3b01      	subne	r3, #1
 8000ad2:	e7b5      	b.n	8000a40 <__addsf3+0x58>
 8000ad4:	ea4f 0341 	mov.w	r3, r1, lsl #1
 8000ad8:	ea7f 6c22 	mvns.w	ip, r2, asr #24
 8000adc:	bf18      	it	ne
 8000ade:	ea7f 6c23 	mvnsne.w	ip, r3, asr #24
 8000ae2:	d021      	beq.n	8000b28 <__addsf3+0x140>
 8000ae4:	ea92 0f03 	teq	r2, r3
 8000ae8:	d004      	beq.n	8000af4 <__addsf3+0x10c>
 8000aea:	f092 0f00 	teq	r2, #0
 8000aee:	bf08      	it	eq
 8000af0:	4608      	moveq	r0, r1
 8000af2:	4770      	bx	lr
 8000af4:	ea90 0f01 	teq	r0, r1
 8000af8:	bf1c      	itt	ne
 8000afa:	2000      	movne	r0, #0
 8000afc:	4770      	bxne	lr
 8000afe:	f012 4f7f 	tst.w	r2, #4278190080	; 0xff000000
 8000b02:	d104      	bne.n	8000b0e <__addsf3+0x126>
 8000b04:	0040      	lsls	r0, r0, #1
 8000b06:	bf28      	it	cs
 8000b08:	f040 4000 	orrcs.w	r0, r0, #2147483648	; 0x80000000
 8000b0c:	4770      	bx	lr
 8000b0e:	f112 7200 	adds.w	r2, r2, #33554432	; 0x2000000
 8000b12:	bf3c      	itt	cc
 8000b14:	f500 0000 	addcc.w	r0, r0, #8388608	; 0x800000
 8000b18:	4770      	bxcc	lr
 8000b1a:	f000 4300 	and.w	r3, r0, #2147483648	; 0x80000000
 8000b1e:	f043 40fe 	orr.w	r0, r3, #2130706432	; 0x7f000000
 8000b22:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 8000b26:	4770      	bx	lr
 8000b28:	ea7f 6222 	mvns.w	r2, r2, asr #24
 8000b2c:	bf16      	itet	ne
 8000b2e:	4608      	movne	r0, r1
 8000b30:	ea7f 6323 	mvnseq.w	r3, r3, asr #24
 8000b34:	4601      	movne	r1, r0
 8000b36:	0242      	lsls	r2, r0, #9
 8000b38:	bf06      	itte	eq
 8000b3a:	ea5f 2341 	movseq.w	r3, r1, lsl #9
 8000b3e:	ea90 0f01 	teqeq	r0, r1
 8000b42:	f440 0080 	orrne.w	r0, r0, #4194304	; 0x400000
 8000b46:	4770      	bx	lr

08000b48 <__aeabi_ui2f>:
 8000b48:	f04f 0300 	mov.w	r3, #0
 8000b4c:	e004      	b.n	8000b58 <__aeabi_i2f+0x8>
 8000b4e:	bf00      	nop

08000b50 <__aeabi_i2f>:
 8000b50:	f010 4300 	ands.w	r3, r0, #2147483648	; 0x80000000
 8000b54:	bf48      	it	mi
 8000b56:	4240      	negmi	r0, r0
 8000b58:	ea5f 0c00 	movs.w	ip, r0
 8000b5c:	bf08      	it	eq
 8000b5e:	4770      	bxeq	lr
 8000b60:	f043 4396 	orr.w	r3, r3, #1258291200	; 0x4b000000
 8000b64:	4601      	mov	r1, r0
 8000b66:	f04f 0000 	mov.w	r0, #0
 8000b6a:	e01c      	b.n	8000ba6 <__aeabi_l2f+0x2a>

08000b6c <__aeabi_ul2f>:
 8000b6c:	ea50 0201 	orrs.w	r2, r0, r1
 8000b70:	bf08      	it	eq
 8000b72:	4770      	bxeq	lr
 8000b74:	f04f 0300 	mov.w	r3, #0
 8000b78:	e00a      	b.n	8000b90 <__aeabi_l2f+0x14>
 8000b7a:	bf00      	nop

08000b7c <__aeabi_l2f>:
 8000b7c:	ea50 0201 	orrs.w	r2, r0, r1
 8000b80:	bf08      	it	eq
 8000b82:	4770      	bxeq	lr
 8000b84:	f011 4300 	ands.w	r3, r1, #2147483648	; 0x80000000
 8000b88:	d502      	bpl.n	8000b90 <__aeabi_l2f+0x14>
 8000b8a:	4240      	negs	r0, r0
 8000b8c:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000b90:	ea5f 0c01 	movs.w	ip, r1
 8000b94:	bf02      	ittt	eq
 8000b96:	4684      	moveq	ip, r0
 8000b98:	4601      	moveq	r1, r0
 8000b9a:	2000      	moveq	r0, #0
 8000b9c:	f043 43b6 	orr.w	r3, r3, #1526726656	; 0x5b000000
 8000ba0:	bf08      	it	eq
 8000ba2:	f1a3 5380 	subeq.w	r3, r3, #268435456	; 0x10000000
 8000ba6:	f5a3 0300 	sub.w	r3, r3, #8388608	; 0x800000
 8000baa:	fabc f28c 	clz	r2, ip
 8000bae:	3a08      	subs	r2, #8
 8000bb0:	eba3 53c2 	sub.w	r3, r3, r2, lsl #23
 8000bb4:	db10      	blt.n	8000bd8 <__aeabi_l2f+0x5c>
 8000bb6:	fa01 fc02 	lsl.w	ip, r1, r2
 8000bba:	4463      	add	r3, ip
 8000bbc:	fa00 fc02 	lsl.w	ip, r0, r2
 8000bc0:	f1c2 0220 	rsb	r2, r2, #32
 8000bc4:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
 8000bc8:	fa20 f202 	lsr.w	r2, r0, r2
 8000bcc:	eb43 0002 	adc.w	r0, r3, r2
 8000bd0:	bf08      	it	eq
 8000bd2:	f020 0001 	biceq.w	r0, r0, #1
 8000bd6:	4770      	bx	lr
 8000bd8:	f102 0220 	add.w	r2, r2, #32
 8000bdc:	fa01 fc02 	lsl.w	ip, r1, r2
 8000be0:	f1c2 0220 	rsb	r2, r2, #32
 8000be4:	ea50 004c 	orrs.w	r0, r0, ip, lsl #1
 8000be8:	fa21 f202 	lsr.w	r2, r1, r2
 8000bec:	eb43 0002 	adc.w	r0, r3, r2
 8000bf0:	bf08      	it	eq
 8000bf2:	ea20 70dc 	biceq.w	r0, r0, ip, lsr #31
 8000bf6:	4770      	bx	lr

08000bf8 <__aeabi_fmul>:
 8000bf8:	f04f 0cff 	mov.w	ip, #255	; 0xff
 8000bfc:	ea1c 52d0 	ands.w	r2, ip, r0, lsr #23
 8000c00:	bf1e      	ittt	ne
 8000c02:	ea1c 53d1 	andsne.w	r3, ip, r1, lsr #23
 8000c06:	ea92 0f0c 	teqne	r2, ip
 8000c0a:	ea93 0f0c 	teqne	r3, ip
 8000c0e:	d06f      	beq.n	8000cf0 <__aeabi_fmul+0xf8>
 8000c10:	441a      	add	r2, r3
 8000c12:	ea80 0c01 	eor.w	ip, r0, r1
 8000c16:	0240      	lsls	r0, r0, #9
 8000c18:	bf18      	it	ne
 8000c1a:	ea5f 2141 	movsne.w	r1, r1, lsl #9
 8000c1e:	d01e      	beq.n	8000c5e <__aeabi_fmul+0x66>
 8000c20:	f04f 6300 	mov.w	r3, #134217728	; 0x8000000
 8000c24:	ea43 1050 	orr.w	r0, r3, r0, lsr #5
 8000c28:	ea43 1151 	orr.w	r1, r3, r1, lsr #5
 8000c2c:	fba0 3101 	umull	r3, r1, r0, r1
 8000c30:	f00c 4000 	and.w	r0, ip, #2147483648	; 0x80000000
 8000c34:	f5b1 0f00 	cmp.w	r1, #8388608	; 0x800000
 8000c38:	bf3e      	ittt	cc
 8000c3a:	0049      	lslcc	r1, r1, #1
 8000c3c:	ea41 71d3 	orrcc.w	r1, r1, r3, lsr #31
 8000c40:	005b      	lslcc	r3, r3, #1
 8000c42:	ea40 0001 	orr.w	r0, r0, r1
 8000c46:	f162 027f 	sbc.w	r2, r2, #127	; 0x7f
 8000c4a:	2afd      	cmp	r2, #253	; 0xfd
 8000c4c:	d81d      	bhi.n	8000c8a <__aeabi_fmul+0x92>
 8000c4e:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8000c52:	eb40 50c2 	adc.w	r0, r0, r2, lsl #23
 8000c56:	bf08      	it	eq
 8000c58:	f020 0001 	biceq.w	r0, r0, #1
 8000c5c:	4770      	bx	lr
 8000c5e:	f090 0f00 	teq	r0, #0
 8000c62:	f00c 4c00 	and.w	ip, ip, #2147483648	; 0x80000000
 8000c66:	bf08      	it	eq
 8000c68:	0249      	lsleq	r1, r1, #9
 8000c6a:	ea4c 2050 	orr.w	r0, ip, r0, lsr #9
 8000c6e:	ea40 2051 	orr.w	r0, r0, r1, lsr #9
 8000c72:	3a7f      	subs	r2, #127	; 0x7f
 8000c74:	bfc2      	ittt	gt
 8000c76:	f1d2 03ff 	rsbsgt	r3, r2, #255	; 0xff
 8000c7a:	ea40 50c2 	orrgt.w	r0, r0, r2, lsl #23
 8000c7e:	4770      	bxgt	lr
 8000c80:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 8000c84:	f04f 0300 	mov.w	r3, #0
 8000c88:	3a01      	subs	r2, #1
 8000c8a:	dc5d      	bgt.n	8000d48 <__aeabi_fmul+0x150>
 8000c8c:	f112 0f19 	cmn.w	r2, #25
 8000c90:	bfdc      	itt	le
 8000c92:	f000 4000 	andle.w	r0, r0, #2147483648	; 0x80000000
 8000c96:	4770      	bxle	lr
 8000c98:	f1c2 0200 	rsb	r2, r2, #0
 8000c9c:	0041      	lsls	r1, r0, #1
 8000c9e:	fa21 f102 	lsr.w	r1, r1, r2
 8000ca2:	f1c2 0220 	rsb	r2, r2, #32
 8000ca6:	fa00 fc02 	lsl.w	ip, r0, r2
 8000caa:	ea5f 0031 	movs.w	r0, r1, rrx
 8000cae:	f140 0000 	adc.w	r0, r0, #0
 8000cb2:	ea53 034c 	orrs.w	r3, r3, ip, lsl #1
 8000cb6:	bf08      	it	eq
 8000cb8:	ea20 70dc 	biceq.w	r0, r0, ip, lsr #31
 8000cbc:	4770      	bx	lr
 8000cbe:	f092 0f00 	teq	r2, #0
 8000cc2:	f000 4c00 	and.w	ip, r0, #2147483648	; 0x80000000
 8000cc6:	bf02      	ittt	eq
 8000cc8:	0040      	lsleq	r0, r0, #1
 8000cca:	f410 0f00 	tsteq.w	r0, #8388608	; 0x800000
 8000cce:	3a01      	subeq	r2, #1
 8000cd0:	d0f9      	beq.n	8000cc6 <__aeabi_fmul+0xce>
 8000cd2:	ea40 000c 	orr.w	r0, r0, ip
 8000cd6:	f093 0f00 	teq	r3, #0
 8000cda:	f001 4c00 	and.w	ip, r1, #2147483648	; 0x80000000
 8000cde:	bf02      	ittt	eq
 8000ce0:	0049      	lsleq	r1, r1, #1
 8000ce2:	f411 0f00 	tsteq.w	r1, #8388608	; 0x800000
 8000ce6:	3b01      	subeq	r3, #1
 8000ce8:	d0f9      	beq.n	8000cde <__aeabi_fmul+0xe6>
 8000cea:	ea41 010c 	orr.w	r1, r1, ip
 8000cee:	e78f      	b.n	8000c10 <__aeabi_fmul+0x18>
 8000cf0:	ea0c 53d1 	and.w	r3, ip, r1, lsr #23
 8000cf4:	ea92 0f0c 	teq	r2, ip
 8000cf8:	bf18      	it	ne
 8000cfa:	ea93 0f0c 	teqne	r3, ip
 8000cfe:	d00a      	beq.n	8000d16 <__aeabi_fmul+0x11e>
 8000d00:	f030 4c00 	bics.w	ip, r0, #2147483648	; 0x80000000
 8000d04:	bf18      	it	ne
 8000d06:	f031 4c00 	bicsne.w	ip, r1, #2147483648	; 0x80000000
 8000d0a:	d1d8      	bne.n	8000cbe <__aeabi_fmul+0xc6>
 8000d0c:	ea80 0001 	eor.w	r0, r0, r1
 8000d10:	f000 4000 	and.w	r0, r0, #2147483648	; 0x80000000
 8000d14:	4770      	bx	lr
 8000d16:	f090 0f00 	teq	r0, #0
 8000d1a:	bf17      	itett	ne
 8000d1c:	f090 4f00 	teqne	r0, #2147483648	; 0x80000000
 8000d20:	4608      	moveq	r0, r1
 8000d22:	f091 0f00 	teqne	r1, #0
 8000d26:	f091 4f00 	teqne	r1, #2147483648	; 0x80000000
 8000d2a:	d014      	beq.n	8000d56 <__aeabi_fmul+0x15e>
 8000d2c:	ea92 0f0c 	teq	r2, ip
 8000d30:	d101      	bne.n	8000d36 <__aeabi_fmul+0x13e>
 8000d32:	0242      	lsls	r2, r0, #9
 8000d34:	d10f      	bne.n	8000d56 <__aeabi_fmul+0x15e>
 8000d36:	ea93 0f0c 	teq	r3, ip
 8000d3a:	d103      	bne.n	8000d44 <__aeabi_fmul+0x14c>
 8000d3c:	024b      	lsls	r3, r1, #9
 8000d3e:	bf18      	it	ne
 8000d40:	4608      	movne	r0, r1
 8000d42:	d108      	bne.n	8000d56 <__aeabi_fmul+0x15e>
 8000d44:	ea80 0001 	eor.w	r0, r0, r1
 8000d48:	f000 4000 	and.w	r0, r0, #2147483648	; 0x80000000
 8000d4c:	f040 40fe 	orr.w	r0, r0, #2130706432	; 0x7f000000
 8000d50:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 8000d54:	4770      	bx	lr
 8000d56:	f040 40fe 	orr.w	r0, r0, #2130706432	; 0x7f000000
 8000d5a:	f440 0040 	orr.w	r0, r0, #12582912	; 0xc00000
 8000d5e:	4770      	bx	lr

08000d60 <__aeabi_fdiv>:
 8000d60:	f04f 0cff 	mov.w	ip, #255	; 0xff
 8000d64:	ea1c 52d0 	ands.w	r2, ip, r0, lsr #23
 8000d68:	bf1e      	ittt	ne
 8000d6a:	ea1c 53d1 	andsne.w	r3, ip, r1, lsr #23
 8000d6e:	ea92 0f0c 	teqne	r2, ip
 8000d72:	ea93 0f0c 	teqne	r3, ip
 8000d76:	d069      	beq.n	8000e4c <__aeabi_fdiv+0xec>
 8000d78:	eba2 0203 	sub.w	r2, r2, r3
 8000d7c:	ea80 0c01 	eor.w	ip, r0, r1
 8000d80:	0249      	lsls	r1, r1, #9
 8000d82:	ea4f 2040 	mov.w	r0, r0, lsl #9
 8000d86:	d037      	beq.n	8000df8 <__aeabi_fdiv+0x98>
 8000d88:	f04f 5380 	mov.w	r3, #268435456	; 0x10000000
 8000d8c:	ea43 1111 	orr.w	r1, r3, r1, lsr #4
 8000d90:	ea43 1310 	orr.w	r3, r3, r0, lsr #4
 8000d94:	f00c 4000 	and.w	r0, ip, #2147483648	; 0x80000000
 8000d98:	428b      	cmp	r3, r1
 8000d9a:	bf38      	it	cc
 8000d9c:	005b      	lslcc	r3, r3, #1
 8000d9e:	f142 027d 	adc.w	r2, r2, #125	; 0x7d
 8000da2:	f44f 0c00 	mov.w	ip, #8388608	; 0x800000
 8000da6:	428b      	cmp	r3, r1
 8000da8:	bf24      	itt	cs
 8000daa:	1a5b      	subcs	r3, r3, r1
 8000dac:	ea40 000c 	orrcs.w	r0, r0, ip
 8000db0:	ebb3 0f51 	cmp.w	r3, r1, lsr #1
 8000db4:	bf24      	itt	cs
 8000db6:	eba3 0351 	subcs.w	r3, r3, r1, lsr #1
 8000dba:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 8000dbe:	ebb3 0f91 	cmp.w	r3, r1, lsr #2
 8000dc2:	bf24      	itt	cs
 8000dc4:	eba3 0391 	subcs.w	r3, r3, r1, lsr #2
 8000dc8:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 8000dcc:	ebb3 0fd1 	cmp.w	r3, r1, lsr #3
 8000dd0:	bf24      	itt	cs
 8000dd2:	eba3 03d1 	subcs.w	r3, r3, r1, lsr #3
 8000dd6:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 8000dda:	011b      	lsls	r3, r3, #4
 8000ddc:	bf18      	it	ne
 8000dde:	ea5f 1c1c 	movsne.w	ip, ip, lsr #4
 8000de2:	d1e0      	bne.n	8000da6 <__aeabi_fdiv+0x46>
 8000de4:	2afd      	cmp	r2, #253	; 0xfd
 8000de6:	f63f af50 	bhi.w	8000c8a <__aeabi_fmul+0x92>
 8000dea:	428b      	cmp	r3, r1
 8000dec:	eb40 50c2 	adc.w	r0, r0, r2, lsl #23
 8000df0:	bf08      	it	eq
 8000df2:	f020 0001 	biceq.w	r0, r0, #1
 8000df6:	4770      	bx	lr
 8000df8:	f00c 4c00 	and.w	ip, ip, #2147483648	; 0x80000000
 8000dfc:	ea4c 2050 	orr.w	r0, ip, r0, lsr #9
 8000e00:	327f      	adds	r2, #127	; 0x7f
 8000e02:	bfc2      	ittt	gt
 8000e04:	f1d2 03ff 	rsbsgt	r3, r2, #255	; 0xff
 8000e08:	ea40 50c2 	orrgt.w	r0, r0, r2, lsl #23
 8000e0c:	4770      	bxgt	lr
 8000e0e:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 8000e12:	f04f 0300 	mov.w	r3, #0
 8000e16:	3a01      	subs	r2, #1
 8000e18:	e737      	b.n	8000c8a <__aeabi_fmul+0x92>
 8000e1a:	f092 0f00 	teq	r2, #0
 8000e1e:	f000 4c00 	and.w	ip, r0, #2147483648	; 0x80000000
 8000e22:	bf02      	ittt	eq
 8000e24:	0040      	lsleq	r0, r0, #1
 8000e26:	f410 0f00 	tsteq.w	r0, #8388608	; 0x800000
 8000e2a:	3a01      	subeq	r2, #1
 8000e2c:	d0f9      	beq.n	8000e22 <__aeabi_fdiv+0xc2>
 8000e2e:	ea40 000c 	orr.w	r0, r0, ip
 8000e32:	f093 0f00 	teq	r3, #0
 8000e36:	f001 4c00 	and.w	ip, r1, #2147483648	; 0x80000000
 8000e3a:	bf02      	ittt	eq
 8000e3c:	0049      	lsleq	r1, r1, #1
 8000e3e:	f411 0f00 	tsteq.w	r1, #8388608	; 0x800000
 8000e42:	3b01      	subeq	r3, #1
 8000e44:	d0f9      	beq.n	8000e3a <__aeabi_fdiv+0xda>
 8000e46:	ea41 010c 	orr.w	r1, r1, ip
 8000e4a:	e795      	b.n	8000d78 <__aeabi_fdiv+0x18>
 8000e4c:	ea0c 53d1 	and.w	r3, ip, r1, lsr #23
 8000e50:	ea92 0f0c 	teq	r2, ip
 8000e54:	d108      	bne.n	8000e68 <__aeabi_fdiv+0x108>
 8000e56:	0242      	lsls	r2, r0, #9
 8000e58:	f47f af7d 	bne.w	8000d56 <__aeabi_fmul+0x15e>
 8000e5c:	ea93 0f0c 	teq	r3, ip
 8000e60:	f47f af70 	bne.w	8000d44 <__aeabi_fmul+0x14c>
 8000e64:	4608      	mov	r0, r1
 8000e66:	e776      	b.n	8000d56 <__aeabi_fmul+0x15e>
 8000e68:	ea93 0f0c 	teq	r3, ip
 8000e6c:	d104      	bne.n	8000e78 <__aeabi_fdiv+0x118>
 8000e6e:	024b      	lsls	r3, r1, #9
 8000e70:	f43f af4c 	beq.w	8000d0c <__aeabi_fmul+0x114>
 8000e74:	4608      	mov	r0, r1
 8000e76:	e76e      	b.n	8000d56 <__aeabi_fmul+0x15e>
 8000e78:	f030 4c00 	bics.w	ip, r0, #2147483648	; 0x80000000
 8000e7c:	bf18      	it	ne
 8000e7e:	f031 4c00 	bicsne.w	ip, r1, #2147483648	; 0x80000000
 8000e82:	d1ca      	bne.n	8000e1a <__aeabi_fdiv+0xba>
 8000e84:	f030 4200 	bics.w	r2, r0, #2147483648	; 0x80000000
 8000e88:	f47f af5c 	bne.w	8000d44 <__aeabi_fmul+0x14c>
 8000e8c:	f031 4300 	bics.w	r3, r1, #2147483648	; 0x80000000
 8000e90:	f47f af3c 	bne.w	8000d0c <__aeabi_fmul+0x114>
 8000e94:	e75f      	b.n	8000d56 <__aeabi_fmul+0x15e>
 8000e96:	bf00      	nop

08000e98 <__gesf2>:
 8000e98:	f04f 3cff 	mov.w	ip, #4294967295
 8000e9c:	e006      	b.n	8000eac <__cmpsf2+0x4>
 8000e9e:	bf00      	nop

08000ea0 <__lesf2>:
 8000ea0:	f04f 0c01 	mov.w	ip, #1
 8000ea4:	e002      	b.n	8000eac <__cmpsf2+0x4>
 8000ea6:	bf00      	nop

08000ea8 <__cmpsf2>:
 8000ea8:	f04f 0c01 	mov.w	ip, #1
 8000eac:	f84d cd04 	str.w	ip, [sp, #-4]!
 8000eb0:	ea4f 0240 	mov.w	r2, r0, lsl #1
 8000eb4:	ea4f 0341 	mov.w	r3, r1, lsl #1
 8000eb8:	ea7f 6c22 	mvns.w	ip, r2, asr #24
 8000ebc:	bf18      	it	ne
 8000ebe:	ea7f 6c23 	mvnsne.w	ip, r3, asr #24
 8000ec2:	d011      	beq.n	8000ee8 <__cmpsf2+0x40>
 8000ec4:	b001      	add	sp, #4
 8000ec6:	ea52 0c53 	orrs.w	ip, r2, r3, lsr #1
 8000eca:	bf18      	it	ne
 8000ecc:	ea90 0f01 	teqne	r0, r1
 8000ed0:	bf58      	it	pl
 8000ed2:	ebb2 0003 	subspl.w	r0, r2, r3
 8000ed6:	bf88      	it	hi
 8000ed8:	17c8      	asrhi	r0, r1, #31
 8000eda:	bf38      	it	cc
 8000edc:	ea6f 70e1 	mvncc.w	r0, r1, asr #31
 8000ee0:	bf18      	it	ne
 8000ee2:	f040 0001 	orrne.w	r0, r0, #1
 8000ee6:	4770      	bx	lr
 8000ee8:	ea7f 6c22 	mvns.w	ip, r2, asr #24
 8000eec:	d102      	bne.n	8000ef4 <__cmpsf2+0x4c>
 8000eee:	ea5f 2c40 	movs.w	ip, r0, lsl #9
 8000ef2:	d105      	bne.n	8000f00 <__cmpsf2+0x58>
 8000ef4:	ea7f 6c23 	mvns.w	ip, r3, asr #24
 8000ef8:	d1e4      	bne.n	8000ec4 <__cmpsf2+0x1c>
 8000efa:	ea5f 2c41 	movs.w	ip, r1, lsl #9
 8000efe:	d0e1      	beq.n	8000ec4 <__cmpsf2+0x1c>
 8000f00:	f85d 0b04 	ldr.w	r0, [sp], #4
 8000f04:	4770      	bx	lr
 8000f06:	bf00      	nop

08000f08 <__aeabi_cfrcmple>:
 8000f08:	4684      	mov	ip, r0
 8000f0a:	4608      	mov	r0, r1
 8000f0c:	4661      	mov	r1, ip
 8000f0e:	e7ff      	b.n	8000f10 <__aeabi_cfcmpeq>

08000f10 <__aeabi_cfcmpeq>:
 8000f10:	b50f      	push	{r0, r1, r2, r3, lr}
 8000f12:	f7ff ffc9 	bl	8000ea8 <__cmpsf2>
 8000f16:	2800      	cmp	r0, #0
 8000f18:	bf48      	it	mi
 8000f1a:	f110 0f00 	cmnmi.w	r0, #0
 8000f1e:	bd0f      	pop	{r0, r1, r2, r3, pc}

08000f20 <__aeabi_fcmpeq>:
 8000f20:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000f24:	f7ff fff4 	bl	8000f10 <__aeabi_cfcmpeq>
 8000f28:	bf0c      	ite	eq
 8000f2a:	2001      	moveq	r0, #1
 8000f2c:	2000      	movne	r0, #0
 8000f2e:	f85d fb08 	ldr.w	pc, [sp], #8
 8000f32:	bf00      	nop

08000f34 <__aeabi_fcmplt>:
 8000f34:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000f38:	f7ff ffea 	bl	8000f10 <__aeabi_cfcmpeq>
 8000f3c:	bf34      	ite	cc
 8000f3e:	2001      	movcc	r0, #1
 8000f40:	2000      	movcs	r0, #0
 8000f42:	f85d fb08 	ldr.w	pc, [sp], #8
 8000f46:	bf00      	nop

08000f48 <__aeabi_fcmple>:
 8000f48:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000f4c:	f7ff ffe0 	bl	8000f10 <__aeabi_cfcmpeq>
 8000f50:	bf94      	ite	ls
 8000f52:	2001      	movls	r0, #1
 8000f54:	2000      	movhi	r0, #0
 8000f56:	f85d fb08 	ldr.w	pc, [sp], #8
 8000f5a:	bf00      	nop

08000f5c <__aeabi_fcmpge>:
 8000f5c:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000f60:	f7ff ffd2 	bl	8000f08 <__aeabi_cfrcmple>
 8000f64:	bf94      	ite	ls
 8000f66:	2001      	movls	r0, #1
 8000f68:	2000      	movhi	r0, #0
 8000f6a:	f85d fb08 	ldr.w	pc, [sp], #8
 8000f6e:	bf00      	nop

08000f70 <__aeabi_fcmpgt>:
 8000f70:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000f74:	f7ff ffc8 	bl	8000f08 <__aeabi_cfrcmple>
 8000f78:	bf34      	ite	cc
 8000f7a:	2001      	movcc	r0, #1
 8000f7c:	2000      	movcs	r0, #0
 8000f7e:	f85d fb08 	ldr.w	pc, [sp], #8
 8000f82:	bf00      	nop

08000f84 <__aeabi_f2iz>:
 8000f84:	ea4f 0240 	mov.w	r2, r0, lsl #1
 8000f88:	f1b2 4ffe 	cmp.w	r2, #2130706432	; 0x7f000000
 8000f8c:	d30f      	bcc.n	8000fae <__aeabi_f2iz+0x2a>
 8000f8e:	f04f 039e 	mov.w	r3, #158	; 0x9e
 8000f92:	ebb3 6212 	subs.w	r2, r3, r2, lsr #24
 8000f96:	d90d      	bls.n	8000fb4 <__aeabi_f2iz+0x30>
 8000f98:	ea4f 2300 	mov.w	r3, r0, lsl #8
 8000f9c:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8000fa0:	f010 4f00 	tst.w	r0, #2147483648	; 0x80000000
 8000fa4:	fa23 f002 	lsr.w	r0, r3, r2
 8000fa8:	bf18      	it	ne
 8000faa:	4240      	negne	r0, r0
 8000fac:	4770      	bx	lr
 8000fae:	f04f 0000 	mov.w	r0, #0
 8000fb2:	4770      	bx	lr
 8000fb4:	f112 0f61 	cmn.w	r2, #97	; 0x61
 8000fb8:	d101      	bne.n	8000fbe <__aeabi_f2iz+0x3a>
 8000fba:	0242      	lsls	r2, r0, #9
 8000fbc:	d105      	bne.n	8000fca <__aeabi_f2iz+0x46>
 8000fbe:	f010 4000 	ands.w	r0, r0, #2147483648	; 0x80000000
 8000fc2:	bf08      	it	eq
 8000fc4:	f06f 4000 	mvneq.w	r0, #2147483648	; 0x80000000
 8000fc8:	4770      	bx	lr
 8000fca:	f04f 0000 	mov.w	r0, #0
 8000fce:	4770      	bx	lr

08000fd0 <MX_GPIO_Init>:
        * Output
        * EVENT_OUT
        * EXTI
*/
void MX_GPIO_Init(void)
{
 8000fd0:	b480      	push	{r7}
 8000fd2:	b085      	sub	sp, #20
 8000fd4:	af00      	add	r7, sp, #0

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOD_CLK_ENABLE();
 8000fd6:	4b14      	ldr	r3, [pc, #80]	; (8001028 <MX_GPIO_Init+0x58>)
 8000fd8:	699b      	ldr	r3, [r3, #24]
 8000fda:	4a13      	ldr	r2, [pc, #76]	; (8001028 <MX_GPIO_Init+0x58>)
 8000fdc:	f043 0320 	orr.w	r3, r3, #32
 8000fe0:	6193      	str	r3, [r2, #24]
 8000fe2:	4b11      	ldr	r3, [pc, #68]	; (8001028 <MX_GPIO_Init+0x58>)
 8000fe4:	699b      	ldr	r3, [r3, #24]
 8000fe6:	f003 0320 	and.w	r3, r3, #32
 8000fea:	60fb      	str	r3, [r7, #12]
 8000fec:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8000fee:	4b0e      	ldr	r3, [pc, #56]	; (8001028 <MX_GPIO_Init+0x58>)
 8000ff0:	699b      	ldr	r3, [r3, #24]
 8000ff2:	4a0d      	ldr	r2, [pc, #52]	; (8001028 <MX_GPIO_Init+0x58>)
 8000ff4:	f043 0304 	orr.w	r3, r3, #4
 8000ff8:	6193      	str	r3, [r2, #24]
 8000ffa:	4b0b      	ldr	r3, [pc, #44]	; (8001028 <MX_GPIO_Init+0x58>)
 8000ffc:	699b      	ldr	r3, [r3, #24]
 8000ffe:	f003 0304 	and.w	r3, r3, #4
 8001002:	60bb      	str	r3, [r7, #8]
 8001004:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8001006:	4b08      	ldr	r3, [pc, #32]	; (8001028 <MX_GPIO_Init+0x58>)
 8001008:	699b      	ldr	r3, [r3, #24]
 800100a:	4a07      	ldr	r2, [pc, #28]	; (8001028 <MX_GPIO_Init+0x58>)
 800100c:	f043 0308 	orr.w	r3, r3, #8
 8001010:	6193      	str	r3, [r2, #24]
 8001012:	4b05      	ldr	r3, [pc, #20]	; (8001028 <MX_GPIO_Init+0x58>)
 8001014:	699b      	ldr	r3, [r3, #24]
 8001016:	f003 0308 	and.w	r3, r3, #8
 800101a:	607b      	str	r3, [r7, #4]
 800101c:	687b      	ldr	r3, [r7, #4]

}
 800101e:	bf00      	nop
 8001020:	3714      	adds	r7, #20
 8001022:	46bd      	mov	sp, r7
 8001024:	bc80      	pop	{r7}
 8001026:	4770      	bx	lr
 8001028:	40021000 	.word	0x40021000

0800102c <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 800102c:	b580      	push	{r7, lr}
 800102e:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8001030:	f001 f978 	bl	8002324 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8001034:	f000 f918 	bl	8001268 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8001038:	f7ff ffca 	bl	8000fd0 <MX_GPIO_Init>
  MX_TIM4_Init();
 800103c:	f000 ff9a 	bl	8001f74 <MX_TIM4_Init>
  MX_TIM3_Init();
 8001040:	f000 ff4a 	bl	8001ed8 <MX_TIM3_Init>
  MX_TIM2_Init();
 8001044:	f000 fece 	bl	8001de4 <MX_TIM2_Init>
  MX_USART3_UART_Init();
 8001048:	f001 f8c8 	bl	80021dc <MX_USART3_UART_Init>
  MX_TIM1_Init();
 800104c:	f000 fe72 	bl	8001d34 <MX_TIM1_Init>
  /* USER CODE BEGIN 2 */

// cho vao motor init
  HAL_TIM_Encoder_Start(&htim4, TIM_CHANNEL_1);
 8001050:	2100      	movs	r1, #0
 8001052:	486a      	ldr	r0, [pc, #424]	; (80011fc <main+0x1d0>)
 8001054:	f002 fb5a 	bl	800370c <HAL_TIM_Encoder_Start>
  HAL_TIM_Encoder_Start(&htim4, TIM_CHANNEL_2);
 8001058:	2104      	movs	r1, #4
 800105a:	4868      	ldr	r0, [pc, #416]	; (80011fc <main+0x1d0>)
 800105c:	f002 fb56 	bl	800370c <HAL_TIM_Encoder_Start>

  HAL_TIM_Encoder_Start(&htim1, TIM_CHANNEL_1);
 8001060:	2100      	movs	r1, #0
 8001062:	4867      	ldr	r0, [pc, #412]	; (8001200 <main+0x1d4>)
 8001064:	f002 fb52 	bl	800370c <HAL_TIM_Encoder_Start>
  HAL_TIM_Encoder_Start(&htim1, TIM_CHANNEL_2);
 8001068:	2104      	movs	r1, #4
 800106a:	4865      	ldr	r0, [pc, #404]	; (8001200 <main+0x1d4>)
 800106c:	f002 fb4e 	bl	800370c <HAL_TIM_Encoder_Start>


  HAL_TIM_Base_Start_IT(&htim3);
 8001070:	4864      	ldr	r0, [pc, #400]	; (8001204 <main+0x1d8>)
 8001072:	f002 f965 	bl	8003340 <HAL_TIM_Base_Start_IT>

  HAL_TIM_PWM_Start(&htim2, TIM_CHANNEL_1);
 8001076:	2100      	movs	r1, #0
 8001078:	4863      	ldr	r0, [pc, #396]	; (8001208 <main+0x1dc>)
 800107a:	f002 fa03 	bl	8003484 <HAL_TIM_PWM_Start>
  HAL_TIM_PWM_Start(&htim2, TIM_CHANNEL_2);
 800107e:	2104      	movs	r1, #4
 8001080:	4861      	ldr	r0, [pc, #388]	; (8001208 <main+0x1dc>)
 8001082:	f002 f9ff 	bl	8003484 <HAL_TIM_PWM_Start>
  HAL_TIM_PWM_Start(&htim2, TIM_CHANNEL_3);
 8001086:	2108      	movs	r1, #8
 8001088:	485f      	ldr	r0, [pc, #380]	; (8001208 <main+0x1dc>)
 800108a:	f002 f9fb 	bl	8003484 <HAL_TIM_PWM_Start>
  HAL_TIM_PWM_Start(&htim2, TIM_CHANNEL_4);
 800108e:	210c      	movs	r1, #12
 8001090:	485d      	ldr	r0, [pc, #372]	; (8001208 <main+0x1dc>)
 8001092:	f002 f9f7 	bl	8003484 <HAL_TIM_PWM_Start>

  HAL_UART_Receive_IT(&huart3, (uint8_t *)g_nRxBuff, MAX_LEN);
 8001096:	2217      	movs	r2, #23
 8001098:	495c      	ldr	r1, [pc, #368]	; (800120c <main+0x1e0>)
 800109a:	485d      	ldr	r0, [pc, #372]	; (8001210 <main+0x1e4>)
 800109c:	f003 fa65 	bl	800456a <HAL_UART_Receive_IT>
  SerialInit();
 80010a0:	f000 fcb6 	bl	8001a10 <SerialInit>

  pid3.dKp = 0.35;
 80010a4:	4b5b      	ldr	r3, [pc, #364]	; (8001214 <main+0x1e8>)
 80010a6:	4a5c      	ldr	r2, [pc, #368]	; (8001218 <main+0x1ec>)
 80010a8:	601a      	str	r2, [r3, #0]
  pid3.dKi = 0.9;
 80010aa:	4b5a      	ldr	r3, [pc, #360]	; (8001214 <main+0x1e8>)
 80010ac:	4a5b      	ldr	r2, [pc, #364]	; (800121c <main+0x1f0>)
 80010ae:	605a      	str	r2, [r3, #4]
  pid3.dKd = 0.0001;
 80010b0:	4b58      	ldr	r3, [pc, #352]	; (8001214 <main+0x1e8>)
 80010b2:	4a5b      	ldr	r2, [pc, #364]	; (8001220 <main+0x1f4>)
 80010b4:	609a      	str	r2, [r3, #8]
  while (1)
  {
    /* USER CODE END WHILE */

    /* USER CODE BEGIN 3 */
	  if(g_bDataAvailable == true)
 80010b6:	4b5b      	ldr	r3, [pc, #364]	; (8001224 <main+0x1f8>)
 80010b8:	781b      	ldrb	r3, [r3, #0]
 80010ba:	2b00      	cmp	r3, #0
 80010bc:	d035      	beq.n	800112a <main+0xfe>
		  	      {
		  	        if(StrCompare(g_strCommand, (uint8_t*)"SPID", 4))
 80010be:	2204      	movs	r2, #4
 80010c0:	4959      	ldr	r1, [pc, #356]	; (8001228 <main+0x1fc>)
 80010c2:	485a      	ldr	r0, [pc, #360]	; (800122c <main+0x200>)
 80010c4:	f000 fc80 	bl	80019c8 <StrCompare>
 80010c8:	4603      	mov	r3, r0
 80010ca:	2b00      	cmp	r3, #0
 80010cc:	d003      	beq.n	80010d6 <main+0xaa>
		  	        {
		  	          process = SPID;
 80010ce:	4b58      	ldr	r3, [pc, #352]	; (8001230 <main+0x204>)
 80010d0:	2202      	movs	r2, #2
 80010d2:	701a      	strb	r2, [r3, #0]
 80010d4:	e026      	b.n	8001124 <main+0xf8>
		  	        }
		  	        else if(StrCompare(g_strCommand, (uint8_t*)"VTUN", 4))
 80010d6:	2204      	movs	r2, #4
 80010d8:	4956      	ldr	r1, [pc, #344]	; (8001234 <main+0x208>)
 80010da:	4854      	ldr	r0, [pc, #336]	; (800122c <main+0x200>)
 80010dc:	f000 fc74 	bl	80019c8 <StrCompare>
 80010e0:	4603      	mov	r3, r0
 80010e2:	2b00      	cmp	r3, #0
 80010e4:	d003      	beq.n	80010ee <main+0xc2>
		  	        {
		  	          process = VTUN;
 80010e6:	4b52      	ldr	r3, [pc, #328]	; (8001230 <main+0x204>)
 80010e8:	2203      	movs	r2, #3
 80010ea:	701a      	strb	r2, [r3, #0]
 80010ec:	e01a      	b.n	8001124 <main+0xf8>
		  	        }
		  	        else if(StrCompare(g_strCommand, (uint8_t*)"PTUN", 4))
 80010ee:	2204      	movs	r2, #4
 80010f0:	4951      	ldr	r1, [pc, #324]	; (8001238 <main+0x20c>)
 80010f2:	484e      	ldr	r0, [pc, #312]	; (800122c <main+0x200>)
 80010f4:	f000 fc68 	bl	80019c8 <StrCompare>
 80010f8:	4603      	mov	r3, r0
 80010fa:	2b00      	cmp	r3, #0
 80010fc:	d003      	beq.n	8001106 <main+0xda>
		  	        {
		  	          process = PTUN;
 80010fe:	4b4c      	ldr	r3, [pc, #304]	; (8001230 <main+0x204>)
 8001100:	2204      	movs	r2, #4
 8001102:	701a      	strb	r2, [r3, #0]
 8001104:	e00e      	b.n	8001124 <main+0xf8>
		  	        }
		  	      else if(StrCompare(g_strCommand, (uint8_t*)"STOP", 4))
 8001106:	2204      	movs	r2, #4
 8001108:	494c      	ldr	r1, [pc, #304]	; (800123c <main+0x210>)
 800110a:	4848      	ldr	r0, [pc, #288]	; (800122c <main+0x200>)
 800110c:	f000 fc5c 	bl	80019c8 <StrCompare>
 8001110:	4603      	mov	r3, r0
 8001112:	2b00      	cmp	r3, #0
 8001114:	d003      	beq.n	800111e <main+0xf2>
		  	       {
		  	      	 process = STOP;
 8001116:	4b46      	ldr	r3, [pc, #280]	; (8001230 <main+0x204>)
 8001118:	2205      	movs	r2, #5
 800111a:	701a      	strb	r2, [r3, #0]
 800111c:	e002      	b.n	8001124 <main+0xf8>
		  	       }
		  	        else
		  	        {
		  	          process = NONE;
 800111e:	4b44      	ldr	r3, [pc, #272]	; (8001230 <main+0x204>)
 8001120:	2201      	movs	r2, #1
 8001122:	701a      	strb	r2, [r3, #0]
		  	        }
		  	        g_bDataAvailable = false;
 8001124:	4b3f      	ldr	r3, [pc, #252]	; (8001224 <main+0x1f8>)
 8001126:	2200      	movs	r2, #0
 8001128:	701a      	strb	r2, [r3, #0]
		  	      }
	  switch(process)
 800112a:	4b41      	ldr	r3, [pc, #260]	; (8001230 <main+0x204>)
 800112c:	781b      	ldrb	r3, [r3, #0]
 800112e:	3b01      	subs	r3, #1
 8001130:	2b04      	cmp	r3, #4
 8001132:	d8c0      	bhi.n	80010b6 <main+0x8a>
 8001134:	a201      	add	r2, pc, #4	; (adr r2, 800113c <main+0x110>)
 8001136:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800113a:	bf00      	nop
 800113c:	08001151 	.word	0x08001151
 8001140:	08001157 	.word	0x08001157
 8001144:	080010b7 	.word	0x080010b7
 8001148:	080010b7 	.word	0x080010b7
 800114c:	080011ab 	.word	0x080011ab
	 	  	      {
	 	  	        case NONE:
	 	  	          SerialAcceptReceive();
 8001150:	f000 fc6c 	bl	8001a2c <SerialAcceptReceive>
	 	  	          break;
 8001154:	e050      	b.n	80011f8 <main+0x1cc>
	 	  	        case SPID:
	 	  	        	PIDReset(&pid1);
 8001156:	483a      	ldr	r0, [pc, #232]	; (8001240 <main+0x214>)
 8001158:	f000 fb72 	bl	8001840 <PIDReset>
	 	  	        	PIDReset(&pid2);
 800115c:	4839      	ldr	r0, [pc, #228]	; (8001244 <main+0x218>)
 800115e:	f000 fb6f 	bl	8001840 <PIDReset>
	 	  	        	//get parameter
	 	  	        	pid1.dKp = (*(float*)g_kp);
 8001162:	4b39      	ldr	r3, [pc, #228]	; (8001248 <main+0x21c>)
 8001164:	681b      	ldr	r3, [r3, #0]
 8001166:	4a36      	ldr	r2, [pc, #216]	; (8001240 <main+0x214>)
 8001168:	6013      	str	r3, [r2, #0]
	 	  	        	pid1.dKi = (*(float*)g_ki);
 800116a:	4b38      	ldr	r3, [pc, #224]	; (800124c <main+0x220>)
 800116c:	681b      	ldr	r3, [r3, #0]
 800116e:	4a34      	ldr	r2, [pc, #208]	; (8001240 <main+0x214>)
 8001170:	6053      	str	r3, [r2, #4]
	 	  	        	pid1.dKd = (*(float*)g_kd);
 8001172:	4b37      	ldr	r3, [pc, #220]	; (8001250 <main+0x224>)
 8001174:	681b      	ldr	r3, [r3, #0]
 8001176:	4a32      	ldr	r2, [pc, #200]	; (8001240 <main+0x214>)
 8001178:	6093      	str	r3, [r2, #8]

	 	  	        	pid2.dKp = pid1.dKp;
 800117a:	4b31      	ldr	r3, [pc, #196]	; (8001240 <main+0x214>)
 800117c:	681b      	ldr	r3, [r3, #0]
 800117e:	4a31      	ldr	r2, [pc, #196]	; (8001244 <main+0x218>)
 8001180:	6013      	str	r3, [r2, #0]
	 	  	        	pid2.dKi = pid1.dKi;
 8001182:	4b2f      	ldr	r3, [pc, #188]	; (8001240 <main+0x214>)
 8001184:	685b      	ldr	r3, [r3, #4]
 8001186:	4a2f      	ldr	r2, [pc, #188]	; (8001244 <main+0x218>)
 8001188:	6053      	str	r3, [r2, #4]
	 	  	        	pid2.dKd = pid1.dKd ;
 800118a:	4b2d      	ldr	r3, [pc, #180]	; (8001240 <main+0x214>)
 800118c:	689b      	ldr	r3, [r3, #8]
 800118e:	4a2d      	ldr	r2, [pc, #180]	; (8001244 <main+0x218>)
 8001190:	6093      	str	r3, [r2, #8]
	 	  	        	//get setPoint
	 	  	        	motor1.setPoint=(*(float*)g_Setpoint);
 8001192:	4b30      	ldr	r3, [pc, #192]	; (8001254 <main+0x228>)
 8001194:	681b      	ldr	r3, [r3, #0]
 8001196:	4a30      	ldr	r2, [pc, #192]	; (8001258 <main+0x22c>)
 8001198:	6193      	str	r3, [r2, #24]
	 	  	        	motor2.setPoint=motor1.setPoint;
 800119a:	4b2f      	ldr	r3, [pc, #188]	; (8001258 <main+0x22c>)
 800119c:	699b      	ldr	r3, [r3, #24]
 800119e:	4a2f      	ldr	r2, [pc, #188]	; (800125c <main+0x230>)
 80011a0:	6193      	str	r3, [r2, #24]

	 	  	        	process= NONE;
 80011a2:	4b23      	ldr	r3, [pc, #140]	; (8001230 <main+0x204>)
 80011a4:	2201      	movs	r2, #1
 80011a6:	701a      	strb	r2, [r3, #0]
	 	  	          break;
 80011a8:	e026      	b.n	80011f8 <main+0x1cc>
	 	  	        case PTUN:

	 	  	        	break;
	 	  	        case STOP:

	 	  	        	 PIDReset(&pid1);
 80011aa:	4825      	ldr	r0, [pc, #148]	; (8001240 <main+0x214>)
 80011ac:	f000 fb48 	bl	8001840 <PIDReset>
	 	  	        	 PIDReset(&pid2);
 80011b0:	4824      	ldr	r0, [pc, #144]	; (8001244 <main+0x218>)
 80011b2:	f000 fb45 	bl	8001840 <PIDReset>
	 	  	        	 PIDReset(&pid3);
 80011b6:	4817      	ldr	r0, [pc, #92]	; (8001214 <main+0x1e8>)
 80011b8:	f000 fb42 	bl	8001840 <PIDReset>

	 	  	        	 MotorReset(&motor1);
 80011bc:	4826      	ldr	r0, [pc, #152]	; (8001258 <main+0x22c>)
 80011be:	f000 f9aa 	bl	8001516 <MotorReset>
	 	  	        	 MotorReset(&motor2);
 80011c2:	4826      	ldr	r0, [pc, #152]	; (800125c <main+0x230>)
 80011c4:	f000 f9a7 	bl	8001516 <MotorReset>

	 	  	        	 htim4.Instance->CNT=0;
 80011c8:	4b0c      	ldr	r3, [pc, #48]	; (80011fc <main+0x1d0>)
 80011ca:	681b      	ldr	r3, [r3, #0]
 80011cc:	2200      	movs	r2, #0
 80011ce:	625a      	str	r2, [r3, #36]	; 0x24
	 	  	        	 htim1.Instance->CNT=0;
 80011d0:	4b0b      	ldr	r3, [pc, #44]	; (8001200 <main+0x1d4>)
 80011d2:	681b      	ldr	r3, [r3, #0]
 80011d4:	2200      	movs	r2, #0
 80011d6:	625a      	str	r2, [r3, #36]	; 0x24

	 	  	        	 MotorSetDuty1(0);
 80011d8:	2000      	movs	r0, #0
 80011da:	f000 f9bf 	bl	800155c <MotorSetDuty1>
	 	  	        	 MotorSetDuty2(0);
 80011de:	2000      	movs	r0, #0
 80011e0:	f000 f9ee 	bl	80015c0 <MotorSetDuty2>

	 	  	        	 k = 0;
 80011e4:	4b1e      	ldr	r3, [pc, #120]	; (8001260 <main+0x234>)
 80011e6:	2200      	movs	r2, #0
 80011e8:	801a      	strh	r2, [r3, #0]
	 	  	        	 c = 0;
 80011ea:	4b1e      	ldr	r3, [pc, #120]	; (8001264 <main+0x238>)
 80011ec:	2200      	movs	r2, #0
 80011ee:	801a      	strh	r2, [r3, #0]

	 	  	        	process= NONE;
 80011f0:	4b0f      	ldr	r3, [pc, #60]	; (8001230 <main+0x204>)
 80011f2:	2201      	movs	r2, #1
 80011f4:	701a      	strb	r2, [r3, #0]
	 	  	        	break;
 80011f6:	bf00      	nop
	  if(g_bDataAvailable == true)
 80011f8:	e75d      	b.n	80010b6 <main+0x8a>
 80011fa:	bf00      	nop
 80011fc:	2000025c 	.word	0x2000025c
 8001200:	20000184 	.word	0x20000184
 8001204:	20000214 	.word	0x20000214
 8001208:	200001cc 	.word	0x200001cc
 800120c:	2000013c 	.word	0x2000013c
 8001210:	200002a4 	.word	0x200002a4
 8001214:	200000fc 	.word	0x200000fc
 8001218:	3eb33333 	.word	0x3eb33333
 800121c:	3f666666 	.word	0x3f666666
 8001220:	38d1b717 	.word	0x38d1b717
 8001224:	2000017c 	.word	0x2000017c
 8001228:	080050c8 	.word	0x080050c8
 800122c:	20000154 	.word	0x20000154
 8001230:	20000114 	.word	0x20000114
 8001234:	080050d0 	.word	0x080050d0
 8001238:	080050d8 	.word	0x080050d8
 800123c:	080050e0 	.word	0x080050e0
 8001240:	200000cc 	.word	0x200000cc
 8001244:	200000e4 	.word	0x200000e4
 8001248:	2000016c 	.word	0x2000016c
 800124c:	20000170 	.word	0x20000170
 8001250:	20000174 	.word	0x20000174
 8001254:	20000178 	.word	0x20000178
 8001258:	20000094 	.word	0x20000094
 800125c:	200000b0 	.word	0x200000b0
 8001260:	20000134 	.word	0x20000134
 8001264:	20000136 	.word	0x20000136

08001268 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8001268:	b580      	push	{r7, lr}
 800126a:	b090      	sub	sp, #64	; 0x40
 800126c:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 800126e:	f107 0318 	add.w	r3, r7, #24
 8001272:	2228      	movs	r2, #40	; 0x28
 8001274:	2100      	movs	r1, #0
 8001276:	4618      	mov	r0, r3
 8001278:	f003 fe18 	bl	8004eac <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 800127c:	1d3b      	adds	r3, r7, #4
 800127e:	2200      	movs	r2, #0
 8001280:	601a      	str	r2, [r3, #0]
 8001282:	605a      	str	r2, [r3, #4]
 8001284:	609a      	str	r2, [r3, #8]
 8001286:	60da      	str	r2, [r3, #12]
 8001288:	611a      	str	r2, [r3, #16]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 800128a:	2301      	movs	r3, #1
 800128c:	61bb      	str	r3, [r7, #24]
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 800128e:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 8001292:	61fb      	str	r3, [r7, #28]
  RCC_OscInitStruct.HSEPredivValue = RCC_HSE_PREDIV_DIV1;
 8001294:	2300      	movs	r3, #0
 8001296:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 8001298:	2301      	movs	r3, #1
 800129a:	62bb      	str	r3, [r7, #40]	; 0x28
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 800129c:	2302      	movs	r3, #2
 800129e:	637b      	str	r3, [r7, #52]	; 0x34
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 80012a0:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 80012a4:	63bb      	str	r3, [r7, #56]	; 0x38
  RCC_OscInitStruct.PLL.PLLMUL = RCC_PLL_MUL9;
 80012a6:	f44f 13e0 	mov.w	r3, #1835008	; 0x1c0000
 80012aa:	63fb      	str	r3, [r7, #60]	; 0x3c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 80012ac:	f107 0318 	add.w	r3, r7, #24
 80012b0:	4618      	mov	r0, r3
 80012b2:	f001 fbdb 	bl	8002a6c <HAL_RCC_OscConfig>
 80012b6:	4603      	mov	r3, r0
 80012b8:	2b00      	cmp	r3, #0
 80012ba:	d001      	beq.n	80012c0 <SystemClock_Config+0x58>
  {
    Error_Handler();
 80012bc:	f000 f926 	bl	800150c <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 80012c0:	230f      	movs	r3, #15
 80012c2:	607b      	str	r3, [r7, #4]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 80012c4:	2302      	movs	r3, #2
 80012c6:	60bb      	str	r3, [r7, #8]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 80012c8:	2300      	movs	r3, #0
 80012ca:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV2;
 80012cc:	f44f 6380 	mov.w	r3, #1024	; 0x400
 80012d0:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 80012d2:	2300      	movs	r3, #0
 80012d4:	617b      	str	r3, [r7, #20]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_2) != HAL_OK)
 80012d6:	1d3b      	adds	r3, r7, #4
 80012d8:	2102      	movs	r1, #2
 80012da:	4618      	mov	r0, r3
 80012dc:	f001 fe48 	bl	8002f70 <HAL_RCC_ClockConfig>
 80012e0:	4603      	mov	r3, r0
 80012e2:	2b00      	cmp	r3, #0
 80012e4:	d001      	beq.n	80012ea <SystemClock_Config+0x82>
  {
    Error_Handler();
 80012e6:	f000 f911 	bl	800150c <Error_Handler>
  }
}
 80012ea:	bf00      	nop
 80012ec:	3740      	adds	r7, #64	; 0x40
 80012ee:	46bd      	mov	sp, r7
 80012f0:	bd80      	pop	{r7, pc}
	...

080012f4 <HAL_TIM_PeriodElapsedCallback>:

/* USER CODE BEGIN 4 */

void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{
 80012f4:	b580      	push	{r7, lr}
 80012f6:	b082      	sub	sp, #8
 80012f8:	af00      	add	r7, sp, #0
 80012fa:	6078      	str	r0, [r7, #4]

	  if(htim->Instance == htim3.Instance)
 80012fc:	687b      	ldr	r3, [r7, #4]
 80012fe:	681a      	ldr	r2, [r3, #0]
 8001300:	4b6b      	ldr	r3, [pc, #428]	; (80014b0 <HAL_TIM_PeriodElapsedCallback+0x1bc>)
 8001302:	681b      	ldr	r3, [r3, #0]
 8001304:	429a      	cmp	r2, r3
 8001306:	f040 80cb 	bne.w	80014a0 <HAL_TIM_PeriodElapsedCallback+0x1ac>
	  {

		  switch(process)
 800130a:	4b6a      	ldr	r3, [pc, #424]	; (80014b4 <HAL_TIM_PeriodElapsedCallback+0x1c0>)
 800130c:	781b      	ldrb	r3, [r3, #0]
 800130e:	3b01      	subs	r3, #1
 8001310:	2b04      	cmp	r3, #4
 8001312:	f200 80c8 	bhi.w	80014a6 <HAL_TIM_PeriodElapsedCallback+0x1b2>
 8001316:	a201      	add	r2, pc, #4	; (adr r2, 800131c <HAL_TIM_PeriodElapsedCallback+0x28>)
 8001318:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800131c:	080014a5 	.word	0x080014a5
 8001320:	080014a5 	.word	0x080014a5
 8001324:	08001331 	.word	0x08001331
 8001328:	080013c5 	.word	0x080013c5
 800132c:	080014a5 	.word	0x080014a5
		  	 	  	        case NONE:
		  	 	  	          break;
		  	 	  	        case SPID:
		  	 	  	          break;
		  	 	  	        case VTUN:
							   k++;
 8001330:	4b61      	ldr	r3, [pc, #388]	; (80014b8 <HAL_TIM_PeriodElapsedCallback+0x1c4>)
 8001332:	881b      	ldrh	r3, [r3, #0]
 8001334:	3301      	adds	r3, #1
 8001336:	b29a      	uxth	r2, r3
 8001338:	4b5f      	ldr	r3, [pc, #380]	; (80014b8 <HAL_TIM_PeriodElapsedCallback+0x1c4>)
 800133a:	801a      	strh	r2, [r3, #0]
//							   if(k % 700 == 0){
//								   motor1.setPoint+=50;
//								   motor2.setPoint+=50;
//							   }

							   ReadEncoder(&motor1, &htim4);
 800133c:	495f      	ldr	r1, [pc, #380]	; (80014bc <HAL_TIM_PeriodElapsedCallback+0x1c8>)
 800133e:	4860      	ldr	r0, [pc, #384]	; (80014c0 <HAL_TIM_PeriodElapsedCallback+0x1cc>)
 8001340:	f000 f972 	bl	8001628 <ReadEncoder>
							   ReadEncoder(&motor2, &htim1);
 8001344:	495f      	ldr	r1, [pc, #380]	; (80014c4 <HAL_TIM_PeriodElapsedCallback+0x1d0>)
 8001346:	4860      	ldr	r0, [pc, #384]	; (80014c8 <HAL_TIM_PeriodElapsedCallback+0x1d4>)
 8001348:	f000 f96e 	bl	8001628 <ReadEncoder>

							   MotorSetDuty1((int) MotorTuningVelocity(&pid1, &motor1, motor1.setPoint));
 800134c:	4b5c      	ldr	r3, [pc, #368]	; (80014c0 <HAL_TIM_PeriodElapsedCallback+0x1cc>)
 800134e:	699b      	ldr	r3, [r3, #24]
 8001350:	461a      	mov	r2, r3
 8001352:	495b      	ldr	r1, [pc, #364]	; (80014c0 <HAL_TIM_PeriodElapsedCallback+0x1cc>)
 8001354:	485d      	ldr	r0, [pc, #372]	; (80014cc <HAL_TIM_PeriodElapsedCallback+0x1d8>)
 8001356:	f000 fa3f 	bl	80017d8 <MotorTuningVelocity>
 800135a:	4603      	mov	r3, r0
 800135c:	4618      	mov	r0, r3
 800135e:	f7ff fe11 	bl	8000f84 <__aeabi_f2iz>
 8001362:	4603      	mov	r3, r0
 8001364:	4618      	mov	r0, r3
 8001366:	f000 f8f9 	bl	800155c <MotorSetDuty1>
							   MotorSetDuty2((int) MotorTuningVelocity(&pid2, &motor2, motor2.setPoint));
 800136a:	4b57      	ldr	r3, [pc, #348]	; (80014c8 <HAL_TIM_PeriodElapsedCallback+0x1d4>)
 800136c:	699b      	ldr	r3, [r3, #24]
 800136e:	461a      	mov	r2, r3
 8001370:	4955      	ldr	r1, [pc, #340]	; (80014c8 <HAL_TIM_PeriodElapsedCallback+0x1d4>)
 8001372:	4857      	ldr	r0, [pc, #348]	; (80014d0 <HAL_TIM_PeriodElapsedCallback+0x1dc>)
 8001374:	f000 fa30 	bl	80017d8 <MotorTuningVelocity>
 8001378:	4603      	mov	r3, r0
 800137a:	4618      	mov	r0, r3
 800137c:	f7ff fe02 	bl	8000f84 <__aeabi_f2iz>
 8001380:	4603      	mov	r3, r0
 8001382:	4618      	mov	r0, r3
 8001384:	f000 f91c 	bl	80015c0 <MotorSetDuty2>
							//cast data

							   g_vel2 = (uint8_t*)(&motor2.velocity);
 8001388:	4b52      	ldr	r3, [pc, #328]	; (80014d4 <HAL_TIM_PeriodElapsedCallback+0x1e0>)
 800138a:	4a53      	ldr	r2, [pc, #332]	; (80014d8 <HAL_TIM_PeriodElapsedCallback+0x1e4>)
 800138c:	601a      	str	r2, [r3, #0]
							   g_vel1 = (uint8_t*)(&motor1.velocity);
 800138e:	4b53      	ldr	r3, [pc, #332]	; (80014dc <HAL_TIM_PeriodElapsedCallback+0x1e8>)
 8001390:	4a53      	ldr	r2, [pc, #332]	; (80014e0 <HAL_TIM_PeriodElapsedCallback+0x1ec>)
 8001392:	601a      	str	r2, [r3, #0]
							   g_pos = (uint8_t*)(&motor1.position);
 8001394:	4b53      	ldr	r3, [pc, #332]	; (80014e4 <HAL_TIM_PeriodElapsedCallback+0x1f0>)
 8001396:	4a54      	ldr	r2, [pc, #336]	; (80014e8 <HAL_TIM_PeriodElapsedCallback+0x1f4>)
 8001398:	601a      	str	r2, [r3, #0]



							   memcpy(g_nTxData, g_vel2, 4);
 800139a:	4b4e      	ldr	r3, [pc, #312]	; (80014d4 <HAL_TIM_PeriodElapsedCallback+0x1e0>)
 800139c:	681b      	ldr	r3, [r3, #0]
 800139e:	681b      	ldr	r3, [r3, #0]
 80013a0:	461a      	mov	r2, r3
 80013a2:	4b52      	ldr	r3, [pc, #328]	; (80014ec <HAL_TIM_PeriodElapsedCallback+0x1f8>)
 80013a4:	601a      	str	r2, [r3, #0]
							   memcpy(g_nTxData+4, g_vel1, 4);
 80013a6:	4a52      	ldr	r2, [pc, #328]	; (80014f0 <HAL_TIM_PeriodElapsedCallback+0x1fc>)
 80013a8:	4b4c      	ldr	r3, [pc, #304]	; (80014dc <HAL_TIM_PeriodElapsedCallback+0x1e8>)
 80013aa:	681b      	ldr	r3, [r3, #0]
 80013ac:	681b      	ldr	r3, [r3, #0]
 80013ae:	6013      	str	r3, [r2, #0]
							   memcpy(g_nTxData+8, g_pos, 4);
 80013b0:	4a50      	ldr	r2, [pc, #320]	; (80014f4 <HAL_TIM_PeriodElapsedCallback+0x200>)
 80013b2:	4b4c      	ldr	r3, [pc, #304]	; (80014e4 <HAL_TIM_PeriodElapsedCallback+0x1f0>)
 80013b4:	681b      	ldr	r3, [r3, #0]
 80013b6:	681b      	ldr	r3, [r3, #0]
 80013b8:	6013      	str	r3, [r2, #0]



							//send data
							   SerialWriteComm(g_strCommand, g_nTxData);
 80013ba:	494c      	ldr	r1, [pc, #304]	; (80014ec <HAL_TIM_PeriodElapsedCallback+0x1f8>)
 80013bc:	484e      	ldr	r0, [pc, #312]	; (80014f8 <HAL_TIM_PeriodElapsedCallback+0x204>)
 80013be:	f000 fb43 	bl	8001a48 <SerialWriteComm>
		  	 	  	        	break;
 80013c2:	e070      	b.n	80014a6 <HAL_TIM_PeriodElapsedCallback+0x1b2>

		  	 	  	        case PTUN:

							   ReadEncoder(&motor1, &htim4);
 80013c4:	493d      	ldr	r1, [pc, #244]	; (80014bc <HAL_TIM_PeriodElapsedCallback+0x1c8>)
 80013c6:	483e      	ldr	r0, [pc, #248]	; (80014c0 <HAL_TIM_PeriodElapsedCallback+0x1cc>)
 80013c8:	f000 f92e 	bl	8001628 <ReadEncoder>
							   ReadEncoder(&motor2, &htim1);
 80013cc:	493d      	ldr	r1, [pc, #244]	; (80014c4 <HAL_TIM_PeriodElapsedCallback+0x1d0>)
 80013ce:	483e      	ldr	r0, [pc, #248]	; (80014c8 <HAL_TIM_PeriodElapsedCallback+0x1d4>)
 80013d0:	f000 f92a 	bl	8001628 <ReadEncoder>
							   if(c==1)
 80013d4:	4b49      	ldr	r3, [pc, #292]	; (80014fc <HAL_TIM_PeriodElapsedCallback+0x208>)
 80013d6:	881b      	ldrh	r3, [r3, #0]
 80013d8:	2b01      	cmp	r3, #1
 80013da:	d103      	bne.n	80013e4 <HAL_TIM_PeriodElapsedCallback+0xf0>
							   {
								   motor1.setPoint = 60;
 80013dc:	4b38      	ldr	r3, [pc, #224]	; (80014c0 <HAL_TIM_PeriodElapsedCallback+0x1cc>)
 80013de:	4a48      	ldr	r2, [pc, #288]	; (8001500 <HAL_TIM_PeriodElapsedCallback+0x20c>)
 80013e0:	619a      	str	r2, [r3, #24]
 80013e2:	e00f      	b.n	8001404 <HAL_TIM_PeriodElapsedCallback+0x110>
							   }

							   else if(c == 85)
 80013e4:	4b45      	ldr	r3, [pc, #276]	; (80014fc <HAL_TIM_PeriodElapsedCallback+0x208>)
 80013e6:	881b      	ldrh	r3, [r3, #0]
 80013e8:	2b55      	cmp	r3, #85	; 0x55
 80013ea:	d104      	bne.n	80013f6 <HAL_TIM_PeriodElapsedCallback+0x102>
							   {
								   motor1.setPoint = 0;
 80013ec:	4b34      	ldr	r3, [pc, #208]	; (80014c0 <HAL_TIM_PeriodElapsedCallback+0x1cc>)
 80013ee:	f04f 0200 	mov.w	r2, #0
 80013f2:	619a      	str	r2, [r3, #24]
 80013f4:	e006      	b.n	8001404 <HAL_TIM_PeriodElapsedCallback+0x110>
							   }
							   else if(c==170)
 80013f6:	4b41      	ldr	r3, [pc, #260]	; (80014fc <HAL_TIM_PeriodElapsedCallback+0x208>)
 80013f8:	881b      	ldrh	r3, [r3, #0]
 80013fa:	2baa      	cmp	r3, #170	; 0xaa
 80013fc:	d102      	bne.n	8001404 <HAL_TIM_PeriodElapsedCallback+0x110>
							   {
								   c=0;
 80013fe:	4b3f      	ldr	r3, [pc, #252]	; (80014fc <HAL_TIM_PeriodElapsedCallback+0x208>)
 8001400:	2200      	movs	r2, #0
 8001402:	801a      	strh	r2, [r3, #0]
							   }

							   if(k == 0){
 8001404:	4b2c      	ldr	r3, [pc, #176]	; (80014b8 <HAL_TIM_PeriodElapsedCallback+0x1c4>)
 8001406:	881b      	ldrh	r3, [r3, #0]
 8001408:	2b00      	cmp	r3, #0
 800140a:	d109      	bne.n	8001420 <HAL_TIM_PeriodElapsedCallback+0x12c>
								   velocitySetpoint =  MotorTuningPosition(&pid1, &motor1, motor1.setPoint);
 800140c:	4b2c      	ldr	r3, [pc, #176]	; (80014c0 <HAL_TIM_PeriodElapsedCallback+0x1cc>)
 800140e:	699b      	ldr	r3, [r3, #24]
 8001410:	461a      	mov	r2, r3
 8001412:	492b      	ldr	r1, [pc, #172]	; (80014c0 <HAL_TIM_PeriodElapsedCallback+0x1cc>)
 8001414:	482d      	ldr	r0, [pc, #180]	; (80014cc <HAL_TIM_PeriodElapsedCallback+0x1d8>)
 8001416:	f000 f9f9 	bl	800180c <MotorTuningPosition>
 800141a:	4603      	mov	r3, r0
 800141c:	4a39      	ldr	r2, [pc, #228]	; (8001504 <HAL_TIM_PeriodElapsedCallback+0x210>)
 800141e:	6013      	str	r3, [r2, #0]
							   }
							   MotorSetDuty1( MotorTuningVelocity(&pid3, &motor1, velocitySetpoint) );
 8001420:	4b38      	ldr	r3, [pc, #224]	; (8001504 <HAL_TIM_PeriodElapsedCallback+0x210>)
 8001422:	681b      	ldr	r3, [r3, #0]
 8001424:	461a      	mov	r2, r3
 8001426:	4926      	ldr	r1, [pc, #152]	; (80014c0 <HAL_TIM_PeriodElapsedCallback+0x1cc>)
 8001428:	4837      	ldr	r0, [pc, #220]	; (8001508 <HAL_TIM_PeriodElapsedCallback+0x214>)
 800142a:	f000 f9d5 	bl	80017d8 <MotorTuningVelocity>
 800142e:	4603      	mov	r3, r0
 8001430:	4618      	mov	r0, r3
 8001432:	f7ff fda7 	bl	8000f84 <__aeabi_f2iz>
 8001436:	4603      	mov	r3, r0
 8001438:	4618      	mov	r0, r3
 800143a:	f000 f88f 	bl	800155c <MotorSetDuty1>

							   k++;
 800143e:	4b1e      	ldr	r3, [pc, #120]	; (80014b8 <HAL_TIM_PeriodElapsedCallback+0x1c4>)
 8001440:	881b      	ldrh	r3, [r3, #0]
 8001442:	3301      	adds	r3, #1
 8001444:	b29a      	uxth	r2, r3
 8001446:	4b1c      	ldr	r3, [pc, #112]	; (80014b8 <HAL_TIM_PeriodElapsedCallback+0x1c4>)
 8001448:	801a      	strh	r2, [r3, #0]
							   if(k == 3){
 800144a:	4b1b      	ldr	r3, [pc, #108]	; (80014b8 <HAL_TIM_PeriodElapsedCallback+0x1c4>)
 800144c:	881b      	ldrh	r3, [r3, #0]
 800144e:	2b03      	cmp	r3, #3
 8001450:	d102      	bne.n	8001458 <HAL_TIM_PeriodElapsedCallback+0x164>
								   k = 0;
 8001452:	4b19      	ldr	r3, [pc, #100]	; (80014b8 <HAL_TIM_PeriodElapsedCallback+0x1c4>)
 8001454:	2200      	movs	r2, #0
 8001456:	801a      	strh	r2, [r3, #0]
							   }

							   c++;
 8001458:	4b28      	ldr	r3, [pc, #160]	; (80014fc <HAL_TIM_PeriodElapsedCallback+0x208>)
 800145a:	881b      	ldrh	r3, [r3, #0]
 800145c:	3301      	adds	r3, #1
 800145e:	b29a      	uxth	r2, r3
 8001460:	4b26      	ldr	r3, [pc, #152]	; (80014fc <HAL_TIM_PeriodElapsedCallback+0x208>)
 8001462:	801a      	strh	r2, [r3, #0]

		  	 	  	       //cast data
							   g_vel2= (uint8_t*)(&motor2.velocity);
 8001464:	4b1b      	ldr	r3, [pc, #108]	; (80014d4 <HAL_TIM_PeriodElapsedCallback+0x1e0>)
 8001466:	4a1c      	ldr	r2, [pc, #112]	; (80014d8 <HAL_TIM_PeriodElapsedCallback+0x1e4>)
 8001468:	601a      	str	r2, [r3, #0]
							   g_vel1 = (uint8_t*)(&motor1.velocity);
 800146a:	4b1c      	ldr	r3, [pc, #112]	; (80014dc <HAL_TIM_PeriodElapsedCallback+0x1e8>)
 800146c:	4a1c      	ldr	r2, [pc, #112]	; (80014e0 <HAL_TIM_PeriodElapsedCallback+0x1ec>)
 800146e:	601a      	str	r2, [r3, #0]
							   g_pos = (uint8_t*)(&motor1.position);
 8001470:	4b1c      	ldr	r3, [pc, #112]	; (80014e4 <HAL_TIM_PeriodElapsedCallback+0x1f0>)
 8001472:	4a1d      	ldr	r2, [pc, #116]	; (80014e8 <HAL_TIM_PeriodElapsedCallback+0x1f4>)
 8001474:	601a      	str	r2, [r3, #0]


							   memcpy(g_nTxData, g_vel2, 4);
 8001476:	4b17      	ldr	r3, [pc, #92]	; (80014d4 <HAL_TIM_PeriodElapsedCallback+0x1e0>)
 8001478:	681b      	ldr	r3, [r3, #0]
 800147a:	681b      	ldr	r3, [r3, #0]
 800147c:	461a      	mov	r2, r3
 800147e:	4b1b      	ldr	r3, [pc, #108]	; (80014ec <HAL_TIM_PeriodElapsedCallback+0x1f8>)
 8001480:	601a      	str	r2, [r3, #0]
							   memcpy(g_nTxData+4, g_vel1, 4);
 8001482:	4a1b      	ldr	r2, [pc, #108]	; (80014f0 <HAL_TIM_PeriodElapsedCallback+0x1fc>)
 8001484:	4b15      	ldr	r3, [pc, #84]	; (80014dc <HAL_TIM_PeriodElapsedCallback+0x1e8>)
 8001486:	681b      	ldr	r3, [r3, #0]
 8001488:	681b      	ldr	r3, [r3, #0]
 800148a:	6013      	str	r3, [r2, #0]
							   memcpy(g_nTxData+8, g_pos, 4);
 800148c:	4a19      	ldr	r2, [pc, #100]	; (80014f4 <HAL_TIM_PeriodElapsedCallback+0x200>)
 800148e:	4b15      	ldr	r3, [pc, #84]	; (80014e4 <HAL_TIM_PeriodElapsedCallback+0x1f0>)
 8001490:	681b      	ldr	r3, [r3, #0]
 8001492:	681b      	ldr	r3, [r3, #0]
 8001494:	6013      	str	r3, [r2, #0]

							//send data
							   SerialWriteComm(g_strCommand, g_nTxData);
 8001496:	4915      	ldr	r1, [pc, #84]	; (80014ec <HAL_TIM_PeriodElapsedCallback+0x1f8>)
 8001498:	4817      	ldr	r0, [pc, #92]	; (80014f8 <HAL_TIM_PeriodElapsedCallback+0x204>)
 800149a:	f000 fad5 	bl	8001a48 <SerialWriteComm>
		  	 	  	       	   break;
 800149e:	e002      	b.n	80014a6 <HAL_TIM_PeriodElapsedCallback+0x1b2>
		  	 	  	        case STOP:
		  	 	  	        	break;
		  	 	  	      }
	  }
 80014a0:	bf00      	nop
 80014a2:	e000      	b.n	80014a6 <HAL_TIM_PeriodElapsedCallback+0x1b2>
		  	 	  	          break;
 80014a4:	bf00      	nop
	  }
 80014a6:	bf00      	nop
 80014a8:	3708      	adds	r7, #8
 80014aa:	46bd      	mov	sp, r7
 80014ac:	bd80      	pop	{r7, pc}
 80014ae:	bf00      	nop
 80014b0:	20000214 	.word	0x20000214
 80014b4:	20000114 	.word	0x20000114
 80014b8:	20000134 	.word	0x20000134
 80014bc:	2000025c 	.word	0x2000025c
 80014c0:	20000094 	.word	0x20000094
 80014c4:	20000184 	.word	0x20000184
 80014c8:	200000b0 	.word	0x200000b0
 80014cc:	200000cc 	.word	0x200000cc
 80014d0:	200000e4 	.word	0x200000e4
 80014d4:	20000130 	.word	0x20000130
 80014d8:	200000c0 	.word	0x200000c0
 80014dc:	20000128 	.word	0x20000128
 80014e0:	200000a4 	.word	0x200000a4
 80014e4:	2000012c 	.word	0x2000012c
 80014e8:	200000a8 	.word	0x200000a8
 80014ec:	20000118 	.word	0x20000118
 80014f0:	2000011c 	.word	0x2000011c
 80014f4:	20000120 	.word	0x20000120
 80014f8:	20000154 	.word	0x20000154
 80014fc:	20000136 	.word	0x20000136
 8001500:	42700000 	.word	0x42700000
 8001504:	20000138 	.word	0x20000138
 8001508:	200000fc 	.word	0x200000fc

0800150c <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 800150c:	b480      	push	{r7}
 800150e:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8001510:	b672      	cpsid	i
}
 8001512:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8001514:	e7fe      	b.n	8001514 <Error_Handler+0x8>

08001516 <MotorReset>:

#define PPR 6600.;
#define RTD 360/6600;

void MotorReset(Motor_t *tmotor)
{
 8001516:	b480      	push	{r7}
 8001518:	b083      	sub	sp, #12
 800151a:	af00      	add	r7, sp, #0
 800151c:	6078      	str	r0, [r7, #4]
	tmotor->counter = 0;
 800151e:	687b      	ldr	r3, [r7, #4]
 8001520:	2200      	movs	r2, #0
 8001522:	801a      	strh	r2, [r3, #0]


	tmotor->o_vel = 0;
 8001524:	687b      	ldr	r3, [r7, #4]
 8001526:	f04f 0200 	mov.w	r2, #0
 800152a:	609a      	str	r2, [r3, #8]
	tmotor->o_vel2 = 0;
 800152c:	687b      	ldr	r3, [r7, #4]
 800152e:	f04f 0200 	mov.w	r2, #0
 8001532:	60da      	str	r2, [r3, #12]
	tmotor->vel = 0;
 8001534:	687b      	ldr	r3, [r7, #4]
 8001536:	f04f 0200 	mov.w	r2, #0
 800153a:	605a      	str	r2, [r3, #4]
	tmotor->velocity = 0;
 800153c:	687b      	ldr	r3, [r7, #4]
 800153e:	f04f 0200 	mov.w	r2, #0
 8001542:	611a      	str	r2, [r3, #16]

	tmotor->rounds = 0;
 8001544:	687b      	ldr	r3, [r7, #4]
 8001546:	2200      	movs	r2, #0
 8001548:	805a      	strh	r2, [r3, #2]
	tmotor->position = 0;
 800154a:	687b      	ldr	r3, [r7, #4]
 800154c:	f04f 0200 	mov.w	r2, #0
 8001550:	615a      	str	r2, [r3, #20]
}
 8001552:	bf00      	nop
 8001554:	370c      	adds	r7, #12
 8001556:	46bd      	mov	sp, r7
 8001558:	bc80      	pop	{r7}
 800155a:	4770      	bx	lr

0800155c <MotorSetDuty1>:

//duty cycle of motor
void MotorSetDuty1(int nDuty)
{
 800155c:	b480      	push	{r7}
 800155e:	b083      	sub	sp, #12
 8001560:	af00      	add	r7, sp, #0
 8001562:	6078      	str	r0, [r7, #4]
	if(nDuty == 0){
 8001564:	687b      	ldr	r3, [r7, #4]
 8001566:	2b00      	cmp	r3, #0
 8001568:	d108      	bne.n	800157c <MotorSetDuty1+0x20>
		htim2.Instance->CCR1 = 0;
 800156a:	4b14      	ldr	r3, [pc, #80]	; (80015bc <MotorSetDuty1+0x60>)
 800156c:	681b      	ldr	r3, [r3, #0]
 800156e:	2200      	movs	r2, #0
 8001570:	635a      	str	r2, [r3, #52]	; 0x34
		htim2.Instance->CCR2 = 0;
 8001572:	4b12      	ldr	r3, [pc, #72]	; (80015bc <MotorSetDuty1+0x60>)
 8001574:	681b      	ldr	r3, [r3, #0]
 8001576:	2200      	movs	r2, #0
 8001578:	639a      	str	r2, [r3, #56]	; 0x38
	else if(nDuty < 0){
		htim2.Instance->CCR1 = 0;
		htim2.Instance->CCR2 = abs(nDuty);
	}

}
 800157a:	e01a      	b.n	80015b2 <MotorSetDuty1+0x56>
	else if(nDuty > 0){
 800157c:	687b      	ldr	r3, [r7, #4]
 800157e:	2b00      	cmp	r3, #0
 8001580:	dd08      	ble.n	8001594 <MotorSetDuty1+0x38>
		htim2.Instance->CCR1 = nDuty;
 8001582:	4b0e      	ldr	r3, [pc, #56]	; (80015bc <MotorSetDuty1+0x60>)
 8001584:	681b      	ldr	r3, [r3, #0]
 8001586:	687a      	ldr	r2, [r7, #4]
 8001588:	635a      	str	r2, [r3, #52]	; 0x34
		htim2.Instance->CCR2 = 0;
 800158a:	4b0c      	ldr	r3, [pc, #48]	; (80015bc <MotorSetDuty1+0x60>)
 800158c:	681b      	ldr	r3, [r3, #0]
 800158e:	2200      	movs	r2, #0
 8001590:	639a      	str	r2, [r3, #56]	; 0x38
}
 8001592:	e00e      	b.n	80015b2 <MotorSetDuty1+0x56>
	else if(nDuty < 0){
 8001594:	687b      	ldr	r3, [r7, #4]
 8001596:	2b00      	cmp	r3, #0
 8001598:	da0b      	bge.n	80015b2 <MotorSetDuty1+0x56>
		htim2.Instance->CCR1 = 0;
 800159a:	4b08      	ldr	r3, [pc, #32]	; (80015bc <MotorSetDuty1+0x60>)
 800159c:	681b      	ldr	r3, [r3, #0]
 800159e:	2200      	movs	r2, #0
 80015a0:	635a      	str	r2, [r3, #52]	; 0x34
		htim2.Instance->CCR2 = abs(nDuty);
 80015a2:	687b      	ldr	r3, [r7, #4]
 80015a4:	ea83 72e3 	eor.w	r2, r3, r3, asr #31
 80015a8:	eba2 72e3 	sub.w	r2, r2, r3, asr #31
 80015ac:	4b03      	ldr	r3, [pc, #12]	; (80015bc <MotorSetDuty1+0x60>)
 80015ae:	681b      	ldr	r3, [r3, #0]
 80015b0:	639a      	str	r2, [r3, #56]	; 0x38
}
 80015b2:	bf00      	nop
 80015b4:	370c      	adds	r7, #12
 80015b6:	46bd      	mov	sp, r7
 80015b8:	bc80      	pop	{r7}
 80015ba:	4770      	bx	lr
 80015bc:	200001cc 	.word	0x200001cc

080015c0 <MotorSetDuty2>:

void MotorSetDuty2(int nDuty)
{
 80015c0:	b480      	push	{r7}
 80015c2:	b083      	sub	sp, #12
 80015c4:	af00      	add	r7, sp, #0
 80015c6:	6078      	str	r0, [r7, #4]
	if(nDuty == 0){
 80015c8:	687b      	ldr	r3, [r7, #4]
 80015ca:	2b00      	cmp	r3, #0
 80015cc:	d108      	bne.n	80015e0 <MotorSetDuty2+0x20>
		htim2.Instance->CCR3 = 0;
 80015ce:	4b14      	ldr	r3, [pc, #80]	; (8001620 <MotorSetDuty2+0x60>)
 80015d0:	681b      	ldr	r3, [r3, #0]
 80015d2:	2200      	movs	r2, #0
 80015d4:	63da      	str	r2, [r3, #60]	; 0x3c
		htim2.Instance->CCR4 = 0;
 80015d6:	4b12      	ldr	r3, [pc, #72]	; (8001620 <MotorSetDuty2+0x60>)
 80015d8:	681b      	ldr	r3, [r3, #0]
 80015da:	2200      	movs	r2, #0
 80015dc:	641a      	str	r2, [r3, #64]	; 0x40
	else if(nDuty<0){
		htim2.Instance->CCR3 = 0;
		htim2.Instance->CCR4 = abs(nDuty);
	}

}
 80015de:	e01a      	b.n	8001616 <MotorSetDuty2+0x56>
	else if(nDuty>0){
 80015e0:	687b      	ldr	r3, [r7, #4]
 80015e2:	2b00      	cmp	r3, #0
 80015e4:	dd08      	ble.n	80015f8 <MotorSetDuty2+0x38>
		htim2.Instance->CCR3 = nDuty;
 80015e6:	4b0e      	ldr	r3, [pc, #56]	; (8001620 <MotorSetDuty2+0x60>)
 80015e8:	681b      	ldr	r3, [r3, #0]
 80015ea:	687a      	ldr	r2, [r7, #4]
 80015ec:	63da      	str	r2, [r3, #60]	; 0x3c
		htim2.Instance->CCR4 = 0;
 80015ee:	4b0c      	ldr	r3, [pc, #48]	; (8001620 <MotorSetDuty2+0x60>)
 80015f0:	681b      	ldr	r3, [r3, #0]
 80015f2:	2200      	movs	r2, #0
 80015f4:	641a      	str	r2, [r3, #64]	; 0x40
}
 80015f6:	e00e      	b.n	8001616 <MotorSetDuty2+0x56>
	else if(nDuty<0){
 80015f8:	687b      	ldr	r3, [r7, #4]
 80015fa:	2b00      	cmp	r3, #0
 80015fc:	da0b      	bge.n	8001616 <MotorSetDuty2+0x56>
		htim2.Instance->CCR3 = 0;
 80015fe:	4b08      	ldr	r3, [pc, #32]	; (8001620 <MotorSetDuty2+0x60>)
 8001600:	681b      	ldr	r3, [r3, #0]
 8001602:	2200      	movs	r2, #0
 8001604:	63da      	str	r2, [r3, #60]	; 0x3c
		htim2.Instance->CCR4 = abs(nDuty);
 8001606:	687b      	ldr	r3, [r7, #4]
 8001608:	ea83 72e3 	eor.w	r2, r3, r3, asr #31
 800160c:	eba2 72e3 	sub.w	r2, r2, r3, asr #31
 8001610:	4b03      	ldr	r3, [pc, #12]	; (8001620 <MotorSetDuty2+0x60>)
 8001612:	681b      	ldr	r3, [r3, #0]
 8001614:	641a      	str	r2, [r3, #64]	; 0x40
}
 8001616:	bf00      	nop
 8001618:	370c      	adds	r7, #12
 800161a:	46bd      	mov	sp, r7
 800161c:	bc80      	pop	{r7}
 800161e:	4770      	bx	lr
 8001620:	200001cc 	.word	0x200001cc
 8001624:	00000000 	.word	0x00000000

08001628 <ReadEncoder>:

// sample 10ms
void ReadEncoder(Motor_t * tmotor, TIM_HandleTypeDef *htim){
 8001628:	b5b0      	push	{r4, r5, r7, lr}
 800162a:	b084      	sub	sp, #16
 800162c:	af00      	add	r7, sp, #0
 800162e:	6078      	str	r0, [r7, #4]
 8001630:	6039      	str	r1, [r7, #0]
			tmotor->counter = htim->Instance->CNT;
 8001632:	683b      	ldr	r3, [r7, #0]
 8001634:	681b      	ldr	r3, [r3, #0]
 8001636:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001638:	b29a      	uxth	r2, r3
 800163a:	687b      	ldr	r3, [r7, #4]
 800163c:	801a      	strh	r2, [r3, #0]

			tmotor->rounds += tmotor->counter/PPR;
 800163e:	687b      	ldr	r3, [r7, #4]
 8001640:	885b      	ldrh	r3, [r3, #2]
 8001642:	4618      	mov	r0, r3
 8001644:	f7fe fede 	bl	8000404 <__aeabi_i2d>
 8001648:	4604      	mov	r4, r0
 800164a:	460d      	mov	r5, r1
 800164c:	687b      	ldr	r3, [r7, #4]
 800164e:	881b      	ldrh	r3, [r3, #0]
 8001650:	4618      	mov	r0, r3
 8001652:	f7fe fed7 	bl	8000404 <__aeabi_i2d>
 8001656:	a354      	add	r3, pc, #336	; (adr r3, 80017a8 <ReadEncoder+0x180>)
 8001658:	e9d3 2300 	ldrd	r2, r3, [r3]
 800165c:	f7ff f866 	bl	800072c <__aeabi_ddiv>
 8001660:	4602      	mov	r2, r0
 8001662:	460b      	mov	r3, r1
 8001664:	4620      	mov	r0, r4
 8001666:	4629      	mov	r1, r5
 8001668:	f7fe fd80 	bl	800016c <__adddf3>
 800166c:	4602      	mov	r2, r0
 800166e:	460b      	mov	r3, r1
 8001670:	4610      	mov	r0, r2
 8001672:	4619      	mov	r1, r3
 8001674:	f7ff f942 	bl	80008fc <__aeabi_d2uiz>
 8001678:	4603      	mov	r3, r0
 800167a:	b29a      	uxth	r2, r3
 800167c:	687b      	ldr	r3, [r7, #4]
 800167e:	805a      	strh	r2, [r3, #2]


			int16_t temp_data = tmotor->counter;
 8001680:	687b      	ldr	r3, [r7, #4]
 8001682:	881b      	ldrh	r3, [r3, #0]
 8001684:	81fb      	strh	r3, [r7, #14]


			tmotor->vel = (float)temp_data *100. *60. / PPR ; // RPM
 8001686:	f9b7 300e 	ldrsh.w	r3, [r7, #14]
 800168a:	4618      	mov	r0, r3
 800168c:	f7ff fa60 	bl	8000b50 <__aeabi_i2f>
 8001690:	4603      	mov	r3, r0
 8001692:	4618      	mov	r0, r3
 8001694:	f7fe fec8 	bl	8000428 <__aeabi_f2d>
 8001698:	f04f 0200 	mov.w	r2, #0
 800169c:	4b4a      	ldr	r3, [pc, #296]	; (80017c8 <ReadEncoder+0x1a0>)
 800169e:	f7fe ff1b 	bl	80004d8 <__aeabi_dmul>
 80016a2:	4602      	mov	r2, r0
 80016a4:	460b      	mov	r3, r1
 80016a6:	4610      	mov	r0, r2
 80016a8:	4619      	mov	r1, r3
 80016aa:	f04f 0200 	mov.w	r2, #0
 80016ae:	4b47      	ldr	r3, [pc, #284]	; (80017cc <ReadEncoder+0x1a4>)
 80016b0:	f7fe ff12 	bl	80004d8 <__aeabi_dmul>
 80016b4:	4602      	mov	r2, r0
 80016b6:	460b      	mov	r3, r1
 80016b8:	4610      	mov	r0, r2
 80016ba:	4619      	mov	r1, r3
 80016bc:	a33a      	add	r3, pc, #232	; (adr r3, 80017a8 <ReadEncoder+0x180>)
 80016be:	e9d3 2300 	ldrd	r2, r3, [r3]
 80016c2:	f7ff f833 	bl	800072c <__aeabi_ddiv>
 80016c6:	4602      	mov	r2, r0
 80016c8:	460b      	mov	r3, r1
 80016ca:	4610      	mov	r0, r2
 80016cc:	4619      	mov	r1, r3
 80016ce:	f7ff f935 	bl	800093c <__aeabi_d2f>
 80016d2:	4602      	mov	r2, r0
 80016d4:	687b      	ldr	r3, [r7, #4]
 80016d6:	605a      	str	r2, [r3, #4]


			tmotor->position += (float)temp_data * RTD; //deg
 80016d8:	687b      	ldr	r3, [r7, #4]
 80016da:	695c      	ldr	r4, [r3, #20]
 80016dc:	f9b7 300e 	ldrsh.w	r3, [r7, #14]
 80016e0:	4618      	mov	r0, r3
 80016e2:	f7ff fa35 	bl	8000b50 <__aeabi_i2f>
 80016e6:	4603      	mov	r3, r0
 80016e8:	4939      	ldr	r1, [pc, #228]	; (80017d0 <ReadEncoder+0x1a8>)
 80016ea:	4618      	mov	r0, r3
 80016ec:	f7ff fa84 	bl	8000bf8 <__aeabi_fmul>
 80016f0:	4603      	mov	r3, r0
 80016f2:	4938      	ldr	r1, [pc, #224]	; (80017d4 <ReadEncoder+0x1ac>)
 80016f4:	4618      	mov	r0, r3
 80016f6:	f7ff fb33 	bl	8000d60 <__aeabi_fdiv>
 80016fa:	4603      	mov	r3, r0
 80016fc:	4619      	mov	r1, r3
 80016fe:	4620      	mov	r0, r4
 8001700:	f7ff f972 	bl	80009e8 <__addsf3>
 8001704:	4603      	mov	r3, r0
 8001706:	461a      	mov	r2, r3
 8001708:	687b      	ldr	r3, [r7, #4]
 800170a:	615a      	str	r2, [r3, #20]

			//LPF

			tmotor->velocity = 0.7*tmotor->vel + 0.2*tmotor->o_vel + 0.1*tmotor->o_vel2;
 800170c:	687b      	ldr	r3, [r7, #4]
 800170e:	685b      	ldr	r3, [r3, #4]
 8001710:	4618      	mov	r0, r3
 8001712:	f7fe fe89 	bl	8000428 <__aeabi_f2d>
 8001716:	a326      	add	r3, pc, #152	; (adr r3, 80017b0 <ReadEncoder+0x188>)
 8001718:	e9d3 2300 	ldrd	r2, r3, [r3]
 800171c:	f7fe fedc 	bl	80004d8 <__aeabi_dmul>
 8001720:	4602      	mov	r2, r0
 8001722:	460b      	mov	r3, r1
 8001724:	4614      	mov	r4, r2
 8001726:	461d      	mov	r5, r3
 8001728:	687b      	ldr	r3, [r7, #4]
 800172a:	689b      	ldr	r3, [r3, #8]
 800172c:	4618      	mov	r0, r3
 800172e:	f7fe fe7b 	bl	8000428 <__aeabi_f2d>
 8001732:	a321      	add	r3, pc, #132	; (adr r3, 80017b8 <ReadEncoder+0x190>)
 8001734:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001738:	f7fe fece 	bl	80004d8 <__aeabi_dmul>
 800173c:	4602      	mov	r2, r0
 800173e:	460b      	mov	r3, r1
 8001740:	4620      	mov	r0, r4
 8001742:	4629      	mov	r1, r5
 8001744:	f7fe fd12 	bl	800016c <__adddf3>
 8001748:	4602      	mov	r2, r0
 800174a:	460b      	mov	r3, r1
 800174c:	4614      	mov	r4, r2
 800174e:	461d      	mov	r5, r3
 8001750:	687b      	ldr	r3, [r7, #4]
 8001752:	68db      	ldr	r3, [r3, #12]
 8001754:	4618      	mov	r0, r3
 8001756:	f7fe fe67 	bl	8000428 <__aeabi_f2d>
 800175a:	a319      	add	r3, pc, #100	; (adr r3, 80017c0 <ReadEncoder+0x198>)
 800175c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001760:	f7fe feba 	bl	80004d8 <__aeabi_dmul>
 8001764:	4602      	mov	r2, r0
 8001766:	460b      	mov	r3, r1
 8001768:	4620      	mov	r0, r4
 800176a:	4629      	mov	r1, r5
 800176c:	f7fe fcfe 	bl	800016c <__adddf3>
 8001770:	4602      	mov	r2, r0
 8001772:	460b      	mov	r3, r1
 8001774:	4610      	mov	r0, r2
 8001776:	4619      	mov	r1, r3
 8001778:	f7ff f8e0 	bl	800093c <__aeabi_d2f>
 800177c:	4602      	mov	r2, r0
 800177e:	687b      	ldr	r3, [r7, #4]
 8001780:	611a      	str	r2, [r3, #16]

			tmotor->o_vel = tmotor->vel;
 8001782:	687b      	ldr	r3, [r7, #4]
 8001784:	685a      	ldr	r2, [r3, #4]
 8001786:	687b      	ldr	r3, [r7, #4]
 8001788:	609a      	str	r2, [r3, #8]
			tmotor->o_vel2 = tmotor->o_vel;
 800178a:	687b      	ldr	r3, [r7, #4]
 800178c:	689a      	ldr	r2, [r3, #8]
 800178e:	687b      	ldr	r3, [r7, #4]
 8001790:	60da      	str	r2, [r3, #12]

			htim->Instance->CNT = 0;
 8001792:	683b      	ldr	r3, [r7, #0]
 8001794:	681b      	ldr	r3, [r3, #0]
 8001796:	2200      	movs	r2, #0
 8001798:	625a      	str	r2, [r3, #36]	; 0x24
}
 800179a:	bf00      	nop
 800179c:	3710      	adds	r7, #16
 800179e:	46bd      	mov	sp, r7
 80017a0:	bdb0      	pop	{r4, r5, r7, pc}
 80017a2:	bf00      	nop
 80017a4:	f3af 8000 	nop.w
 80017a8:	00000000 	.word	0x00000000
 80017ac:	40b9c800 	.word	0x40b9c800
 80017b0:	66666666 	.word	0x66666666
 80017b4:	3fe66666 	.word	0x3fe66666
 80017b8:	9999999a 	.word	0x9999999a
 80017bc:	3fc99999 	.word	0x3fc99999
 80017c0:	9999999a 	.word	0x9999999a
 80017c4:	3fb99999 	.word	0x3fb99999
 80017c8:	40590000 	.word	0x40590000
 80017cc:	404e0000 	.word	0x404e0000
 80017d0:	43b40000 	.word	0x43b40000
 80017d4:	45ce4000 	.word	0x45ce4000

080017d8 <MotorTuningVelocity>:

//Turning
float MotorTuningVelocity(PID_CONTROL_t * PIDControl,Motor_t * tmotor,float velocity)
{
 80017d8:	b580      	push	{r7, lr}
 80017da:	b088      	sub	sp, #32
 80017dc:	af00      	add	r7, sp, #0
 80017de:	60f8      	str	r0, [r7, #12]
 80017e0:	60b9      	str	r1, [r7, #8]
 80017e2:	607a      	str	r2, [r7, #4]
    float SetPoint = velocity;
 80017e4:	687b      	ldr	r3, [r7, #4]
 80017e6:	61fb      	str	r3, [r7, #28]
    float Input = tmotor->velocity;
 80017e8:	68bb      	ldr	r3, [r7, #8]
 80017ea:	691b      	ldr	r3, [r3, #16]
 80017ec:	61bb      	str	r3, [r7, #24]
    float g_nDutyCycle = PIDCompute(PIDControl, SetPoint,Input, 0.01f);
 80017ee:	4b06      	ldr	r3, [pc, #24]	; (8001808 <MotorTuningVelocity+0x30>)
 80017f0:	69ba      	ldr	r2, [r7, #24]
 80017f2:	69f9      	ldr	r1, [r7, #28]
 80017f4:	68f8      	ldr	r0, [r7, #12]
 80017f6:	f000 f839 	bl	800186c <PIDCompute>
 80017fa:	6178      	str	r0, [r7, #20]
    return g_nDutyCycle;
 80017fc:	697b      	ldr	r3, [r7, #20]
}
 80017fe:	4618      	mov	r0, r3
 8001800:	3720      	adds	r7, #32
 8001802:	46bd      	mov	sp, r7
 8001804:	bd80      	pop	{r7, pc}
 8001806:	bf00      	nop
 8001808:	3c23d70a 	.word	0x3c23d70a

0800180c <MotorTuningPosition>:
float MotorTuningPosition(PID_CONTROL_t *PIDControl, Motor_t * tmotor, float position)
{
 800180c:	b580      	push	{r7, lr}
 800180e:	b088      	sub	sp, #32
 8001810:	af00      	add	r7, sp, #0
 8001812:	60f8      	str	r0, [r7, #12]
 8001814:	60b9      	str	r1, [r7, #8]
 8001816:	607a      	str	r2, [r7, #4]
    float SetPoint = position;
 8001818:	687b      	ldr	r3, [r7, #4]
 800181a:	61fb      	str	r3, [r7, #28]
    float Input=tmotor->position;
 800181c:	68bb      	ldr	r3, [r7, #8]
 800181e:	695b      	ldr	r3, [r3, #20]
 8001820:	61bb      	str	r3, [r7, #24]
    float g_nDutyCycle = PIDCompute(PIDControl, SetPoint,Input, 0.03f);
 8001822:	4b06      	ldr	r3, [pc, #24]	; (800183c <MotorTuningPosition+0x30>)
 8001824:	69ba      	ldr	r2, [r7, #24]
 8001826:	69f9      	ldr	r1, [r7, #28]
 8001828:	68f8      	ldr	r0, [r7, #12]
 800182a:	f000 f81f 	bl	800186c <PIDCompute>
 800182e:	6178      	str	r0, [r7, #20]
    return g_nDutyCycle;
 8001830:	697b      	ldr	r3, [r7, #20]
}
 8001832:	4618      	mov	r0, r3
 8001834:	3720      	adds	r7, #32
 8001836:	46bd      	mov	sp, r7
 8001838:	bd80      	pop	{r7, pc}
 800183a:	bf00      	nop
 800183c:	3cf5c28f 	.word	0x3cf5c28f

08001840 <PIDReset>:



//reset PID params
void PIDReset(PID_CONTROL_t *PID_Ctrl)
{
 8001840:	b480      	push	{r7}
 8001842:	b083      	sub	sp, #12
 8001844:	af00      	add	r7, sp, #0
 8001846:	6078      	str	r0, [r7, #4]
    PID_Ctrl->dIntergral = 0.0f;
 8001848:	687b      	ldr	r3, [r7, #4]
 800184a:	f04f 0200 	mov.w	r2, #0
 800184e:	611a      	str	r2, [r3, #16]
    PID_Ctrl->dErrorTerm = 0.0f;
 8001850:	687b      	ldr	r3, [r7, #4]
 8001852:	f04f 0200 	mov.w	r2, #0
 8001856:	60da      	str	r2, [r3, #12]
    PID_Ctrl->result = 0.0f;
 8001858:	687b      	ldr	r3, [r7, #4]
 800185a:	f04f 0200 	mov.w	r2, #0
 800185e:	615a      	str	r2, [r3, #20]
}
 8001860:	bf00      	nop
 8001862:	370c      	adds	r7, #12
 8001864:	46bd      	mov	sp, r7
 8001866:	bc80      	pop	{r7}
 8001868:	4770      	bx	lr
	...

0800186c <PIDCompute>:

}

//Compute PID Controllers
float PIDCompute(PID_CONTROL_t *PID_Ctrl, float SetPoint, float Input, float dTs)
{
 800186c:	b590      	push	{r4, r7, lr}
 800186e:	b089      	sub	sp, #36	; 0x24
 8001870:	af00      	add	r7, sp, #0
 8001872:	60f8      	str	r0, [r7, #12]
 8001874:	60b9      	str	r1, [r7, #8]
 8001876:	607a      	str	r2, [r7, #4]
 8001878:	603b      	str	r3, [r7, #0]

    float  Error = SetPoint - Input;
 800187a:	6879      	ldr	r1, [r7, #4]
 800187c:	68b8      	ldr	r0, [r7, #8]
 800187e:	f7ff f8b1 	bl	80009e4 <__aeabi_fsub>
 8001882:	4603      	mov	r3, r0
 8001884:	61fb      	str	r3, [r7, #28]
    float dP = 0, dI = 0, dD = 0;
 8001886:	f04f 0300 	mov.w	r3, #0
 800188a:	61bb      	str	r3, [r7, #24]
 800188c:	f04f 0300 	mov.w	r3, #0
 8001890:	617b      	str	r3, [r7, #20]
 8001892:	f04f 0300 	mov.w	r3, #0
 8001896:	613b      	str	r3, [r7, #16]
    dP = PID_Ctrl -> dKp *Error;
 8001898:	68fb      	ldr	r3, [r7, #12]
 800189a:	681b      	ldr	r3, [r3, #0]
 800189c:	4619      	mov	r1, r3
 800189e:	69f8      	ldr	r0, [r7, #28]
 80018a0:	f7ff f9aa 	bl	8000bf8 <__aeabi_fmul>
 80018a4:	4603      	mov	r3, r0
 80018a6:	61bb      	str	r3, [r7, #24]
    PID_Ctrl -> dIntergral += Error;
 80018a8:	68fb      	ldr	r3, [r7, #12]
 80018aa:	691b      	ldr	r3, [r3, #16]
 80018ac:	69f9      	ldr	r1, [r7, #28]
 80018ae:	4618      	mov	r0, r3
 80018b0:	f7ff f89a 	bl	80009e8 <__addsf3>
 80018b4:	4603      	mov	r3, r0
 80018b6:	461a      	mov	r2, r3
 80018b8:	68fb      	ldr	r3, [r7, #12]
 80018ba:	611a      	str	r2, [r3, #16]
    dI = PID_Ctrl->dKi * dTs * PID_Ctrl->dIntergral;
 80018bc:	68fb      	ldr	r3, [r7, #12]
 80018be:	685b      	ldr	r3, [r3, #4]
 80018c0:	6839      	ldr	r1, [r7, #0]
 80018c2:	4618      	mov	r0, r3
 80018c4:	f7ff f998 	bl	8000bf8 <__aeabi_fmul>
 80018c8:	4603      	mov	r3, r0
 80018ca:	461a      	mov	r2, r3
 80018cc:	68fb      	ldr	r3, [r7, #12]
 80018ce:	691b      	ldr	r3, [r3, #16]
 80018d0:	4619      	mov	r1, r3
 80018d2:	4610      	mov	r0, r2
 80018d4:	f7ff f990 	bl	8000bf8 <__aeabi_fmul>
 80018d8:	4603      	mov	r3, r0
 80018da:	617b      	str	r3, [r7, #20]
    dD = PID_Ctrl->dKd * (Error - PID_Ctrl->dErrorTerm) /dTs;
 80018dc:	68fb      	ldr	r3, [r7, #12]
 80018de:	689c      	ldr	r4, [r3, #8]
 80018e0:	68fb      	ldr	r3, [r7, #12]
 80018e2:	68db      	ldr	r3, [r3, #12]
 80018e4:	4619      	mov	r1, r3
 80018e6:	69f8      	ldr	r0, [r7, #28]
 80018e8:	f7ff f87c 	bl	80009e4 <__aeabi_fsub>
 80018ec:	4603      	mov	r3, r0
 80018ee:	4619      	mov	r1, r3
 80018f0:	4620      	mov	r0, r4
 80018f2:	f7ff f981 	bl	8000bf8 <__aeabi_fmul>
 80018f6:	4603      	mov	r3, r0
 80018f8:	6839      	ldr	r1, [r7, #0]
 80018fa:	4618      	mov	r0, r3
 80018fc:	f7ff fa30 	bl	8000d60 <__aeabi_fdiv>
 8001900:	4603      	mov	r3, r0
 8001902:	613b      	str	r3, [r7, #16]

    PID_Ctrl->result = 900*(dP + dI + dD);
 8001904:	6979      	ldr	r1, [r7, #20]
 8001906:	69b8      	ldr	r0, [r7, #24]
 8001908:	f7ff f86e 	bl	80009e8 <__addsf3>
 800190c:	4603      	mov	r3, r0
 800190e:	6939      	ldr	r1, [r7, #16]
 8001910:	4618      	mov	r0, r3
 8001912:	f7ff f869 	bl	80009e8 <__addsf3>
 8001916:	4603      	mov	r3, r0
 8001918:	4914      	ldr	r1, [pc, #80]	; (800196c <PIDCompute+0x100>)
 800191a:	4618      	mov	r0, r3
 800191c:	f7ff f96c 	bl	8000bf8 <__aeabi_fmul>
 8001920:	4603      	mov	r3, r0
 8001922:	461a      	mov	r2, r3
 8001924:	68fb      	ldr	r3, [r7, #12]
 8001926:	615a      	str	r2, [r3, #20]

    if(PID_Ctrl->result > 8000){PID_Ctrl->result = 8000;}
 8001928:	68fb      	ldr	r3, [r7, #12]
 800192a:	695b      	ldr	r3, [r3, #20]
 800192c:	4910      	ldr	r1, [pc, #64]	; (8001970 <PIDCompute+0x104>)
 800192e:	4618      	mov	r0, r3
 8001930:	f7ff fb1e 	bl	8000f70 <__aeabi_fcmpgt>
 8001934:	4603      	mov	r3, r0
 8001936:	2b00      	cmp	r3, #0
 8001938:	d002      	beq.n	8001940 <PIDCompute+0xd4>
 800193a:	68fb      	ldr	r3, [r7, #12]
 800193c:	4a0c      	ldr	r2, [pc, #48]	; (8001970 <PIDCompute+0x104>)
 800193e:	615a      	str	r2, [r3, #20]
    if(PID_Ctrl->result < -8000){PID_Ctrl->result = -8000;}
 8001940:	68fb      	ldr	r3, [r7, #12]
 8001942:	695b      	ldr	r3, [r3, #20]
 8001944:	490b      	ldr	r1, [pc, #44]	; (8001974 <PIDCompute+0x108>)
 8001946:	4618      	mov	r0, r3
 8001948:	f7ff faf4 	bl	8000f34 <__aeabi_fcmplt>
 800194c:	4603      	mov	r3, r0
 800194e:	2b00      	cmp	r3, #0
 8001950:	d002      	beq.n	8001958 <PIDCompute+0xec>
 8001952:	68fb      	ldr	r3, [r7, #12]
 8001954:	4a07      	ldr	r2, [pc, #28]	; (8001974 <PIDCompute+0x108>)
 8001956:	615a      	str	r2, [r3, #20]

    PID_Ctrl->dErrorTerm = Error;
 8001958:	68fb      	ldr	r3, [r7, #12]
 800195a:	69fa      	ldr	r2, [r7, #28]
 800195c:	60da      	str	r2, [r3, #12]

    return PID_Ctrl->result;
 800195e:	68fb      	ldr	r3, [r7, #12]
 8001960:	695b      	ldr	r3, [r3, #20]

}
 8001962:	4618      	mov	r0, r3
 8001964:	3724      	adds	r7, #36	; 0x24
 8001966:	46bd      	mov	sp, r7
 8001968:	bd90      	pop	{r4, r7, pc}
 800196a:	bf00      	nop
 800196c:	44610000 	.word	0x44610000
 8001970:	45fa0000 	.word	0x45fa0000
 8001974:	c5fa0000 	.word	0xc5fa0000

08001978 <subString>:



//cut the string
uint8_t *subString(uint8_t *pBuff, int nPos, int nIndex)
{
 8001978:	b580      	push	{r7, lr}
 800197a:	b086      	sub	sp, #24
 800197c:	af00      	add	r7, sp, #0
 800197e:	60f8      	str	r0, [r7, #12]
 8001980:	60b9      	str	r1, [r7, #8]
 8001982:	607a      	str	r2, [r7, #4]
    uint8_t *t = &pBuff[nPos];
 8001984:	68bb      	ldr	r3, [r7, #8]
 8001986:	68fa      	ldr	r2, [r7, #12]
 8001988:	4413      	add	r3, r2
 800198a:	613b      	str	r3, [r7, #16]
    pBuff[nPos -1] = '\0';
 800198c:	68bb      	ldr	r3, [r7, #8]
 800198e:	3b01      	subs	r3, #1
 8001990:	68fa      	ldr	r2, [r7, #12]
 8001992:	4413      	add	r3, r2
 8001994:	2200      	movs	r2, #0
 8001996:	701a      	strb	r2, [r3, #0]
    for(int i = nIndex; i <(strlen((char*)t) + 1); i++)
 8001998:	687b      	ldr	r3, [r7, #4]
 800199a:	617b      	str	r3, [r7, #20]
 800199c:	e007      	b.n	80019ae <subString+0x36>
    {
        t[i] = '\0';
 800199e:	697b      	ldr	r3, [r7, #20]
 80019a0:	693a      	ldr	r2, [r7, #16]
 80019a2:	4413      	add	r3, r2
 80019a4:	2200      	movs	r2, #0
 80019a6:	701a      	strb	r2, [r3, #0]
    for(int i = nIndex; i <(strlen((char*)t) + 1); i++)
 80019a8:	697b      	ldr	r3, [r7, #20]
 80019aa:	3301      	adds	r3, #1
 80019ac:	617b      	str	r3, [r7, #20]
 80019ae:	6938      	ldr	r0, [r7, #16]
 80019b0:	f7fe fbce 	bl	8000150 <strlen>
 80019b4:	4603      	mov	r3, r0
 80019b6:	1c5a      	adds	r2, r3, #1
 80019b8:	697b      	ldr	r3, [r7, #20]
 80019ba:	429a      	cmp	r2, r3
 80019bc:	d8ef      	bhi.n	800199e <subString+0x26>
    }
    return t;
 80019be:	693b      	ldr	r3, [r7, #16]
}
 80019c0:	4618      	mov	r0, r3
 80019c2:	3718      	adds	r7, #24
 80019c4:	46bd      	mov	sp, r7
 80019c6:	bd80      	pop	{r7, pc}

080019c8 <StrCompare>:

//Compare 2 string
bool StrCompare(uint8_t *pBuff, uint8_t *pSample, uint8_t nSize)
{
 80019c8:	b480      	push	{r7}
 80019ca:	b087      	sub	sp, #28
 80019cc:	af00      	add	r7, sp, #0
 80019ce:	60f8      	str	r0, [r7, #12]
 80019d0:	60b9      	str	r1, [r7, #8]
 80019d2:	4613      	mov	r3, r2
 80019d4:	71fb      	strb	r3, [r7, #7]
    for (int i = 0; i < nSize; i++)
 80019d6:	2300      	movs	r3, #0
 80019d8:	617b      	str	r3, [r7, #20]
 80019da:	e00e      	b.n	80019fa <StrCompare+0x32>
    {
        if(pBuff[i] != pSample[i])
 80019dc:	697b      	ldr	r3, [r7, #20]
 80019de:	68fa      	ldr	r2, [r7, #12]
 80019e0:	4413      	add	r3, r2
 80019e2:	781a      	ldrb	r2, [r3, #0]
 80019e4:	697b      	ldr	r3, [r7, #20]
 80019e6:	68b9      	ldr	r1, [r7, #8]
 80019e8:	440b      	add	r3, r1
 80019ea:	781b      	ldrb	r3, [r3, #0]
 80019ec:	429a      	cmp	r2, r3
 80019ee:	d001      	beq.n	80019f4 <StrCompare+0x2c>
        {
            return false;
 80019f0:	2300      	movs	r3, #0
 80019f2:	e007      	b.n	8001a04 <StrCompare+0x3c>
    for (int i = 0; i < nSize; i++)
 80019f4:	697b      	ldr	r3, [r7, #20]
 80019f6:	3301      	adds	r3, #1
 80019f8:	617b      	str	r3, [r7, #20]
 80019fa:	79fb      	ldrb	r3, [r7, #7]
 80019fc:	697a      	ldr	r2, [r7, #20]
 80019fe:	429a      	cmp	r2, r3
 8001a00:	dbec      	blt.n	80019dc <StrCompare+0x14>
        }
    }
    return true;
 8001a02:	2301      	movs	r3, #1
}
 8001a04:	4618      	mov	r0, r3
 8001a06:	371c      	adds	r7, #28
 8001a08:	46bd      	mov	sp, r7
 8001a0a:	bc80      	pop	{r7}
 8001a0c:	4770      	bx	lr
	...

08001a10 <SerialInit>:

//receive data
void SerialInit(void)
{
 8001a10:	b580      	push	{r7, lr}
 8001a12:	af00      	add	r7, sp, #0
    HAL_UART_Receive_IT(&huart3, (uint8_t *)g_nRxBuff, MAX_LEN);
 8001a14:	2217      	movs	r2, #23
 8001a16:	4903      	ldr	r1, [pc, #12]	; (8001a24 <SerialInit+0x14>)
 8001a18:	4803      	ldr	r0, [pc, #12]	; (8001a28 <SerialInit+0x18>)
 8001a1a:	f002 fda6 	bl	800456a <HAL_UART_Receive_IT>
}
 8001a1e:	bf00      	nop
 8001a20:	bd80      	pop	{r7, pc}
 8001a22:	bf00      	nop
 8001a24:	2000013c 	.word	0x2000013c
 8001a28:	200002a4 	.word	0x200002a4

08001a2c <SerialAcceptReceive>:

//receive data
void SerialAcceptReceive(void)
{	HAL_UART_Receive_IT(&huart3, (uint8_t*)g_nRxBuff, MAX_LEN);
 8001a2c:	b580      	push	{r7, lr}
 8001a2e:	af00      	add	r7, sp, #0
 8001a30:	2217      	movs	r2, #23
 8001a32:	4903      	ldr	r1, [pc, #12]	; (8001a40 <SerialAcceptReceive+0x14>)
 8001a34:	4803      	ldr	r0, [pc, #12]	; (8001a44 <SerialAcceptReceive+0x18>)
 8001a36:	f002 fd98 	bl	800456a <HAL_UART_Receive_IT>
}
 8001a3a:	bf00      	nop
 8001a3c:	bd80      	pop	{r7, pc}
 8001a3e:	bf00      	nop
 8001a40:	2000013c 	.word	0x2000013c
 8001a44:	200002a4 	.word	0x200002a4

08001a48 <SerialWriteComm>:

//send data to GUI
void SerialWriteComm(uint8_t *pStrCmd, uint8_t *pData)
{
 8001a48:	b580      	push	{r7, lr}
 8001a4a:	b084      	sub	sp, #16
 8001a4c:	af00      	add	r7, sp, #0
 8001a4e:	6078      	str	r0, [r7, #4]
 8001a50:	6039      	str	r1, [r7, #0]
    uint8_t *pBuff;
    pBuff = (uint8_t *)malloc(22);
 8001a52:	2016      	movs	r0, #22
 8001a54:	f003 fa0c 	bl	8004e70 <malloc>
 8001a58:	4603      	mov	r3, r0
 8001a5a:	60fb      	str	r3, [r7, #12]
    uint8_t nIndex = 0;
 8001a5c:	2300      	movs	r3, #0
 8001a5e:	72fb      	strb	r3, [r7, #11]

    memcpy(pBuff + nIndex, STX, 1);
 8001a60:	7afb      	ldrb	r3, [r7, #11]
 8001a62:	68fa      	ldr	r2, [r7, #12]
 8001a64:	4413      	add	r3, r2
 8001a66:	4a17      	ldr	r2, [pc, #92]	; (8001ac4 <SerialWriteComm+0x7c>)
 8001a68:	7812      	ldrb	r2, [r2, #0]
 8001a6a:	701a      	strb	r2, [r3, #0]
    nIndex += 1;
 8001a6c:	7afb      	ldrb	r3, [r7, #11]
 8001a6e:	3301      	adds	r3, #1
 8001a70:	72fb      	strb	r3, [r7, #11]
    memcpy(pBuff + nIndex, pStrCmd, 4);
 8001a72:	7afb      	ldrb	r3, [r7, #11]
 8001a74:	68fa      	ldr	r2, [r7, #12]
 8001a76:	4413      	add	r3, r2
 8001a78:	687a      	ldr	r2, [r7, #4]
 8001a7a:	6812      	ldr	r2, [r2, #0]
 8001a7c:	601a      	str	r2, [r3, #0]
    nIndex += 4;
 8001a7e:	7afb      	ldrb	r3, [r7, #11]
 8001a80:	3304      	adds	r3, #4
 8001a82:	72fb      	strb	r3, [r7, #11]
    memcpy(pBuff + nIndex, pData, 16);
 8001a84:	7afb      	ldrb	r3, [r7, #11]
 8001a86:	68fa      	ldr	r2, [r7, #12]
 8001a88:	4413      	add	r3, r2
 8001a8a:	2210      	movs	r2, #16
 8001a8c:	6839      	ldr	r1, [r7, #0]
 8001a8e:	4618      	mov	r0, r3
 8001a90:	f003 f9fe 	bl	8004e90 <memcpy>
    nIndex += 16;
 8001a94:	7afb      	ldrb	r3, [r7, #11]
 8001a96:	3310      	adds	r3, #16
 8001a98:	72fb      	strb	r3, [r7, #11]
    memcpy(pBuff + nIndex, ETX, 1);
 8001a9a:	7afb      	ldrb	r3, [r7, #11]
 8001a9c:	68fa      	ldr	r2, [r7, #12]
 8001a9e:	4413      	add	r3, r2
 8001aa0:	4a09      	ldr	r2, [pc, #36]	; (8001ac8 <SerialWriteComm+0x80>)
 8001aa2:	7812      	ldrb	r2, [r2, #0]
 8001aa4:	701a      	strb	r2, [r3, #0]

    HAL_UART_Transmit(&huart3, pBuff, 22 , 1000);
 8001aa6:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8001aaa:	2216      	movs	r2, #22
 8001aac:	68f9      	ldr	r1, [r7, #12]
 8001aae:	4807      	ldr	r0, [pc, #28]	; (8001acc <SerialWriteComm+0x84>)
 8001ab0:	f002 fcc9 	bl	8004446 <HAL_UART_Transmit>

    free(pBuff);
 8001ab4:	68f8      	ldr	r0, [r7, #12]
 8001ab6:	f003 f9e3 	bl	8004e80 <free>

}
 8001aba:	bf00      	nop
 8001abc:	3710      	adds	r7, #16
 8001abe:	46bd      	mov	sp, r7
 8001ac0:	bd80      	pop	{r7, pc}
 8001ac2:	bf00      	nop
 8001ac4:	20000000 	.word	0x20000000
 8001ac8:	20000004 	.word	0x20000004
 8001acc:	200002a4 	.word	0x200002a4

08001ad0 <SerialParse>:

//parse data to Command, Option, Data
void SerialParse(uint8_t *pBuff)
{
 8001ad0:	b590      	push	{r4, r7, lr}
 8001ad2:	b083      	sub	sp, #12
 8001ad4:	af00      	add	r7, sp, #0
 8001ad6:	6078      	str	r0, [r7, #4]
    if((pBuff[0] == STX[0]) && (pBuff[22] == ETX[0]))
 8001ad8:	687b      	ldr	r3, [r7, #4]
 8001ada:	781a      	ldrb	r2, [r3, #0]
 8001adc:	4b27      	ldr	r3, [pc, #156]	; (8001b7c <SerialParse+0xac>)
 8001ade:	781b      	ldrb	r3, [r3, #0]
 8001ae0:	429a      	cmp	r2, r3
 8001ae2:	d146      	bne.n	8001b72 <SerialParse+0xa2>
 8001ae4:	687b      	ldr	r3, [r7, #4]
 8001ae6:	3316      	adds	r3, #22
 8001ae8:	781a      	ldrb	r2, [r3, #0]
 8001aea:	4b25      	ldr	r3, [pc, #148]	; (8001b80 <SerialParse+0xb0>)
 8001aec:	781b      	ldrb	r3, [r3, #0]
 8001aee:	429a      	cmp	r2, r3
 8001af0:	d13f      	bne.n	8001b72 <SerialParse+0xa2>
  {
    memcpy(g_strCommand, subString(g_nRxBuff, 1,5), 5);
 8001af2:	2205      	movs	r2, #5
 8001af4:	2101      	movs	r1, #1
 8001af6:	4823      	ldr	r0, [pc, #140]	; (8001b84 <SerialParse+0xb4>)
 8001af8:	f7ff ff3e 	bl	8001978 <subString>
 8001afc:	4602      	mov	r2, r0
 8001afe:	4b22      	ldr	r3, [pc, #136]	; (8001b88 <SerialParse+0xb8>)
 8001b00:	6810      	ldr	r0, [r2, #0]
 8001b02:	6018      	str	r0, [r3, #0]
 8001b04:	7912      	ldrb	r2, [r2, #4]
 8001b06:	711a      	strb	r2, [r3, #4]

    memcpy(g_nRxData, subString(g_nRxBuff, 6,16), 16);
 8001b08:	2210      	movs	r2, #16
 8001b0a:	2106      	movs	r1, #6
 8001b0c:	481d      	ldr	r0, [pc, #116]	; (8001b84 <SerialParse+0xb4>)
 8001b0e:	f7ff ff33 	bl	8001978 <subString>
 8001b12:	4603      	mov	r3, r0
 8001b14:	4a1d      	ldr	r2, [pc, #116]	; (8001b8c <SerialParse+0xbc>)
 8001b16:	4614      	mov	r4, r2
 8001b18:	6818      	ldr	r0, [r3, #0]
 8001b1a:	6859      	ldr	r1, [r3, #4]
 8001b1c:	689a      	ldr	r2, [r3, #8]
 8001b1e:	68db      	ldr	r3, [r3, #12]
 8001b20:	c40f      	stmia	r4!, {r0, r1, r2, r3}



    memcpy(g_kp, subString(g_nRxData, 0, 4), 4);
 8001b22:	2204      	movs	r2, #4
 8001b24:	2100      	movs	r1, #0
 8001b26:	4819      	ldr	r0, [pc, #100]	; (8001b8c <SerialParse+0xbc>)
 8001b28:	f7ff ff26 	bl	8001978 <subString>
 8001b2c:	4603      	mov	r3, r0
 8001b2e:	681b      	ldr	r3, [r3, #0]
 8001b30:	461a      	mov	r2, r3
 8001b32:	4b17      	ldr	r3, [pc, #92]	; (8001b90 <SerialParse+0xc0>)
 8001b34:	601a      	str	r2, [r3, #0]
    memcpy(g_ki, subString(g_nRxData, 4, 4), 4);
 8001b36:	2204      	movs	r2, #4
 8001b38:	2104      	movs	r1, #4
 8001b3a:	4814      	ldr	r0, [pc, #80]	; (8001b8c <SerialParse+0xbc>)
 8001b3c:	f7ff ff1c 	bl	8001978 <subString>
 8001b40:	4603      	mov	r3, r0
 8001b42:	681b      	ldr	r3, [r3, #0]
 8001b44:	461a      	mov	r2, r3
 8001b46:	4b13      	ldr	r3, [pc, #76]	; (8001b94 <SerialParse+0xc4>)
 8001b48:	601a      	str	r2, [r3, #0]
    memcpy(g_kd, subString(g_nRxData, 8, 4), 4);
 8001b4a:	2204      	movs	r2, #4
 8001b4c:	2108      	movs	r1, #8
 8001b4e:	480f      	ldr	r0, [pc, #60]	; (8001b8c <SerialParse+0xbc>)
 8001b50:	f7ff ff12 	bl	8001978 <subString>
 8001b54:	4603      	mov	r3, r0
 8001b56:	681b      	ldr	r3, [r3, #0]
 8001b58:	461a      	mov	r2, r3
 8001b5a:	4b0f      	ldr	r3, [pc, #60]	; (8001b98 <SerialParse+0xc8>)
 8001b5c:	601a      	str	r2, [r3, #0]
    memcpy(g_Setpoint, subString(g_nRxData, 12, 4), 4);
 8001b5e:	2204      	movs	r2, #4
 8001b60:	210c      	movs	r1, #12
 8001b62:	480a      	ldr	r0, [pc, #40]	; (8001b8c <SerialParse+0xbc>)
 8001b64:	f7ff ff08 	bl	8001978 <subString>
 8001b68:	4603      	mov	r3, r0
 8001b6a:	681b      	ldr	r3, [r3, #0]
 8001b6c:	461a      	mov	r2, r3
 8001b6e:	4b0b      	ldr	r3, [pc, #44]	; (8001b9c <SerialParse+0xcc>)
 8001b70:	601a      	str	r2, [r3, #0]



  }
}
 8001b72:	bf00      	nop
 8001b74:	370c      	adds	r7, #12
 8001b76:	46bd      	mov	sp, r7
 8001b78:	bd90      	pop	{r4, r7, pc}
 8001b7a:	bf00      	nop
 8001b7c:	20000000 	.word	0x20000000
 8001b80:	20000004 	.word	0x20000004
 8001b84:	2000013c 	.word	0x2000013c
 8001b88:	20000154 	.word	0x20000154
 8001b8c:	2000015c 	.word	0x2000015c
 8001b90:	2000016c 	.word	0x2000016c
 8001b94:	20000170 	.word	0x20000170
 8001b98:	20000174 	.word	0x20000174
 8001b9c:	20000178 	.word	0x20000178

08001ba0 <HAL_UART_RxCpltCallback>:

//interupt uart RX
void HAL_UART_RxCpltCallback(UART_HandleTypeDef *huart)
{
 8001ba0:	b580      	push	{r7, lr}
 8001ba2:	b082      	sub	sp, #8
 8001ba4:	af00      	add	r7, sp, #0
 8001ba6:	6078      	str	r0, [r7, #4]
    if(huart ->Instance == huart3.Instance)
 8001ba8:	687b      	ldr	r3, [r7, #4]
 8001baa:	681a      	ldr	r2, [r3, #0]
 8001bac:	4b09      	ldr	r3, [pc, #36]	; (8001bd4 <HAL_UART_RxCpltCallback+0x34>)
 8001bae:	681b      	ldr	r3, [r3, #0]
 8001bb0:	429a      	cmp	r2, r3
 8001bb2:	d105      	bne.n	8001bc0 <HAL_UART_RxCpltCallback+0x20>
    {
        g_bDataAvailable = true;
 8001bb4:	4b08      	ldr	r3, [pc, #32]	; (8001bd8 <HAL_UART_RxCpltCallback+0x38>)
 8001bb6:	2201      	movs	r2, #1
 8001bb8:	701a      	strb	r2, [r3, #0]
        SerialParse(g_nRxBuff);
 8001bba:	4808      	ldr	r0, [pc, #32]	; (8001bdc <HAL_UART_RxCpltCallback+0x3c>)
 8001bbc:	f7ff ff88 	bl	8001ad0 <SerialParse>
    	}
    HAL_UART_Receive_IT(&huart3,(uint8_t*)g_nRxBuff, MAX_LEN);
 8001bc0:	2217      	movs	r2, #23
 8001bc2:	4906      	ldr	r1, [pc, #24]	; (8001bdc <HAL_UART_RxCpltCallback+0x3c>)
 8001bc4:	4803      	ldr	r0, [pc, #12]	; (8001bd4 <HAL_UART_RxCpltCallback+0x34>)
 8001bc6:	f002 fcd0 	bl	800456a <HAL_UART_Receive_IT>
}
 8001bca:	bf00      	nop
 8001bcc:	3708      	adds	r7, #8
 8001bce:	46bd      	mov	sp, r7
 8001bd0:	bd80      	pop	{r7, pc}
 8001bd2:	bf00      	nop
 8001bd4:	200002a4 	.word	0x200002a4
 8001bd8:	2000017c 	.word	0x2000017c
 8001bdc:	2000013c 	.word	0x2000013c

08001be0 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8001be0:	b480      	push	{r7}
 8001be2:	b085      	sub	sp, #20
 8001be4:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_AFIO_CLK_ENABLE();
 8001be6:	4b15      	ldr	r3, [pc, #84]	; (8001c3c <HAL_MspInit+0x5c>)
 8001be8:	699b      	ldr	r3, [r3, #24]
 8001bea:	4a14      	ldr	r2, [pc, #80]	; (8001c3c <HAL_MspInit+0x5c>)
 8001bec:	f043 0301 	orr.w	r3, r3, #1
 8001bf0:	6193      	str	r3, [r2, #24]
 8001bf2:	4b12      	ldr	r3, [pc, #72]	; (8001c3c <HAL_MspInit+0x5c>)
 8001bf4:	699b      	ldr	r3, [r3, #24]
 8001bf6:	f003 0301 	and.w	r3, r3, #1
 8001bfa:	60bb      	str	r3, [r7, #8]
 8001bfc:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_PWR_CLK_ENABLE();
 8001bfe:	4b0f      	ldr	r3, [pc, #60]	; (8001c3c <HAL_MspInit+0x5c>)
 8001c00:	69db      	ldr	r3, [r3, #28]
 8001c02:	4a0e      	ldr	r2, [pc, #56]	; (8001c3c <HAL_MspInit+0x5c>)
 8001c04:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8001c08:	61d3      	str	r3, [r2, #28]
 8001c0a:	4b0c      	ldr	r3, [pc, #48]	; (8001c3c <HAL_MspInit+0x5c>)
 8001c0c:	69db      	ldr	r3, [r3, #28]
 8001c0e:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001c12:	607b      	str	r3, [r7, #4]
 8001c14:	687b      	ldr	r3, [r7, #4]

  /* System interrupt init*/

  /** NOJTAG: JTAG-DP Disabled and SW-DP Enabled
  */
  __HAL_AFIO_REMAP_SWJ_NOJTAG();
 8001c16:	4b0a      	ldr	r3, [pc, #40]	; (8001c40 <HAL_MspInit+0x60>)
 8001c18:	685b      	ldr	r3, [r3, #4]
 8001c1a:	60fb      	str	r3, [r7, #12]
 8001c1c:	68fb      	ldr	r3, [r7, #12]
 8001c1e:	f023 63e0 	bic.w	r3, r3, #117440512	; 0x7000000
 8001c22:	60fb      	str	r3, [r7, #12]
 8001c24:	68fb      	ldr	r3, [r7, #12]
 8001c26:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
 8001c2a:	60fb      	str	r3, [r7, #12]
 8001c2c:	4a04      	ldr	r2, [pc, #16]	; (8001c40 <HAL_MspInit+0x60>)
 8001c2e:	68fb      	ldr	r3, [r7, #12]
 8001c30:	6053      	str	r3, [r2, #4]

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8001c32:	bf00      	nop
 8001c34:	3714      	adds	r7, #20
 8001c36:	46bd      	mov	sp, r7
 8001c38:	bc80      	pop	{r7}
 8001c3a:	4770      	bx	lr
 8001c3c:	40021000 	.word	0x40021000
 8001c40:	40010000 	.word	0x40010000

08001c44 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8001c44:	b480      	push	{r7}
 8001c46:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 8001c48:	e7fe      	b.n	8001c48 <NMI_Handler+0x4>

08001c4a <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8001c4a:	b480      	push	{r7}
 8001c4c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8001c4e:	e7fe      	b.n	8001c4e <HardFault_Handler+0x4>

08001c50 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8001c50:	b480      	push	{r7}
 8001c52:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8001c54:	e7fe      	b.n	8001c54 <MemManage_Handler+0x4>

08001c56 <BusFault_Handler>:

/**
  * @brief This function handles Prefetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8001c56:	b480      	push	{r7}
 8001c58:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8001c5a:	e7fe      	b.n	8001c5a <BusFault_Handler+0x4>

08001c5c <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8001c5c:	b480      	push	{r7}
 8001c5e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8001c60:	e7fe      	b.n	8001c60 <UsageFault_Handler+0x4>

08001c62 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8001c62:	b480      	push	{r7}
 8001c64:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8001c66:	bf00      	nop
 8001c68:	46bd      	mov	sp, r7
 8001c6a:	bc80      	pop	{r7}
 8001c6c:	4770      	bx	lr

08001c6e <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8001c6e:	b480      	push	{r7}
 8001c70:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8001c72:	bf00      	nop
 8001c74:	46bd      	mov	sp, r7
 8001c76:	bc80      	pop	{r7}
 8001c78:	4770      	bx	lr

08001c7a <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8001c7a:	b480      	push	{r7}
 8001c7c:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8001c7e:	bf00      	nop
 8001c80:	46bd      	mov	sp, r7
 8001c82:	bc80      	pop	{r7}
 8001c84:	4770      	bx	lr

08001c86 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8001c86:	b580      	push	{r7, lr}
 8001c88:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8001c8a:	f000 fb91 	bl	80023b0 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8001c8e:	bf00      	nop
 8001c90:	bd80      	pop	{r7, pc}
	...

08001c94 <TIM3_IRQHandler>:

/**
  * @brief This function handles TIM3 global interrupt.
  */
void TIM3_IRQHandler(void)
{
 8001c94:	b580      	push	{r7, lr}
 8001c96:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM3_IRQn 0 */

  /* USER CODE END TIM3_IRQn 0 */
  HAL_TIM_IRQHandler(&htim3);
 8001c98:	4802      	ldr	r0, [pc, #8]	; (8001ca4 <TIM3_IRQHandler+0x10>)
 8001c9a:	f001 fdc5 	bl	8003828 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM3_IRQn 1 */

  /* USER CODE END TIM3_IRQn 1 */
}
 8001c9e:	bf00      	nop
 8001ca0:	bd80      	pop	{r7, pc}
 8001ca2:	bf00      	nop
 8001ca4:	20000214 	.word	0x20000214

08001ca8 <USART3_IRQHandler>:

/**
  * @brief This function handles USART3 global interrupt.
  */
void USART3_IRQHandler(void)
{
 8001ca8:	b580      	push	{r7, lr}
 8001caa:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USART3_IRQn 0 */

  /* USER CODE END USART3_IRQn 0 */
  HAL_UART_IRQHandler(&huart3);
 8001cac:	4802      	ldr	r0, [pc, #8]	; (8001cb8 <USART3_IRQHandler+0x10>)
 8001cae:	f002 fc8d 	bl	80045cc <HAL_UART_IRQHandler>
  /* USER CODE BEGIN USART3_IRQn 1 */

  /* USER CODE END USART3_IRQn 1 */
}
 8001cb2:	bf00      	nop
 8001cb4:	bd80      	pop	{r7, pc}
 8001cb6:	bf00      	nop
 8001cb8:	200002a4 	.word	0x200002a4

08001cbc <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8001cbc:	b580      	push	{r7, lr}
 8001cbe:	b086      	sub	sp, #24
 8001cc0:	af00      	add	r7, sp, #0
 8001cc2:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8001cc4:	4a14      	ldr	r2, [pc, #80]	; (8001d18 <_sbrk+0x5c>)
 8001cc6:	4b15      	ldr	r3, [pc, #84]	; (8001d1c <_sbrk+0x60>)
 8001cc8:	1ad3      	subs	r3, r2, r3
 8001cca:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8001ccc:	697b      	ldr	r3, [r7, #20]
 8001cce:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8001cd0:	4b13      	ldr	r3, [pc, #76]	; (8001d20 <_sbrk+0x64>)
 8001cd2:	681b      	ldr	r3, [r3, #0]
 8001cd4:	2b00      	cmp	r3, #0
 8001cd6:	d102      	bne.n	8001cde <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8001cd8:	4b11      	ldr	r3, [pc, #68]	; (8001d20 <_sbrk+0x64>)
 8001cda:	4a12      	ldr	r2, [pc, #72]	; (8001d24 <_sbrk+0x68>)
 8001cdc:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 8001cde:	4b10      	ldr	r3, [pc, #64]	; (8001d20 <_sbrk+0x64>)
 8001ce0:	681a      	ldr	r2, [r3, #0]
 8001ce2:	687b      	ldr	r3, [r7, #4]
 8001ce4:	4413      	add	r3, r2
 8001ce6:	693a      	ldr	r2, [r7, #16]
 8001ce8:	429a      	cmp	r2, r3
 8001cea:	d207      	bcs.n	8001cfc <_sbrk+0x40>
  {
    errno = ENOMEM;
 8001cec:	f003 f896 	bl	8004e1c <__errno>
 8001cf0:	4603      	mov	r3, r0
 8001cf2:	220c      	movs	r2, #12
 8001cf4:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 8001cf6:	f04f 33ff 	mov.w	r3, #4294967295
 8001cfa:	e009      	b.n	8001d10 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8001cfc:	4b08      	ldr	r3, [pc, #32]	; (8001d20 <_sbrk+0x64>)
 8001cfe:	681b      	ldr	r3, [r3, #0]
 8001d00:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 8001d02:	4b07      	ldr	r3, [pc, #28]	; (8001d20 <_sbrk+0x64>)
 8001d04:	681a      	ldr	r2, [r3, #0]
 8001d06:	687b      	ldr	r3, [r7, #4]
 8001d08:	4413      	add	r3, r2
 8001d0a:	4a05      	ldr	r2, [pc, #20]	; (8001d20 <_sbrk+0x64>)
 8001d0c:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 8001d0e:	68fb      	ldr	r3, [r7, #12]
}
 8001d10:	4618      	mov	r0, r3
 8001d12:	3718      	adds	r7, #24
 8001d14:	46bd      	mov	sp, r7
 8001d16:	bd80      	pop	{r7, pc}
 8001d18:	20005000 	.word	0x20005000
 8001d1c:	00000400 	.word	0x00000400
 8001d20:	20000180 	.word	0x20000180
 8001d24:	20000300 	.word	0x20000300

08001d28 <SystemInit>:
  * @note   This function should be used only after reset.
  * @param  None
  * @retval None
  */
void SystemInit (void)
{
 8001d28:	b480      	push	{r7}
 8001d2a:	af00      	add	r7, sp, #0

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM. */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8001d2c:	bf00      	nop
 8001d2e:	46bd      	mov	sp, r7
 8001d30:	bc80      	pop	{r7}
 8001d32:	4770      	bx	lr

08001d34 <MX_TIM1_Init>:
TIM_HandleTypeDef htim3;
TIM_HandleTypeDef htim4;

/* TIM1 init function */
void MX_TIM1_Init(void)
{
 8001d34:	b580      	push	{r7, lr}
 8001d36:	b08c      	sub	sp, #48	; 0x30
 8001d38:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM1_Init 0 */

  /* USER CODE END TIM1_Init 0 */

  TIM_Encoder_InitTypeDef sConfig = {0};
 8001d3a:	f107 030c 	add.w	r3, r7, #12
 8001d3e:	2224      	movs	r2, #36	; 0x24
 8001d40:	2100      	movs	r1, #0
 8001d42:	4618      	mov	r0, r3
 8001d44:	f003 f8b2 	bl	8004eac <memset>
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8001d48:	1d3b      	adds	r3, r7, #4
 8001d4a:	2200      	movs	r2, #0
 8001d4c:	601a      	str	r2, [r3, #0]
 8001d4e:	605a      	str	r2, [r3, #4]

  /* USER CODE BEGIN TIM1_Init 1 */

  /* USER CODE END TIM1_Init 1 */
  htim1.Instance = TIM1;
 8001d50:	4b22      	ldr	r3, [pc, #136]	; (8001ddc <MX_TIM1_Init+0xa8>)
 8001d52:	4a23      	ldr	r2, [pc, #140]	; (8001de0 <MX_TIM1_Init+0xac>)
 8001d54:	601a      	str	r2, [r3, #0]
  htim1.Init.Prescaler = 0;
 8001d56:	4b21      	ldr	r3, [pc, #132]	; (8001ddc <MX_TIM1_Init+0xa8>)
 8001d58:	2200      	movs	r2, #0
 8001d5a:	605a      	str	r2, [r3, #4]
  htim1.Init.CounterMode = TIM_COUNTERMODE_UP;
 8001d5c:	4b1f      	ldr	r3, [pc, #124]	; (8001ddc <MX_TIM1_Init+0xa8>)
 8001d5e:	2200      	movs	r2, #0
 8001d60:	609a      	str	r2, [r3, #8]
  htim1.Init.Period = 65535;
 8001d62:	4b1e      	ldr	r3, [pc, #120]	; (8001ddc <MX_TIM1_Init+0xa8>)
 8001d64:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8001d68:	60da      	str	r2, [r3, #12]
  htim1.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8001d6a:	4b1c      	ldr	r3, [pc, #112]	; (8001ddc <MX_TIM1_Init+0xa8>)
 8001d6c:	2200      	movs	r2, #0
 8001d6e:	611a      	str	r2, [r3, #16]
  htim1.Init.RepetitionCounter = 0;
 8001d70:	4b1a      	ldr	r3, [pc, #104]	; (8001ddc <MX_TIM1_Init+0xa8>)
 8001d72:	2200      	movs	r2, #0
 8001d74:	615a      	str	r2, [r3, #20]
  htim1.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8001d76:	4b19      	ldr	r3, [pc, #100]	; (8001ddc <MX_TIM1_Init+0xa8>)
 8001d78:	2200      	movs	r2, #0
 8001d7a:	619a      	str	r2, [r3, #24]
  sConfig.EncoderMode = TIM_ENCODERMODE_TI12;
 8001d7c:	2303      	movs	r3, #3
 8001d7e:	60fb      	str	r3, [r7, #12]
  sConfig.IC1Polarity = TIM_ICPOLARITY_RISING;
 8001d80:	2300      	movs	r3, #0
 8001d82:	613b      	str	r3, [r7, #16]
  sConfig.IC1Selection = TIM_ICSELECTION_DIRECTTI;
 8001d84:	2301      	movs	r3, #1
 8001d86:	617b      	str	r3, [r7, #20]
  sConfig.IC1Prescaler = TIM_ICPSC_DIV1;
 8001d88:	2300      	movs	r3, #0
 8001d8a:	61bb      	str	r3, [r7, #24]
  sConfig.IC1Filter = 0;
 8001d8c:	2300      	movs	r3, #0
 8001d8e:	61fb      	str	r3, [r7, #28]
  sConfig.IC2Polarity = TIM_ICPOLARITY_RISING;
 8001d90:	2300      	movs	r3, #0
 8001d92:	623b      	str	r3, [r7, #32]
  sConfig.IC2Selection = TIM_ICSELECTION_DIRECTTI;
 8001d94:	2301      	movs	r3, #1
 8001d96:	627b      	str	r3, [r7, #36]	; 0x24
  sConfig.IC2Prescaler = TIM_ICPSC_DIV1;
 8001d98:	2300      	movs	r3, #0
 8001d9a:	62bb      	str	r3, [r7, #40]	; 0x28
  sConfig.IC2Filter = 0;
 8001d9c:	2300      	movs	r3, #0
 8001d9e:	62fb      	str	r3, [r7, #44]	; 0x2c
  if (HAL_TIM_Encoder_Init(&htim1, &sConfig) != HAL_OK)
 8001da0:	f107 030c 	add.w	r3, r7, #12
 8001da4:	4619      	mov	r1, r3
 8001da6:	480d      	ldr	r0, [pc, #52]	; (8001ddc <MX_TIM1_Init+0xa8>)
 8001da8:	f001 fc0e 	bl	80035c8 <HAL_TIM_Encoder_Init>
 8001dac:	4603      	mov	r3, r0
 8001dae:	2b00      	cmp	r3, #0
 8001db0:	d001      	beq.n	8001db6 <MX_TIM1_Init+0x82>
  {
    Error_Handler();
 8001db2:	f7ff fbab 	bl	800150c <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8001db6:	2300      	movs	r3, #0
 8001db8:	607b      	str	r3, [r7, #4]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8001dba:	2300      	movs	r3, #0
 8001dbc:	60bb      	str	r3, [r7, #8]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim1, &sMasterConfig) != HAL_OK)
 8001dbe:	1d3b      	adds	r3, r7, #4
 8001dc0:	4619      	mov	r1, r3
 8001dc2:	4806      	ldr	r0, [pc, #24]	; (8001ddc <MX_TIM1_Init+0xa8>)
 8001dc4:	f002 fa82 	bl	80042cc <HAL_TIMEx_MasterConfigSynchronization>
 8001dc8:	4603      	mov	r3, r0
 8001dca:	2b00      	cmp	r3, #0
 8001dcc:	d001      	beq.n	8001dd2 <MX_TIM1_Init+0x9e>
  {
    Error_Handler();
 8001dce:	f7ff fb9d 	bl	800150c <Error_Handler>
  }
  /* USER CODE BEGIN TIM1_Init 2 */

  /* USER CODE END TIM1_Init 2 */

}
 8001dd2:	bf00      	nop
 8001dd4:	3730      	adds	r7, #48	; 0x30
 8001dd6:	46bd      	mov	sp, r7
 8001dd8:	bd80      	pop	{r7, pc}
 8001dda:	bf00      	nop
 8001ddc:	20000184 	.word	0x20000184
 8001de0:	40012c00 	.word	0x40012c00

08001de4 <MX_TIM2_Init>:
/* TIM2 init function */
void MX_TIM2_Init(void)
{
 8001de4:	b580      	push	{r7, lr}
 8001de6:	b08a      	sub	sp, #40	; 0x28
 8001de8:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM2_Init 0 */

  /* USER CODE END TIM2_Init 0 */

  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8001dea:	f107 0320 	add.w	r3, r7, #32
 8001dee:	2200      	movs	r2, #0
 8001df0:	601a      	str	r2, [r3, #0]
 8001df2:	605a      	str	r2, [r3, #4]
  TIM_OC_InitTypeDef sConfigOC = {0};
 8001df4:	1d3b      	adds	r3, r7, #4
 8001df6:	2200      	movs	r2, #0
 8001df8:	601a      	str	r2, [r3, #0]
 8001dfa:	605a      	str	r2, [r3, #4]
 8001dfc:	609a      	str	r2, [r3, #8]
 8001dfe:	60da      	str	r2, [r3, #12]
 8001e00:	611a      	str	r2, [r3, #16]
 8001e02:	615a      	str	r2, [r3, #20]
 8001e04:	619a      	str	r2, [r3, #24]

  /* USER CODE BEGIN TIM2_Init 1 */

  /* USER CODE END TIM2_Init 1 */
  htim2.Instance = TIM2;
 8001e06:	4b33      	ldr	r3, [pc, #204]	; (8001ed4 <MX_TIM2_Init+0xf0>)
 8001e08:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 8001e0c:	601a      	str	r2, [r3, #0]
  htim2.Init.Prescaler = 9;
 8001e0e:	4b31      	ldr	r3, [pc, #196]	; (8001ed4 <MX_TIM2_Init+0xf0>)
 8001e10:	2209      	movs	r2, #9
 8001e12:	605a      	str	r2, [r3, #4]
  htim2.Init.CounterMode = TIM_COUNTERMODE_CENTERALIGNED3;
 8001e14:	4b2f      	ldr	r3, [pc, #188]	; (8001ed4 <MX_TIM2_Init+0xf0>)
 8001e16:	2260      	movs	r2, #96	; 0x60
 8001e18:	609a      	str	r2, [r3, #8]
  htim2.Init.Period = 7199;
 8001e1a:	4b2e      	ldr	r3, [pc, #184]	; (8001ed4 <MX_TIM2_Init+0xf0>)
 8001e1c:	f641 421f 	movw	r2, #7199	; 0x1c1f
 8001e20:	60da      	str	r2, [r3, #12]
  htim2.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8001e22:	4b2c      	ldr	r3, [pc, #176]	; (8001ed4 <MX_TIM2_Init+0xf0>)
 8001e24:	2200      	movs	r2, #0
 8001e26:	611a      	str	r2, [r3, #16]
  htim2.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8001e28:	4b2a      	ldr	r3, [pc, #168]	; (8001ed4 <MX_TIM2_Init+0xf0>)
 8001e2a:	2200      	movs	r2, #0
 8001e2c:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_PWM_Init(&htim2) != HAL_OK)
 8001e2e:	4829      	ldr	r0, [pc, #164]	; (8001ed4 <MX_TIM2_Init+0xf0>)
 8001e30:	f001 fad8 	bl	80033e4 <HAL_TIM_PWM_Init>
 8001e34:	4603      	mov	r3, r0
 8001e36:	2b00      	cmp	r3, #0
 8001e38:	d001      	beq.n	8001e3e <MX_TIM2_Init+0x5a>
  {
    Error_Handler();
 8001e3a:	f7ff fb67 	bl	800150c <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8001e3e:	2300      	movs	r3, #0
 8001e40:	623b      	str	r3, [r7, #32]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8001e42:	2300      	movs	r3, #0
 8001e44:	627b      	str	r3, [r7, #36]	; 0x24
  if (HAL_TIMEx_MasterConfigSynchronization(&htim2, &sMasterConfig) != HAL_OK)
 8001e46:	f107 0320 	add.w	r3, r7, #32
 8001e4a:	4619      	mov	r1, r3
 8001e4c:	4821      	ldr	r0, [pc, #132]	; (8001ed4 <MX_TIM2_Init+0xf0>)
 8001e4e:	f002 fa3d 	bl	80042cc <HAL_TIMEx_MasterConfigSynchronization>
 8001e52:	4603      	mov	r3, r0
 8001e54:	2b00      	cmp	r3, #0
 8001e56:	d001      	beq.n	8001e5c <MX_TIM2_Init+0x78>
  {
    Error_Handler();
 8001e58:	f7ff fb58 	bl	800150c <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 8001e5c:	2360      	movs	r3, #96	; 0x60
 8001e5e:	607b      	str	r3, [r7, #4]
  sConfigOC.Pulse = 0;
 8001e60:	2300      	movs	r3, #0
 8001e62:	60bb      	str	r3, [r7, #8]
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 8001e64:	2300      	movs	r3, #0
 8001e66:	60fb      	str	r3, [r7, #12]
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 8001e68:	2300      	movs	r3, #0
 8001e6a:	617b      	str	r3, [r7, #20]
  if (HAL_TIM_PWM_ConfigChannel(&htim2, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 8001e6c:	1d3b      	adds	r3, r7, #4
 8001e6e:	2200      	movs	r2, #0
 8001e70:	4619      	mov	r1, r3
 8001e72:	4818      	ldr	r0, [pc, #96]	; (8001ed4 <MX_TIM2_Init+0xf0>)
 8001e74:	f001 fde0 	bl	8003a38 <HAL_TIM_PWM_ConfigChannel>
 8001e78:	4603      	mov	r3, r0
 8001e7a:	2b00      	cmp	r3, #0
 8001e7c:	d001      	beq.n	8001e82 <MX_TIM2_Init+0x9e>
  {
    Error_Handler();
 8001e7e:	f7ff fb45 	bl	800150c <Error_Handler>
  }
  if (HAL_TIM_PWM_ConfigChannel(&htim2, &sConfigOC, TIM_CHANNEL_2) != HAL_OK)
 8001e82:	1d3b      	adds	r3, r7, #4
 8001e84:	2204      	movs	r2, #4
 8001e86:	4619      	mov	r1, r3
 8001e88:	4812      	ldr	r0, [pc, #72]	; (8001ed4 <MX_TIM2_Init+0xf0>)
 8001e8a:	f001 fdd5 	bl	8003a38 <HAL_TIM_PWM_ConfigChannel>
 8001e8e:	4603      	mov	r3, r0
 8001e90:	2b00      	cmp	r3, #0
 8001e92:	d001      	beq.n	8001e98 <MX_TIM2_Init+0xb4>
  {
    Error_Handler();
 8001e94:	f7ff fb3a 	bl	800150c <Error_Handler>
  }
  if (HAL_TIM_PWM_ConfigChannel(&htim2, &sConfigOC, TIM_CHANNEL_3) != HAL_OK)
 8001e98:	1d3b      	adds	r3, r7, #4
 8001e9a:	2208      	movs	r2, #8
 8001e9c:	4619      	mov	r1, r3
 8001e9e:	480d      	ldr	r0, [pc, #52]	; (8001ed4 <MX_TIM2_Init+0xf0>)
 8001ea0:	f001 fdca 	bl	8003a38 <HAL_TIM_PWM_ConfigChannel>
 8001ea4:	4603      	mov	r3, r0
 8001ea6:	2b00      	cmp	r3, #0
 8001ea8:	d001      	beq.n	8001eae <MX_TIM2_Init+0xca>
  {
    Error_Handler();
 8001eaa:	f7ff fb2f 	bl	800150c <Error_Handler>
  }
  if (HAL_TIM_PWM_ConfigChannel(&htim2, &sConfigOC, TIM_CHANNEL_4) != HAL_OK)
 8001eae:	1d3b      	adds	r3, r7, #4
 8001eb0:	220c      	movs	r2, #12
 8001eb2:	4619      	mov	r1, r3
 8001eb4:	4807      	ldr	r0, [pc, #28]	; (8001ed4 <MX_TIM2_Init+0xf0>)
 8001eb6:	f001 fdbf 	bl	8003a38 <HAL_TIM_PWM_ConfigChannel>
 8001eba:	4603      	mov	r3, r0
 8001ebc:	2b00      	cmp	r3, #0
 8001ebe:	d001      	beq.n	8001ec4 <MX_TIM2_Init+0xe0>
  {
    Error_Handler();
 8001ec0:	f7ff fb24 	bl	800150c <Error_Handler>
  }
  /* USER CODE BEGIN TIM2_Init 2 */

  /* USER CODE END TIM2_Init 2 */
  HAL_TIM_MspPostInit(&htim2);
 8001ec4:	4803      	ldr	r0, [pc, #12]	; (8001ed4 <MX_TIM2_Init+0xf0>)
 8001ec6:	f000 f959 	bl	800217c <HAL_TIM_MspPostInit>

}
 8001eca:	bf00      	nop
 8001ecc:	3728      	adds	r7, #40	; 0x28
 8001ece:	46bd      	mov	sp, r7
 8001ed0:	bd80      	pop	{r7, pc}
 8001ed2:	bf00      	nop
 8001ed4:	200001cc 	.word	0x200001cc

08001ed8 <MX_TIM3_Init>:
/* TIM3 init function */
void MX_TIM3_Init(void)
{
 8001ed8:	b580      	push	{r7, lr}
 8001eda:	b086      	sub	sp, #24
 8001edc:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM3_Init 0 */

  /* USER CODE END TIM3_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8001ede:	f107 0308 	add.w	r3, r7, #8
 8001ee2:	2200      	movs	r2, #0
 8001ee4:	601a      	str	r2, [r3, #0]
 8001ee6:	605a      	str	r2, [r3, #4]
 8001ee8:	609a      	str	r2, [r3, #8]
 8001eea:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8001eec:	463b      	mov	r3, r7
 8001eee:	2200      	movs	r2, #0
 8001ef0:	601a      	str	r2, [r3, #0]
 8001ef2:	605a      	str	r2, [r3, #4]

  /* USER CODE BEGIN TIM3_Init 1 */

  /* USER CODE END TIM3_Init 1 */
  htim3.Instance = TIM3;
 8001ef4:	4b1d      	ldr	r3, [pc, #116]	; (8001f6c <MX_TIM3_Init+0x94>)
 8001ef6:	4a1e      	ldr	r2, [pc, #120]	; (8001f70 <MX_TIM3_Init+0x98>)
 8001ef8:	601a      	str	r2, [r3, #0]
  htim3.Init.Prescaler = 7199;
 8001efa:	4b1c      	ldr	r3, [pc, #112]	; (8001f6c <MX_TIM3_Init+0x94>)
 8001efc:	f641 421f 	movw	r2, #7199	; 0x1c1f
 8001f00:	605a      	str	r2, [r3, #4]
  htim3.Init.CounterMode = TIM_COUNTERMODE_UP;
 8001f02:	4b1a      	ldr	r3, [pc, #104]	; (8001f6c <MX_TIM3_Init+0x94>)
 8001f04:	2200      	movs	r2, #0
 8001f06:	609a      	str	r2, [r3, #8]
  htim3.Init.Period = 99;
 8001f08:	4b18      	ldr	r3, [pc, #96]	; (8001f6c <MX_TIM3_Init+0x94>)
 8001f0a:	2263      	movs	r2, #99	; 0x63
 8001f0c:	60da      	str	r2, [r3, #12]
  htim3.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8001f0e:	4b17      	ldr	r3, [pc, #92]	; (8001f6c <MX_TIM3_Init+0x94>)
 8001f10:	2200      	movs	r2, #0
 8001f12:	611a      	str	r2, [r3, #16]
  htim3.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8001f14:	4b15      	ldr	r3, [pc, #84]	; (8001f6c <MX_TIM3_Init+0x94>)
 8001f16:	2200      	movs	r2, #0
 8001f18:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim3) != HAL_OK)
 8001f1a:	4814      	ldr	r0, [pc, #80]	; (8001f6c <MX_TIM3_Init+0x94>)
 8001f1c:	f001 f9c0 	bl	80032a0 <HAL_TIM_Base_Init>
 8001f20:	4603      	mov	r3, r0
 8001f22:	2b00      	cmp	r3, #0
 8001f24:	d001      	beq.n	8001f2a <MX_TIM3_Init+0x52>
  {
    Error_Handler();
 8001f26:	f7ff faf1 	bl	800150c <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8001f2a:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8001f2e:	60bb      	str	r3, [r7, #8]
  if (HAL_TIM_ConfigClockSource(&htim3, &sClockSourceConfig) != HAL_OK)
 8001f30:	f107 0308 	add.w	r3, r7, #8
 8001f34:	4619      	mov	r1, r3
 8001f36:	480d      	ldr	r0, [pc, #52]	; (8001f6c <MX_TIM3_Init+0x94>)
 8001f38:	f001 fe3c 	bl	8003bb4 <HAL_TIM_ConfigClockSource>
 8001f3c:	4603      	mov	r3, r0
 8001f3e:	2b00      	cmp	r3, #0
 8001f40:	d001      	beq.n	8001f46 <MX_TIM3_Init+0x6e>
  {
    Error_Handler();
 8001f42:	f7ff fae3 	bl	800150c <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8001f46:	2300      	movs	r3, #0
 8001f48:	603b      	str	r3, [r7, #0]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8001f4a:	2300      	movs	r3, #0
 8001f4c:	607b      	str	r3, [r7, #4]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim3, &sMasterConfig) != HAL_OK)
 8001f4e:	463b      	mov	r3, r7
 8001f50:	4619      	mov	r1, r3
 8001f52:	4806      	ldr	r0, [pc, #24]	; (8001f6c <MX_TIM3_Init+0x94>)
 8001f54:	f002 f9ba 	bl	80042cc <HAL_TIMEx_MasterConfigSynchronization>
 8001f58:	4603      	mov	r3, r0
 8001f5a:	2b00      	cmp	r3, #0
 8001f5c:	d001      	beq.n	8001f62 <MX_TIM3_Init+0x8a>
  {
    Error_Handler();
 8001f5e:	f7ff fad5 	bl	800150c <Error_Handler>
  }
  /* USER CODE BEGIN TIM3_Init 2 */

  /* USER CODE END TIM3_Init 2 */

}
 8001f62:	bf00      	nop
 8001f64:	3718      	adds	r7, #24
 8001f66:	46bd      	mov	sp, r7
 8001f68:	bd80      	pop	{r7, pc}
 8001f6a:	bf00      	nop
 8001f6c:	20000214 	.word	0x20000214
 8001f70:	40000400 	.word	0x40000400

08001f74 <MX_TIM4_Init>:
/* TIM4 init function */
void MX_TIM4_Init(void)
{
 8001f74:	b580      	push	{r7, lr}
 8001f76:	b08c      	sub	sp, #48	; 0x30
 8001f78:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM4_Init 0 */

  /* USER CODE END TIM4_Init 0 */

  TIM_Encoder_InitTypeDef sConfig = {0};
 8001f7a:	f107 030c 	add.w	r3, r7, #12
 8001f7e:	2224      	movs	r2, #36	; 0x24
 8001f80:	2100      	movs	r1, #0
 8001f82:	4618      	mov	r0, r3
 8001f84:	f002 ff92 	bl	8004eac <memset>
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8001f88:	1d3b      	adds	r3, r7, #4
 8001f8a:	2200      	movs	r2, #0
 8001f8c:	601a      	str	r2, [r3, #0]
 8001f8e:	605a      	str	r2, [r3, #4]

  /* USER CODE BEGIN TIM4_Init 1 */

  /* USER CODE END TIM4_Init 1 */
  htim4.Instance = TIM4;
 8001f90:	4b20      	ldr	r3, [pc, #128]	; (8002014 <MX_TIM4_Init+0xa0>)
 8001f92:	4a21      	ldr	r2, [pc, #132]	; (8002018 <MX_TIM4_Init+0xa4>)
 8001f94:	601a      	str	r2, [r3, #0]
  htim4.Init.Prescaler = 0;
 8001f96:	4b1f      	ldr	r3, [pc, #124]	; (8002014 <MX_TIM4_Init+0xa0>)
 8001f98:	2200      	movs	r2, #0
 8001f9a:	605a      	str	r2, [r3, #4]
  htim4.Init.CounterMode = TIM_COUNTERMODE_UP;
 8001f9c:	4b1d      	ldr	r3, [pc, #116]	; (8002014 <MX_TIM4_Init+0xa0>)
 8001f9e:	2200      	movs	r2, #0
 8001fa0:	609a      	str	r2, [r3, #8]
  htim4.Init.Period = 65535;
 8001fa2:	4b1c      	ldr	r3, [pc, #112]	; (8002014 <MX_TIM4_Init+0xa0>)
 8001fa4:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8001fa8:	60da      	str	r2, [r3, #12]
  htim4.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8001faa:	4b1a      	ldr	r3, [pc, #104]	; (8002014 <MX_TIM4_Init+0xa0>)
 8001fac:	2200      	movs	r2, #0
 8001fae:	611a      	str	r2, [r3, #16]
  htim4.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8001fb0:	4b18      	ldr	r3, [pc, #96]	; (8002014 <MX_TIM4_Init+0xa0>)
 8001fb2:	2200      	movs	r2, #0
 8001fb4:	619a      	str	r2, [r3, #24]
  sConfig.EncoderMode = TIM_ENCODERMODE_TI12;
 8001fb6:	2303      	movs	r3, #3
 8001fb8:	60fb      	str	r3, [r7, #12]
  sConfig.IC1Polarity = TIM_ICPOLARITY_RISING;
 8001fba:	2300      	movs	r3, #0
 8001fbc:	613b      	str	r3, [r7, #16]
  sConfig.IC1Selection = TIM_ICSELECTION_DIRECTTI;
 8001fbe:	2301      	movs	r3, #1
 8001fc0:	617b      	str	r3, [r7, #20]
  sConfig.IC1Prescaler = TIM_ICPSC_DIV1;
 8001fc2:	2300      	movs	r3, #0
 8001fc4:	61bb      	str	r3, [r7, #24]
  sConfig.IC1Filter = 0;
 8001fc6:	2300      	movs	r3, #0
 8001fc8:	61fb      	str	r3, [r7, #28]
  sConfig.IC2Polarity = TIM_ICPOLARITY_RISING;
 8001fca:	2300      	movs	r3, #0
 8001fcc:	623b      	str	r3, [r7, #32]
  sConfig.IC2Selection = TIM_ICSELECTION_DIRECTTI;
 8001fce:	2301      	movs	r3, #1
 8001fd0:	627b      	str	r3, [r7, #36]	; 0x24
  sConfig.IC2Prescaler = TIM_ICPSC_DIV1;
 8001fd2:	2300      	movs	r3, #0
 8001fd4:	62bb      	str	r3, [r7, #40]	; 0x28
  sConfig.IC2Filter = 0;
 8001fd6:	2300      	movs	r3, #0
 8001fd8:	62fb      	str	r3, [r7, #44]	; 0x2c
  if (HAL_TIM_Encoder_Init(&htim4, &sConfig) != HAL_OK)
 8001fda:	f107 030c 	add.w	r3, r7, #12
 8001fde:	4619      	mov	r1, r3
 8001fe0:	480c      	ldr	r0, [pc, #48]	; (8002014 <MX_TIM4_Init+0xa0>)
 8001fe2:	f001 faf1 	bl	80035c8 <HAL_TIM_Encoder_Init>
 8001fe6:	4603      	mov	r3, r0
 8001fe8:	2b00      	cmp	r3, #0
 8001fea:	d001      	beq.n	8001ff0 <MX_TIM4_Init+0x7c>
  {
    Error_Handler();
 8001fec:	f7ff fa8e 	bl	800150c <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8001ff0:	2300      	movs	r3, #0
 8001ff2:	607b      	str	r3, [r7, #4]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8001ff4:	2300      	movs	r3, #0
 8001ff6:	60bb      	str	r3, [r7, #8]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim4, &sMasterConfig) != HAL_OK)
 8001ff8:	1d3b      	adds	r3, r7, #4
 8001ffa:	4619      	mov	r1, r3
 8001ffc:	4805      	ldr	r0, [pc, #20]	; (8002014 <MX_TIM4_Init+0xa0>)
 8001ffe:	f002 f965 	bl	80042cc <HAL_TIMEx_MasterConfigSynchronization>
 8002002:	4603      	mov	r3, r0
 8002004:	2b00      	cmp	r3, #0
 8002006:	d001      	beq.n	800200c <MX_TIM4_Init+0x98>
  {
    Error_Handler();
 8002008:	f7ff fa80 	bl	800150c <Error_Handler>
  }
  /* USER CODE BEGIN TIM4_Init 2 */

  /* USER CODE END TIM4_Init 2 */

}
 800200c:	bf00      	nop
 800200e:	3730      	adds	r7, #48	; 0x30
 8002010:	46bd      	mov	sp, r7
 8002012:	bd80      	pop	{r7, pc}
 8002014:	2000025c 	.word	0x2000025c
 8002018:	40000800 	.word	0x40000800

0800201c <HAL_TIM_Encoder_MspInit>:

void HAL_TIM_Encoder_MspInit(TIM_HandleTypeDef* tim_encoderHandle)
{
 800201c:	b580      	push	{r7, lr}
 800201e:	b08a      	sub	sp, #40	; 0x28
 8002020:	af00      	add	r7, sp, #0
 8002022:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8002024:	f107 0318 	add.w	r3, r7, #24
 8002028:	2200      	movs	r2, #0
 800202a:	601a      	str	r2, [r3, #0]
 800202c:	605a      	str	r2, [r3, #4]
 800202e:	609a      	str	r2, [r3, #8]
 8002030:	60da      	str	r2, [r3, #12]
  if(tim_encoderHandle->Instance==TIM1)
 8002032:	687b      	ldr	r3, [r7, #4]
 8002034:	681b      	ldr	r3, [r3, #0]
 8002036:	4a2b      	ldr	r2, [pc, #172]	; (80020e4 <HAL_TIM_Encoder_MspInit+0xc8>)
 8002038:	4293      	cmp	r3, r2
 800203a:	d125      	bne.n	8002088 <HAL_TIM_Encoder_MspInit+0x6c>
  {
  /* USER CODE BEGIN TIM1_MspInit 0 */

  /* USER CODE END TIM1_MspInit 0 */
    /* TIM1 clock enable */
    __HAL_RCC_TIM1_CLK_ENABLE();
 800203c:	4b2a      	ldr	r3, [pc, #168]	; (80020e8 <HAL_TIM_Encoder_MspInit+0xcc>)
 800203e:	699b      	ldr	r3, [r3, #24]
 8002040:	4a29      	ldr	r2, [pc, #164]	; (80020e8 <HAL_TIM_Encoder_MspInit+0xcc>)
 8002042:	f443 6300 	orr.w	r3, r3, #2048	; 0x800
 8002046:	6193      	str	r3, [r2, #24]
 8002048:	4b27      	ldr	r3, [pc, #156]	; (80020e8 <HAL_TIM_Encoder_MspInit+0xcc>)
 800204a:	699b      	ldr	r3, [r3, #24]
 800204c:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8002050:	617b      	str	r3, [r7, #20]
 8002052:	697b      	ldr	r3, [r7, #20]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8002054:	4b24      	ldr	r3, [pc, #144]	; (80020e8 <HAL_TIM_Encoder_MspInit+0xcc>)
 8002056:	699b      	ldr	r3, [r3, #24]
 8002058:	4a23      	ldr	r2, [pc, #140]	; (80020e8 <HAL_TIM_Encoder_MspInit+0xcc>)
 800205a:	f043 0304 	orr.w	r3, r3, #4
 800205e:	6193      	str	r3, [r2, #24]
 8002060:	4b21      	ldr	r3, [pc, #132]	; (80020e8 <HAL_TIM_Encoder_MspInit+0xcc>)
 8002062:	699b      	ldr	r3, [r3, #24]
 8002064:	f003 0304 	and.w	r3, r3, #4
 8002068:	613b      	str	r3, [r7, #16]
 800206a:	693b      	ldr	r3, [r7, #16]
    /**TIM1 GPIO Configuration
    PA8     ------> TIM1_CH1
    PA9     ------> TIM1_CH2
    */
    GPIO_InitStruct.Pin = GPIO_PIN_8|GPIO_PIN_9;
 800206c:	f44f 7340 	mov.w	r3, #768	; 0x300
 8002070:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8002072:	2300      	movs	r3, #0
 8002074:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002076:	2300      	movs	r3, #0
 8002078:	623b      	str	r3, [r7, #32]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800207a:	f107 0318 	add.w	r3, r7, #24
 800207e:	4619      	mov	r1, r3
 8002080:	481a      	ldr	r0, [pc, #104]	; (80020ec <HAL_TIM_Encoder_MspInit+0xd0>)
 8002082:	f000 fb6f 	bl	8002764 <HAL_GPIO_Init>

  /* USER CODE BEGIN TIM4_MspInit 1 */

  /* USER CODE END TIM4_MspInit 1 */
  }
}
 8002086:	e028      	b.n	80020da <HAL_TIM_Encoder_MspInit+0xbe>
  else if(tim_encoderHandle->Instance==TIM4)
 8002088:	687b      	ldr	r3, [r7, #4]
 800208a:	681b      	ldr	r3, [r3, #0]
 800208c:	4a18      	ldr	r2, [pc, #96]	; (80020f0 <HAL_TIM_Encoder_MspInit+0xd4>)
 800208e:	4293      	cmp	r3, r2
 8002090:	d123      	bne.n	80020da <HAL_TIM_Encoder_MspInit+0xbe>
    __HAL_RCC_TIM4_CLK_ENABLE();
 8002092:	4b15      	ldr	r3, [pc, #84]	; (80020e8 <HAL_TIM_Encoder_MspInit+0xcc>)
 8002094:	69db      	ldr	r3, [r3, #28]
 8002096:	4a14      	ldr	r2, [pc, #80]	; (80020e8 <HAL_TIM_Encoder_MspInit+0xcc>)
 8002098:	f043 0304 	orr.w	r3, r3, #4
 800209c:	61d3      	str	r3, [r2, #28]
 800209e:	4b12      	ldr	r3, [pc, #72]	; (80020e8 <HAL_TIM_Encoder_MspInit+0xcc>)
 80020a0:	69db      	ldr	r3, [r3, #28]
 80020a2:	f003 0304 	and.w	r3, r3, #4
 80020a6:	60fb      	str	r3, [r7, #12]
 80020a8:	68fb      	ldr	r3, [r7, #12]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 80020aa:	4b0f      	ldr	r3, [pc, #60]	; (80020e8 <HAL_TIM_Encoder_MspInit+0xcc>)
 80020ac:	699b      	ldr	r3, [r3, #24]
 80020ae:	4a0e      	ldr	r2, [pc, #56]	; (80020e8 <HAL_TIM_Encoder_MspInit+0xcc>)
 80020b0:	f043 0308 	orr.w	r3, r3, #8
 80020b4:	6193      	str	r3, [r2, #24]
 80020b6:	4b0c      	ldr	r3, [pc, #48]	; (80020e8 <HAL_TIM_Encoder_MspInit+0xcc>)
 80020b8:	699b      	ldr	r3, [r3, #24]
 80020ba:	f003 0308 	and.w	r3, r3, #8
 80020be:	60bb      	str	r3, [r7, #8]
 80020c0:	68bb      	ldr	r3, [r7, #8]
    GPIO_InitStruct.Pin = GPIO_PIN_6|GPIO_PIN_7;
 80020c2:	23c0      	movs	r3, #192	; 0xc0
 80020c4:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 80020c6:	2300      	movs	r3, #0
 80020c8:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80020ca:	2300      	movs	r3, #0
 80020cc:	623b      	str	r3, [r7, #32]
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80020ce:	f107 0318 	add.w	r3, r7, #24
 80020d2:	4619      	mov	r1, r3
 80020d4:	4807      	ldr	r0, [pc, #28]	; (80020f4 <HAL_TIM_Encoder_MspInit+0xd8>)
 80020d6:	f000 fb45 	bl	8002764 <HAL_GPIO_Init>
}
 80020da:	bf00      	nop
 80020dc:	3728      	adds	r7, #40	; 0x28
 80020de:	46bd      	mov	sp, r7
 80020e0:	bd80      	pop	{r7, pc}
 80020e2:	bf00      	nop
 80020e4:	40012c00 	.word	0x40012c00
 80020e8:	40021000 	.word	0x40021000
 80020ec:	40010800 	.word	0x40010800
 80020f0:	40000800 	.word	0x40000800
 80020f4:	40010c00 	.word	0x40010c00

080020f8 <HAL_TIM_PWM_MspInit>:

void HAL_TIM_PWM_MspInit(TIM_HandleTypeDef* tim_pwmHandle)
{
 80020f8:	b480      	push	{r7}
 80020fa:	b085      	sub	sp, #20
 80020fc:	af00      	add	r7, sp, #0
 80020fe:	6078      	str	r0, [r7, #4]

  if(tim_pwmHandle->Instance==TIM2)
 8002100:	687b      	ldr	r3, [r7, #4]
 8002102:	681b      	ldr	r3, [r3, #0]
 8002104:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8002108:	d10b      	bne.n	8002122 <HAL_TIM_PWM_MspInit+0x2a>
  {
  /* USER CODE BEGIN TIM2_MspInit 0 */

  /* USER CODE END TIM2_MspInit 0 */
    /* TIM2 clock enable */
    __HAL_RCC_TIM2_CLK_ENABLE();
 800210a:	4b08      	ldr	r3, [pc, #32]	; (800212c <HAL_TIM_PWM_MspInit+0x34>)
 800210c:	69db      	ldr	r3, [r3, #28]
 800210e:	4a07      	ldr	r2, [pc, #28]	; (800212c <HAL_TIM_PWM_MspInit+0x34>)
 8002110:	f043 0301 	orr.w	r3, r3, #1
 8002114:	61d3      	str	r3, [r2, #28]
 8002116:	4b05      	ldr	r3, [pc, #20]	; (800212c <HAL_TIM_PWM_MspInit+0x34>)
 8002118:	69db      	ldr	r3, [r3, #28]
 800211a:	f003 0301 	and.w	r3, r3, #1
 800211e:	60fb      	str	r3, [r7, #12]
 8002120:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN TIM2_MspInit 1 */

  /* USER CODE END TIM2_MspInit 1 */
  }
}
 8002122:	bf00      	nop
 8002124:	3714      	adds	r7, #20
 8002126:	46bd      	mov	sp, r7
 8002128:	bc80      	pop	{r7}
 800212a:	4770      	bx	lr
 800212c:	40021000 	.word	0x40021000

08002130 <HAL_TIM_Base_MspInit>:

void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* tim_baseHandle)
{
 8002130:	b580      	push	{r7, lr}
 8002132:	b084      	sub	sp, #16
 8002134:	af00      	add	r7, sp, #0
 8002136:	6078      	str	r0, [r7, #4]

  if(tim_baseHandle->Instance==TIM3)
 8002138:	687b      	ldr	r3, [r7, #4]
 800213a:	681b      	ldr	r3, [r3, #0]
 800213c:	4a0d      	ldr	r2, [pc, #52]	; (8002174 <HAL_TIM_Base_MspInit+0x44>)
 800213e:	4293      	cmp	r3, r2
 8002140:	d113      	bne.n	800216a <HAL_TIM_Base_MspInit+0x3a>
  {
  /* USER CODE BEGIN TIM3_MspInit 0 */

  /* USER CODE END TIM3_MspInit 0 */
    /* TIM3 clock enable */
    __HAL_RCC_TIM3_CLK_ENABLE();
 8002142:	4b0d      	ldr	r3, [pc, #52]	; (8002178 <HAL_TIM_Base_MspInit+0x48>)
 8002144:	69db      	ldr	r3, [r3, #28]
 8002146:	4a0c      	ldr	r2, [pc, #48]	; (8002178 <HAL_TIM_Base_MspInit+0x48>)
 8002148:	f043 0302 	orr.w	r3, r3, #2
 800214c:	61d3      	str	r3, [r2, #28]
 800214e:	4b0a      	ldr	r3, [pc, #40]	; (8002178 <HAL_TIM_Base_MspInit+0x48>)
 8002150:	69db      	ldr	r3, [r3, #28]
 8002152:	f003 0302 	and.w	r3, r3, #2
 8002156:	60fb      	str	r3, [r7, #12]
 8002158:	68fb      	ldr	r3, [r7, #12]

    /* TIM3 interrupt Init */
    HAL_NVIC_SetPriority(TIM3_IRQn, 2, 0);
 800215a:	2200      	movs	r2, #0
 800215c:	2102      	movs	r1, #2
 800215e:	201d      	movs	r0, #29
 8002160:	f000 fa19 	bl	8002596 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM3_IRQn);
 8002164:	201d      	movs	r0, #29
 8002166:	f000 fa32 	bl	80025ce <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN TIM3_MspInit 1 */

  /* USER CODE END TIM3_MspInit 1 */
  }
}
 800216a:	bf00      	nop
 800216c:	3710      	adds	r7, #16
 800216e:	46bd      	mov	sp, r7
 8002170:	bd80      	pop	{r7, pc}
 8002172:	bf00      	nop
 8002174:	40000400 	.word	0x40000400
 8002178:	40021000 	.word	0x40021000

0800217c <HAL_TIM_MspPostInit>:
void HAL_TIM_MspPostInit(TIM_HandleTypeDef* timHandle)
{
 800217c:	b580      	push	{r7, lr}
 800217e:	b088      	sub	sp, #32
 8002180:	af00      	add	r7, sp, #0
 8002182:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8002184:	f107 0310 	add.w	r3, r7, #16
 8002188:	2200      	movs	r2, #0
 800218a:	601a      	str	r2, [r3, #0]
 800218c:	605a      	str	r2, [r3, #4]
 800218e:	609a      	str	r2, [r3, #8]
 8002190:	60da      	str	r2, [r3, #12]
  if(timHandle->Instance==TIM2)
 8002192:	687b      	ldr	r3, [r7, #4]
 8002194:	681b      	ldr	r3, [r3, #0]
 8002196:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800219a:	d117      	bne.n	80021cc <HAL_TIM_MspPostInit+0x50>
  {
  /* USER CODE BEGIN TIM2_MspPostInit 0 */

  /* USER CODE END TIM2_MspPostInit 0 */

    __HAL_RCC_GPIOA_CLK_ENABLE();
 800219c:	4b0d      	ldr	r3, [pc, #52]	; (80021d4 <HAL_TIM_MspPostInit+0x58>)
 800219e:	699b      	ldr	r3, [r3, #24]
 80021a0:	4a0c      	ldr	r2, [pc, #48]	; (80021d4 <HAL_TIM_MspPostInit+0x58>)
 80021a2:	f043 0304 	orr.w	r3, r3, #4
 80021a6:	6193      	str	r3, [r2, #24]
 80021a8:	4b0a      	ldr	r3, [pc, #40]	; (80021d4 <HAL_TIM_MspPostInit+0x58>)
 80021aa:	699b      	ldr	r3, [r3, #24]
 80021ac:	f003 0304 	and.w	r3, r3, #4
 80021b0:	60fb      	str	r3, [r7, #12]
 80021b2:	68fb      	ldr	r3, [r7, #12]
    PA0-WKUP     ------> TIM2_CH1
    PA1     ------> TIM2_CH2
    PA2     ------> TIM2_CH3
    PA3     ------> TIM2_CH4
    */
    GPIO_InitStruct.Pin = GPIO_PIN_0|GPIO_PIN_1|GPIO_PIN_2|GPIO_PIN_3;
 80021b4:	230f      	movs	r3, #15
 80021b6:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80021b8:	2302      	movs	r3, #2
 80021ba:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80021bc:	2302      	movs	r3, #2
 80021be:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80021c0:	f107 0310 	add.w	r3, r7, #16
 80021c4:	4619      	mov	r1, r3
 80021c6:	4804      	ldr	r0, [pc, #16]	; (80021d8 <HAL_TIM_MspPostInit+0x5c>)
 80021c8:	f000 facc 	bl	8002764 <HAL_GPIO_Init>
  /* USER CODE BEGIN TIM2_MspPostInit 1 */

  /* USER CODE END TIM2_MspPostInit 1 */
  }

}
 80021cc:	bf00      	nop
 80021ce:	3720      	adds	r7, #32
 80021d0:	46bd      	mov	sp, r7
 80021d2:	bd80      	pop	{r7, pc}
 80021d4:	40021000 	.word	0x40021000
 80021d8:	40010800 	.word	0x40010800

080021dc <MX_USART3_UART_Init>:
UART_HandleTypeDef huart3;

/* USART3 init function */

void MX_USART3_UART_Init(void)
{
 80021dc:	b580      	push	{r7, lr}
 80021de:	af00      	add	r7, sp, #0
  /* USER CODE END USART3_Init 0 */

  /* USER CODE BEGIN USART3_Init 1 */

  /* USER CODE END USART3_Init 1 */
  huart3.Instance = USART3;
 80021e0:	4b11      	ldr	r3, [pc, #68]	; (8002228 <MX_USART3_UART_Init+0x4c>)
 80021e2:	4a12      	ldr	r2, [pc, #72]	; (800222c <MX_USART3_UART_Init+0x50>)
 80021e4:	601a      	str	r2, [r3, #0]
  huart3.Init.BaudRate = 115200;
 80021e6:	4b10      	ldr	r3, [pc, #64]	; (8002228 <MX_USART3_UART_Init+0x4c>)
 80021e8:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 80021ec:	605a      	str	r2, [r3, #4]
  huart3.Init.WordLength = UART_WORDLENGTH_8B;
 80021ee:	4b0e      	ldr	r3, [pc, #56]	; (8002228 <MX_USART3_UART_Init+0x4c>)
 80021f0:	2200      	movs	r2, #0
 80021f2:	609a      	str	r2, [r3, #8]
  huart3.Init.StopBits = UART_STOPBITS_1;
 80021f4:	4b0c      	ldr	r3, [pc, #48]	; (8002228 <MX_USART3_UART_Init+0x4c>)
 80021f6:	2200      	movs	r2, #0
 80021f8:	60da      	str	r2, [r3, #12]
  huart3.Init.Parity = UART_PARITY_NONE;
 80021fa:	4b0b      	ldr	r3, [pc, #44]	; (8002228 <MX_USART3_UART_Init+0x4c>)
 80021fc:	2200      	movs	r2, #0
 80021fe:	611a      	str	r2, [r3, #16]
  huart3.Init.Mode = UART_MODE_TX_RX;
 8002200:	4b09      	ldr	r3, [pc, #36]	; (8002228 <MX_USART3_UART_Init+0x4c>)
 8002202:	220c      	movs	r2, #12
 8002204:	615a      	str	r2, [r3, #20]
  huart3.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8002206:	4b08      	ldr	r3, [pc, #32]	; (8002228 <MX_USART3_UART_Init+0x4c>)
 8002208:	2200      	movs	r2, #0
 800220a:	619a      	str	r2, [r3, #24]
  huart3.Init.OverSampling = UART_OVERSAMPLING_16;
 800220c:	4b06      	ldr	r3, [pc, #24]	; (8002228 <MX_USART3_UART_Init+0x4c>)
 800220e:	2200      	movs	r2, #0
 8002210:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart3) != HAL_OK)
 8002212:	4805      	ldr	r0, [pc, #20]	; (8002228 <MX_USART3_UART_Init+0x4c>)
 8002214:	f002 f8ca 	bl	80043ac <HAL_UART_Init>
 8002218:	4603      	mov	r3, r0
 800221a:	2b00      	cmp	r3, #0
 800221c:	d001      	beq.n	8002222 <MX_USART3_UART_Init+0x46>
  {
    Error_Handler();
 800221e:	f7ff f975 	bl	800150c <Error_Handler>
  }
  /* USER CODE BEGIN USART3_Init 2 */

  /* USER CODE END USART3_Init 2 */

}
 8002222:	bf00      	nop
 8002224:	bd80      	pop	{r7, pc}
 8002226:	bf00      	nop
 8002228:	200002a4 	.word	0x200002a4
 800222c:	40004800 	.word	0x40004800

08002230 <HAL_UART_MspInit>:

void HAL_UART_MspInit(UART_HandleTypeDef* uartHandle)
{
 8002230:	b580      	push	{r7, lr}
 8002232:	b088      	sub	sp, #32
 8002234:	af00      	add	r7, sp, #0
 8002236:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8002238:	f107 0310 	add.w	r3, r7, #16
 800223c:	2200      	movs	r2, #0
 800223e:	601a      	str	r2, [r3, #0]
 8002240:	605a      	str	r2, [r3, #4]
 8002242:	609a      	str	r2, [r3, #8]
 8002244:	60da      	str	r2, [r3, #12]
  if(uartHandle->Instance==USART3)
 8002246:	687b      	ldr	r3, [r7, #4]
 8002248:	681b      	ldr	r3, [r3, #0]
 800224a:	4a20      	ldr	r2, [pc, #128]	; (80022cc <HAL_UART_MspInit+0x9c>)
 800224c:	4293      	cmp	r3, r2
 800224e:	d139      	bne.n	80022c4 <HAL_UART_MspInit+0x94>
  {
  /* USER CODE BEGIN USART3_MspInit 0 */

  /* USER CODE END USART3_MspInit 0 */
    /* USART3 clock enable */
    __HAL_RCC_USART3_CLK_ENABLE();
 8002250:	4b1f      	ldr	r3, [pc, #124]	; (80022d0 <HAL_UART_MspInit+0xa0>)
 8002252:	69db      	ldr	r3, [r3, #28]
 8002254:	4a1e      	ldr	r2, [pc, #120]	; (80022d0 <HAL_UART_MspInit+0xa0>)
 8002256:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 800225a:	61d3      	str	r3, [r2, #28]
 800225c:	4b1c      	ldr	r3, [pc, #112]	; (80022d0 <HAL_UART_MspInit+0xa0>)
 800225e:	69db      	ldr	r3, [r3, #28]
 8002260:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8002264:	60fb      	str	r3, [r7, #12]
 8002266:	68fb      	ldr	r3, [r7, #12]

    __HAL_RCC_GPIOB_CLK_ENABLE();
 8002268:	4b19      	ldr	r3, [pc, #100]	; (80022d0 <HAL_UART_MspInit+0xa0>)
 800226a:	699b      	ldr	r3, [r3, #24]
 800226c:	4a18      	ldr	r2, [pc, #96]	; (80022d0 <HAL_UART_MspInit+0xa0>)
 800226e:	f043 0308 	orr.w	r3, r3, #8
 8002272:	6193      	str	r3, [r2, #24]
 8002274:	4b16      	ldr	r3, [pc, #88]	; (80022d0 <HAL_UART_MspInit+0xa0>)
 8002276:	699b      	ldr	r3, [r3, #24]
 8002278:	f003 0308 	and.w	r3, r3, #8
 800227c:	60bb      	str	r3, [r7, #8]
 800227e:	68bb      	ldr	r3, [r7, #8]
    /**USART3 GPIO Configuration
    PB10     ------> USART3_TX
    PB11     ------> USART3_RX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_10;
 8002280:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8002284:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002286:	2302      	movs	r3, #2
 8002288:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 800228a:	2303      	movs	r3, #3
 800228c:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 800228e:	f107 0310 	add.w	r3, r7, #16
 8002292:	4619      	mov	r1, r3
 8002294:	480f      	ldr	r0, [pc, #60]	; (80022d4 <HAL_UART_MspInit+0xa4>)
 8002296:	f000 fa65 	bl	8002764 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_11;
 800229a:	f44f 6300 	mov.w	r3, #2048	; 0x800
 800229e:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 80022a0:	2300      	movs	r3, #0
 80022a2:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80022a4:	2300      	movs	r3, #0
 80022a6:	61bb      	str	r3, [r7, #24]
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80022a8:	f107 0310 	add.w	r3, r7, #16
 80022ac:	4619      	mov	r1, r3
 80022ae:	4809      	ldr	r0, [pc, #36]	; (80022d4 <HAL_UART_MspInit+0xa4>)
 80022b0:	f000 fa58 	bl	8002764 <HAL_GPIO_Init>

    /* USART3 interrupt Init */
    HAL_NVIC_SetPriority(USART3_IRQn, 0, 0);
 80022b4:	2200      	movs	r2, #0
 80022b6:	2100      	movs	r1, #0
 80022b8:	2027      	movs	r0, #39	; 0x27
 80022ba:	f000 f96c 	bl	8002596 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART3_IRQn);
 80022be:	2027      	movs	r0, #39	; 0x27
 80022c0:	f000 f985 	bl	80025ce <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN USART3_MspInit 1 */

  /* USER CODE END USART3_MspInit 1 */
  }
}
 80022c4:	bf00      	nop
 80022c6:	3720      	adds	r7, #32
 80022c8:	46bd      	mov	sp, r7
 80022ca:	bd80      	pop	{r7, pc}
 80022cc:	40004800 	.word	0x40004800
 80022d0:	40021000 	.word	0x40021000
 80022d4:	40010c00 	.word	0x40010c00

080022d8 <Reset_Handler>:
  .weak Reset_Handler
  .type Reset_Handler, %function
Reset_Handler:

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 80022d8:	480c      	ldr	r0, [pc, #48]	; (800230c <LoopFillZerobss+0x12>)
  ldr r1, =_edata
 80022da:	490d      	ldr	r1, [pc, #52]	; (8002310 <LoopFillZerobss+0x16>)
  ldr r2, =_sidata
 80022dc:	4a0d      	ldr	r2, [pc, #52]	; (8002314 <LoopFillZerobss+0x1a>)
  movs r3, #0
 80022de:	2300      	movs	r3, #0
  b LoopCopyDataInit
 80022e0:	e002      	b.n	80022e8 <LoopCopyDataInit>

080022e2 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 80022e2:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 80022e4:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 80022e6:	3304      	adds	r3, #4

080022e8 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 80022e8:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 80022ea:	428c      	cmp	r4, r1
  bcc CopyDataInit
 80022ec:	d3f9      	bcc.n	80022e2 <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 80022ee:	4a0a      	ldr	r2, [pc, #40]	; (8002318 <LoopFillZerobss+0x1e>)
  ldr r4, =_ebss
 80022f0:	4c0a      	ldr	r4, [pc, #40]	; (800231c <LoopFillZerobss+0x22>)
  movs r3, #0
 80022f2:	2300      	movs	r3, #0
  b LoopFillZerobss
 80022f4:	e001      	b.n	80022fa <LoopFillZerobss>

080022f6 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 80022f6:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 80022f8:	3204      	adds	r2, #4

080022fa <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 80022fa:	42a2      	cmp	r2, r4
  bcc FillZerobss
 80022fc:	d3fb      	bcc.n	80022f6 <FillZerobss>

/* Call the clock system intitialization function.*/
    bl  SystemInit
 80022fe:	f7ff fd13 	bl	8001d28 <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 8002302:	f002 fd91 	bl	8004e28 <__libc_init_array>
/* Call the application's entry point.*/
  bl main
 8002306:	f7fe fe91 	bl	800102c <main>
  bx lr
 800230a:	4770      	bx	lr
  ldr r0, =_sdata
 800230c:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8002310:	20000078 	.word	0x20000078
  ldr r2, =_sidata
 8002314:	08005118 	.word	0x08005118
  ldr r2, =_sbss
 8002318:	20000078 	.word	0x20000078
  ldr r4, =_ebss
 800231c:	200002fc 	.word	0x200002fc

08002320 <ADC1_2_IRQHandler>:
 * @retval : None
*/
    .section .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b Infinite_Loop
 8002320:	e7fe      	b.n	8002320 <ADC1_2_IRQHandler>
	...

08002324 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8002324:	b580      	push	{r7, lr}
 8002326:	af00      	add	r7, sp, #0
    defined(STM32F102x6) || defined(STM32F102xB) || \
    defined(STM32F103x6) || defined(STM32F103xB) || defined(STM32F103xE) || defined(STM32F103xG) || \
    defined(STM32F105xC) || defined(STM32F107xC)

  /* Prefetch buffer is not available on value line devices */
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8002328:	4b08      	ldr	r3, [pc, #32]	; (800234c <HAL_Init+0x28>)
 800232a:	681b      	ldr	r3, [r3, #0]
 800232c:	4a07      	ldr	r2, [pc, #28]	; (800234c <HAL_Init+0x28>)
 800232e:	f043 0310 	orr.w	r3, r3, #16
 8002332:	6013      	str	r3, [r2, #0]
#endif
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8002334:	2003      	movs	r0, #3
 8002336:	f000 f923 	bl	8002580 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 800233a:	200f      	movs	r0, #15
 800233c:	f000 f808 	bl	8002350 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8002340:	f7ff fc4e 	bl	8001be0 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8002344:	2300      	movs	r3, #0
}
 8002346:	4618      	mov	r0, r3
 8002348:	bd80      	pop	{r7, pc}
 800234a:	bf00      	nop
 800234c:	40022000 	.word	0x40022000

08002350 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8002350:	b580      	push	{r7, lr}
 8002352:	b082      	sub	sp, #8
 8002354:	af00      	add	r7, sp, #0
 8002356:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8002358:	4b12      	ldr	r3, [pc, #72]	; (80023a4 <HAL_InitTick+0x54>)
 800235a:	681a      	ldr	r2, [r3, #0]
 800235c:	4b12      	ldr	r3, [pc, #72]	; (80023a8 <HAL_InitTick+0x58>)
 800235e:	781b      	ldrb	r3, [r3, #0]
 8002360:	4619      	mov	r1, r3
 8002362:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8002366:	fbb3 f3f1 	udiv	r3, r3, r1
 800236a:	fbb2 f3f3 	udiv	r3, r2, r3
 800236e:	4618      	mov	r0, r3
 8002370:	f000 f93b 	bl	80025ea <HAL_SYSTICK_Config>
 8002374:	4603      	mov	r3, r0
 8002376:	2b00      	cmp	r3, #0
 8002378:	d001      	beq.n	800237e <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 800237a:	2301      	movs	r3, #1
 800237c:	e00e      	b.n	800239c <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 800237e:	687b      	ldr	r3, [r7, #4]
 8002380:	2b0f      	cmp	r3, #15
 8002382:	d80a      	bhi.n	800239a <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8002384:	2200      	movs	r2, #0
 8002386:	6879      	ldr	r1, [r7, #4]
 8002388:	f04f 30ff 	mov.w	r0, #4294967295
 800238c:	f000 f903 	bl	8002596 <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8002390:	4a06      	ldr	r2, [pc, #24]	; (80023ac <HAL_InitTick+0x5c>)
 8002392:	687b      	ldr	r3, [r7, #4]
 8002394:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 8002396:	2300      	movs	r3, #0
 8002398:	e000      	b.n	800239c <HAL_InitTick+0x4c>
    return HAL_ERROR;
 800239a:	2301      	movs	r3, #1
}
 800239c:	4618      	mov	r0, r3
 800239e:	3708      	adds	r7, #8
 80023a0:	46bd      	mov	sp, r7
 80023a2:	bd80      	pop	{r7, pc}
 80023a4:	20000008 	.word	0x20000008
 80023a8:	20000010 	.word	0x20000010
 80023ac:	2000000c 	.word	0x2000000c

080023b0 <HAL_IncTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 80023b0:	b480      	push	{r7}
 80023b2:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 80023b4:	4b05      	ldr	r3, [pc, #20]	; (80023cc <HAL_IncTick+0x1c>)
 80023b6:	781b      	ldrb	r3, [r3, #0]
 80023b8:	461a      	mov	r2, r3
 80023ba:	4b05      	ldr	r3, [pc, #20]	; (80023d0 <HAL_IncTick+0x20>)
 80023bc:	681b      	ldr	r3, [r3, #0]
 80023be:	4413      	add	r3, r2
 80023c0:	4a03      	ldr	r2, [pc, #12]	; (80023d0 <HAL_IncTick+0x20>)
 80023c2:	6013      	str	r3, [r2, #0]
}
 80023c4:	bf00      	nop
 80023c6:	46bd      	mov	sp, r7
 80023c8:	bc80      	pop	{r7}
 80023ca:	4770      	bx	lr
 80023cc:	20000010 	.word	0x20000010
 80023d0:	200002e8 	.word	0x200002e8

080023d4 <HAL_GetTick>:
  * @note  This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 80023d4:	b480      	push	{r7}
 80023d6:	af00      	add	r7, sp, #0
  return uwTick;
 80023d8:	4b02      	ldr	r3, [pc, #8]	; (80023e4 <HAL_GetTick+0x10>)
 80023da:	681b      	ldr	r3, [r3, #0]
}
 80023dc:	4618      	mov	r0, r3
 80023de:	46bd      	mov	sp, r7
 80023e0:	bc80      	pop	{r7}
 80023e2:	4770      	bx	lr
 80023e4:	200002e8 	.word	0x200002e8

080023e8 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80023e8:	b480      	push	{r7}
 80023ea:	b085      	sub	sp, #20
 80023ec:	af00      	add	r7, sp, #0
 80023ee:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 80023f0:	687b      	ldr	r3, [r7, #4]
 80023f2:	f003 0307 	and.w	r3, r3, #7
 80023f6:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 80023f8:	4b0c      	ldr	r3, [pc, #48]	; (800242c <__NVIC_SetPriorityGrouping+0x44>)
 80023fa:	68db      	ldr	r3, [r3, #12]
 80023fc:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 80023fe:	68ba      	ldr	r2, [r7, #8]
 8002400:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8002404:	4013      	ands	r3, r2
 8002406:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos) );               /* Insert write key and priority group */
 8002408:	68fb      	ldr	r3, [r7, #12]
 800240a:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 800240c:	68bb      	ldr	r3, [r7, #8]
 800240e:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8002410:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8002414:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8002418:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 800241a:	4a04      	ldr	r2, [pc, #16]	; (800242c <__NVIC_SetPriorityGrouping+0x44>)
 800241c:	68bb      	ldr	r3, [r7, #8]
 800241e:	60d3      	str	r3, [r2, #12]
}
 8002420:	bf00      	nop
 8002422:	3714      	adds	r7, #20
 8002424:	46bd      	mov	sp, r7
 8002426:	bc80      	pop	{r7}
 8002428:	4770      	bx	lr
 800242a:	bf00      	nop
 800242c:	e000ed00 	.word	0xe000ed00

08002430 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8002430:	b480      	push	{r7}
 8002432:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8002434:	4b04      	ldr	r3, [pc, #16]	; (8002448 <__NVIC_GetPriorityGrouping+0x18>)
 8002436:	68db      	ldr	r3, [r3, #12]
 8002438:	0a1b      	lsrs	r3, r3, #8
 800243a:	f003 0307 	and.w	r3, r3, #7
}
 800243e:	4618      	mov	r0, r3
 8002440:	46bd      	mov	sp, r7
 8002442:	bc80      	pop	{r7}
 8002444:	4770      	bx	lr
 8002446:	bf00      	nop
 8002448:	e000ed00 	.word	0xe000ed00

0800244c <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 800244c:	b480      	push	{r7}
 800244e:	b083      	sub	sp, #12
 8002450:	af00      	add	r7, sp, #0
 8002452:	4603      	mov	r3, r0
 8002454:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8002456:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800245a:	2b00      	cmp	r3, #0
 800245c:	db0b      	blt.n	8002476 <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 800245e:	79fb      	ldrb	r3, [r7, #7]
 8002460:	f003 021f 	and.w	r2, r3, #31
 8002464:	4906      	ldr	r1, [pc, #24]	; (8002480 <__NVIC_EnableIRQ+0x34>)
 8002466:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800246a:	095b      	lsrs	r3, r3, #5
 800246c:	2001      	movs	r0, #1
 800246e:	fa00 f202 	lsl.w	r2, r0, r2
 8002472:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 8002476:	bf00      	nop
 8002478:	370c      	adds	r7, #12
 800247a:	46bd      	mov	sp, r7
 800247c:	bc80      	pop	{r7}
 800247e:	4770      	bx	lr
 8002480:	e000e100 	.word	0xe000e100

08002484 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8002484:	b480      	push	{r7}
 8002486:	b083      	sub	sp, #12
 8002488:	af00      	add	r7, sp, #0
 800248a:	4603      	mov	r3, r0
 800248c:	6039      	str	r1, [r7, #0]
 800248e:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8002490:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002494:	2b00      	cmp	r3, #0
 8002496:	db0a      	blt.n	80024ae <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8002498:	683b      	ldr	r3, [r7, #0]
 800249a:	b2da      	uxtb	r2, r3
 800249c:	490c      	ldr	r1, [pc, #48]	; (80024d0 <__NVIC_SetPriority+0x4c>)
 800249e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80024a2:	0112      	lsls	r2, r2, #4
 80024a4:	b2d2      	uxtb	r2, r2
 80024a6:	440b      	add	r3, r1
 80024a8:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 80024ac:	e00a      	b.n	80024c4 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80024ae:	683b      	ldr	r3, [r7, #0]
 80024b0:	b2da      	uxtb	r2, r3
 80024b2:	4908      	ldr	r1, [pc, #32]	; (80024d4 <__NVIC_SetPriority+0x50>)
 80024b4:	79fb      	ldrb	r3, [r7, #7]
 80024b6:	f003 030f 	and.w	r3, r3, #15
 80024ba:	3b04      	subs	r3, #4
 80024bc:	0112      	lsls	r2, r2, #4
 80024be:	b2d2      	uxtb	r2, r2
 80024c0:	440b      	add	r3, r1
 80024c2:	761a      	strb	r2, [r3, #24]
}
 80024c4:	bf00      	nop
 80024c6:	370c      	adds	r7, #12
 80024c8:	46bd      	mov	sp, r7
 80024ca:	bc80      	pop	{r7}
 80024cc:	4770      	bx	lr
 80024ce:	bf00      	nop
 80024d0:	e000e100 	.word	0xe000e100
 80024d4:	e000ed00 	.word	0xe000ed00

080024d8 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 80024d8:	b480      	push	{r7}
 80024da:	b089      	sub	sp, #36	; 0x24
 80024dc:	af00      	add	r7, sp, #0
 80024de:	60f8      	str	r0, [r7, #12]
 80024e0:	60b9      	str	r1, [r7, #8]
 80024e2:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 80024e4:	68fb      	ldr	r3, [r7, #12]
 80024e6:	f003 0307 	and.w	r3, r3, #7
 80024ea:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 80024ec:	69fb      	ldr	r3, [r7, #28]
 80024ee:	f1c3 0307 	rsb	r3, r3, #7
 80024f2:	2b04      	cmp	r3, #4
 80024f4:	bf28      	it	cs
 80024f6:	2304      	movcs	r3, #4
 80024f8:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 80024fa:	69fb      	ldr	r3, [r7, #28]
 80024fc:	3304      	adds	r3, #4
 80024fe:	2b06      	cmp	r3, #6
 8002500:	d902      	bls.n	8002508 <NVIC_EncodePriority+0x30>
 8002502:	69fb      	ldr	r3, [r7, #28]
 8002504:	3b03      	subs	r3, #3
 8002506:	e000      	b.n	800250a <NVIC_EncodePriority+0x32>
 8002508:	2300      	movs	r3, #0
 800250a:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 800250c:	f04f 32ff 	mov.w	r2, #4294967295
 8002510:	69bb      	ldr	r3, [r7, #24]
 8002512:	fa02 f303 	lsl.w	r3, r2, r3
 8002516:	43da      	mvns	r2, r3
 8002518:	68bb      	ldr	r3, [r7, #8]
 800251a:	401a      	ands	r2, r3
 800251c:	697b      	ldr	r3, [r7, #20]
 800251e:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8002520:	f04f 31ff 	mov.w	r1, #4294967295
 8002524:	697b      	ldr	r3, [r7, #20]
 8002526:	fa01 f303 	lsl.w	r3, r1, r3
 800252a:	43d9      	mvns	r1, r3
 800252c:	687b      	ldr	r3, [r7, #4]
 800252e:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8002530:	4313      	orrs	r3, r2
         );
}
 8002532:	4618      	mov	r0, r3
 8002534:	3724      	adds	r7, #36	; 0x24
 8002536:	46bd      	mov	sp, r7
 8002538:	bc80      	pop	{r7}
 800253a:	4770      	bx	lr

0800253c <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 800253c:	b580      	push	{r7, lr}
 800253e:	b082      	sub	sp, #8
 8002540:	af00      	add	r7, sp, #0
 8002542:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8002544:	687b      	ldr	r3, [r7, #4]
 8002546:	3b01      	subs	r3, #1
 8002548:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 800254c:	d301      	bcc.n	8002552 <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 800254e:	2301      	movs	r3, #1
 8002550:	e00f      	b.n	8002572 <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8002552:	4a0a      	ldr	r2, [pc, #40]	; (800257c <SysTick_Config+0x40>)
 8002554:	687b      	ldr	r3, [r7, #4]
 8002556:	3b01      	subs	r3, #1
 8002558:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 800255a:	210f      	movs	r1, #15
 800255c:	f04f 30ff 	mov.w	r0, #4294967295
 8002560:	f7ff ff90 	bl	8002484 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8002564:	4b05      	ldr	r3, [pc, #20]	; (800257c <SysTick_Config+0x40>)
 8002566:	2200      	movs	r2, #0
 8002568:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 800256a:	4b04      	ldr	r3, [pc, #16]	; (800257c <SysTick_Config+0x40>)
 800256c:	2207      	movs	r2, #7
 800256e:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8002570:	2300      	movs	r3, #0
}
 8002572:	4618      	mov	r0, r3
 8002574:	3708      	adds	r7, #8
 8002576:	46bd      	mov	sp, r7
 8002578:	bd80      	pop	{r7, pc}
 800257a:	bf00      	nop
 800257c:	e000e010 	.word	0xe000e010

08002580 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8002580:	b580      	push	{r7, lr}
 8002582:	b082      	sub	sp, #8
 8002584:	af00      	add	r7, sp, #0
 8002586:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8002588:	6878      	ldr	r0, [r7, #4]
 800258a:	f7ff ff2d 	bl	80023e8 <__NVIC_SetPriorityGrouping>
}
 800258e:	bf00      	nop
 8002590:	3708      	adds	r7, #8
 8002592:	46bd      	mov	sp, r7
 8002594:	bd80      	pop	{r7, pc}

08002596 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8002596:	b580      	push	{r7, lr}
 8002598:	b086      	sub	sp, #24
 800259a:	af00      	add	r7, sp, #0
 800259c:	4603      	mov	r3, r0
 800259e:	60b9      	str	r1, [r7, #8]
 80025a0:	607a      	str	r2, [r7, #4]
 80025a2:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 80025a4:	2300      	movs	r3, #0
 80025a6:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 80025a8:	f7ff ff42 	bl	8002430 <__NVIC_GetPriorityGrouping>
 80025ac:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 80025ae:	687a      	ldr	r2, [r7, #4]
 80025b0:	68b9      	ldr	r1, [r7, #8]
 80025b2:	6978      	ldr	r0, [r7, #20]
 80025b4:	f7ff ff90 	bl	80024d8 <NVIC_EncodePriority>
 80025b8:	4602      	mov	r2, r0
 80025ba:	f997 300f 	ldrsb.w	r3, [r7, #15]
 80025be:	4611      	mov	r1, r2
 80025c0:	4618      	mov	r0, r3
 80025c2:	f7ff ff5f 	bl	8002484 <__NVIC_SetPriority>
}
 80025c6:	bf00      	nop
 80025c8:	3718      	adds	r7, #24
 80025ca:	46bd      	mov	sp, r7
 80025cc:	bd80      	pop	{r7, pc}

080025ce <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f10xxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 80025ce:	b580      	push	{r7, lr}
 80025d0:	b082      	sub	sp, #8
 80025d2:	af00      	add	r7, sp, #0
 80025d4:	4603      	mov	r3, r0
 80025d6:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));

  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 80025d8:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80025dc:	4618      	mov	r0, r3
 80025de:	f7ff ff35 	bl	800244c <__NVIC_EnableIRQ>
}
 80025e2:	bf00      	nop
 80025e4:	3708      	adds	r7, #8
 80025e6:	46bd      	mov	sp, r7
 80025e8:	bd80      	pop	{r7, pc}

080025ea <HAL_SYSTICK_Config>:
  * @param  TicksNumb: Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 80025ea:	b580      	push	{r7, lr}
 80025ec:	b082      	sub	sp, #8
 80025ee:	af00      	add	r7, sp, #0
 80025f0:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 80025f2:	6878      	ldr	r0, [r7, #4]
 80025f4:	f7ff ffa2 	bl	800253c <SysTick_Config>
 80025f8:	4603      	mov	r3, r0
}
 80025fa:	4618      	mov	r0, r3
 80025fc:	3708      	adds	r7, #8
 80025fe:	46bd      	mov	sp, r7
 8002600:	bd80      	pop	{r7, pc}

08002602 <HAL_DMA_Abort>:
  * @param  hdma: pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Channel.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort(DMA_HandleTypeDef *hdma)
{
 8002602:	b480      	push	{r7}
 8002604:	b085      	sub	sp, #20
 8002606:	af00      	add	r7, sp, #0
 8002608:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 800260a:	2300      	movs	r3, #0
 800260c:	73fb      	strb	r3, [r7, #15]
  
  if(hdma->State != HAL_DMA_STATE_BUSY)
 800260e:	687b      	ldr	r3, [r7, #4]
 8002610:	f893 3021 	ldrb.w	r3, [r3, #33]	; 0x21
 8002614:	2b02      	cmp	r3, #2
 8002616:	d008      	beq.n	800262a <HAL_DMA_Abort+0x28>
  {
    /* no transfer ongoing */
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8002618:	687b      	ldr	r3, [r7, #4]
 800261a:	2204      	movs	r2, #4
 800261c:	639a      	str	r2, [r3, #56]	; 0x38
    
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 800261e:	687b      	ldr	r3, [r7, #4]
 8002620:	2200      	movs	r2, #0
 8002622:	f883 2020 	strb.w	r2, [r3, #32]
    
    return HAL_ERROR;
 8002626:	2301      	movs	r3, #1
 8002628:	e020      	b.n	800266c <HAL_DMA_Abort+0x6a>
  }
  else

  {
    /* Disable DMA IT */
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 800262a:	687b      	ldr	r3, [r7, #4]
 800262c:	681b      	ldr	r3, [r3, #0]
 800262e:	681a      	ldr	r2, [r3, #0]
 8002630:	687b      	ldr	r3, [r7, #4]
 8002632:	681b      	ldr	r3, [r3, #0]
 8002634:	f022 020e 	bic.w	r2, r2, #14
 8002638:	601a      	str	r2, [r3, #0]
      
    /* Disable the channel */
    __HAL_DMA_DISABLE(hdma);
 800263a:	687b      	ldr	r3, [r7, #4]
 800263c:	681b      	ldr	r3, [r3, #0]
 800263e:	681a      	ldr	r2, [r3, #0]
 8002640:	687b      	ldr	r3, [r7, #4]
 8002642:	681b      	ldr	r3, [r3, #0]
 8002644:	f022 0201 	bic.w	r2, r2, #1
 8002648:	601a      	str	r2, [r3, #0]
      
    /* Clear all flags */
    hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << hdma->ChannelIndex);
 800264a:	687b      	ldr	r3, [r7, #4]
 800264c:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 800264e:	687b      	ldr	r3, [r7, #4]
 8002650:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8002652:	2101      	movs	r1, #1
 8002654:	fa01 f202 	lsl.w	r2, r1, r2
 8002658:	605a      	str	r2, [r3, #4]
  }
  /* Change the DMA state */
  hdma->State = HAL_DMA_STATE_READY;
 800265a:	687b      	ldr	r3, [r7, #4]
 800265c:	2201      	movs	r2, #1
 800265e:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21

  /* Process Unlocked */
  __HAL_UNLOCK(hdma);      
 8002662:	687b      	ldr	r3, [r7, #4]
 8002664:	2200      	movs	r2, #0
 8002666:	f883 2020 	strb.w	r2, [r3, #32]
  
  return status; 
 800266a:	7bfb      	ldrb	r3, [r7, #15]
}
 800266c:	4618      	mov	r0, r3
 800266e:	3714      	adds	r7, #20
 8002670:	46bd      	mov	sp, r7
 8002672:	bc80      	pop	{r7}
 8002674:	4770      	bx	lr
	...

08002678 <HAL_DMA_Abort_IT>:
  * @param  hdma  : pointer to a DMA_HandleTypeDef structure that contains
  *                 the configuration information for the specified DMA Channel.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{  
 8002678:	b580      	push	{r7, lr}
 800267a:	b084      	sub	sp, #16
 800267c:	af00      	add	r7, sp, #0
 800267e:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8002680:	2300      	movs	r3, #0
 8002682:	73fb      	strb	r3, [r7, #15]
  
  if(HAL_DMA_STATE_BUSY != hdma->State)
 8002684:	687b      	ldr	r3, [r7, #4]
 8002686:	f893 3021 	ldrb.w	r3, [r3, #33]	; 0x21
 800268a:	2b02      	cmp	r3, #2
 800268c:	d005      	beq.n	800269a <HAL_DMA_Abort_IT+0x22>
  {
    /* no transfer ongoing */
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 800268e:	687b      	ldr	r3, [r7, #4]
 8002690:	2204      	movs	r2, #4
 8002692:	639a      	str	r2, [r3, #56]	; 0x38
        
    status = HAL_ERROR;
 8002694:	2301      	movs	r3, #1
 8002696:	73fb      	strb	r3, [r7, #15]
 8002698:	e051      	b.n	800273e <HAL_DMA_Abort_IT+0xc6>
  }
  else
  { 
    /* Disable DMA IT */
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 800269a:	687b      	ldr	r3, [r7, #4]
 800269c:	681b      	ldr	r3, [r3, #0]
 800269e:	681a      	ldr	r2, [r3, #0]
 80026a0:	687b      	ldr	r3, [r7, #4]
 80026a2:	681b      	ldr	r3, [r3, #0]
 80026a4:	f022 020e 	bic.w	r2, r2, #14
 80026a8:	601a      	str	r2, [r3, #0]

    /* Disable the channel */
    __HAL_DMA_DISABLE(hdma);
 80026aa:	687b      	ldr	r3, [r7, #4]
 80026ac:	681b      	ldr	r3, [r3, #0]
 80026ae:	681a      	ldr	r2, [r3, #0]
 80026b0:	687b      	ldr	r3, [r7, #4]
 80026b2:	681b      	ldr	r3, [r3, #0]
 80026b4:	f022 0201 	bic.w	r2, r2, #1
 80026b8:	601a      	str	r2, [r3, #0]

    /* Clear all flags */
    __HAL_DMA_CLEAR_FLAG(hdma, __HAL_DMA_GET_GI_FLAG_INDEX(hdma));
 80026ba:	687b      	ldr	r3, [r7, #4]
 80026bc:	681b      	ldr	r3, [r3, #0]
 80026be:	4a22      	ldr	r2, [pc, #136]	; (8002748 <HAL_DMA_Abort_IT+0xd0>)
 80026c0:	4293      	cmp	r3, r2
 80026c2:	d029      	beq.n	8002718 <HAL_DMA_Abort_IT+0xa0>
 80026c4:	687b      	ldr	r3, [r7, #4]
 80026c6:	681b      	ldr	r3, [r3, #0]
 80026c8:	4a20      	ldr	r2, [pc, #128]	; (800274c <HAL_DMA_Abort_IT+0xd4>)
 80026ca:	4293      	cmp	r3, r2
 80026cc:	d022      	beq.n	8002714 <HAL_DMA_Abort_IT+0x9c>
 80026ce:	687b      	ldr	r3, [r7, #4]
 80026d0:	681b      	ldr	r3, [r3, #0]
 80026d2:	4a1f      	ldr	r2, [pc, #124]	; (8002750 <HAL_DMA_Abort_IT+0xd8>)
 80026d4:	4293      	cmp	r3, r2
 80026d6:	d01a      	beq.n	800270e <HAL_DMA_Abort_IT+0x96>
 80026d8:	687b      	ldr	r3, [r7, #4]
 80026da:	681b      	ldr	r3, [r3, #0]
 80026dc:	4a1d      	ldr	r2, [pc, #116]	; (8002754 <HAL_DMA_Abort_IT+0xdc>)
 80026de:	4293      	cmp	r3, r2
 80026e0:	d012      	beq.n	8002708 <HAL_DMA_Abort_IT+0x90>
 80026e2:	687b      	ldr	r3, [r7, #4]
 80026e4:	681b      	ldr	r3, [r3, #0]
 80026e6:	4a1c      	ldr	r2, [pc, #112]	; (8002758 <HAL_DMA_Abort_IT+0xe0>)
 80026e8:	4293      	cmp	r3, r2
 80026ea:	d00a      	beq.n	8002702 <HAL_DMA_Abort_IT+0x8a>
 80026ec:	687b      	ldr	r3, [r7, #4]
 80026ee:	681b      	ldr	r3, [r3, #0]
 80026f0:	4a1a      	ldr	r2, [pc, #104]	; (800275c <HAL_DMA_Abort_IT+0xe4>)
 80026f2:	4293      	cmp	r3, r2
 80026f4:	d102      	bne.n	80026fc <HAL_DMA_Abort_IT+0x84>
 80026f6:	f44f 1380 	mov.w	r3, #1048576	; 0x100000
 80026fa:	e00e      	b.n	800271a <HAL_DMA_Abort_IT+0xa2>
 80026fc:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 8002700:	e00b      	b.n	800271a <HAL_DMA_Abort_IT+0xa2>
 8002702:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 8002706:	e008      	b.n	800271a <HAL_DMA_Abort_IT+0xa2>
 8002708:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 800270c:	e005      	b.n	800271a <HAL_DMA_Abort_IT+0xa2>
 800270e:	f44f 7380 	mov.w	r3, #256	; 0x100
 8002712:	e002      	b.n	800271a <HAL_DMA_Abort_IT+0xa2>
 8002714:	2310      	movs	r3, #16
 8002716:	e000      	b.n	800271a <HAL_DMA_Abort_IT+0xa2>
 8002718:	2301      	movs	r3, #1
 800271a:	4a11      	ldr	r2, [pc, #68]	; (8002760 <HAL_DMA_Abort_IT+0xe8>)
 800271c:	6053      	str	r3, [r2, #4]

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 800271e:	687b      	ldr	r3, [r7, #4]
 8002720:	2201      	movs	r2, #1
 8002722:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8002726:	687b      	ldr	r3, [r7, #4]
 8002728:	2200      	movs	r2, #0
 800272a:	f883 2020 	strb.w	r2, [r3, #32]

    /* Call User Abort callback */
    if(hdma->XferAbortCallback != NULL)
 800272e:	687b      	ldr	r3, [r7, #4]
 8002730:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8002732:	2b00      	cmp	r3, #0
 8002734:	d003      	beq.n	800273e <HAL_DMA_Abort_IT+0xc6>
    {
      hdma->XferAbortCallback(hdma);
 8002736:	687b      	ldr	r3, [r7, #4]
 8002738:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800273a:	6878      	ldr	r0, [r7, #4]
 800273c:	4798      	blx	r3
    } 
  }
  return status;
 800273e:	7bfb      	ldrb	r3, [r7, #15]
}
 8002740:	4618      	mov	r0, r3
 8002742:	3710      	adds	r7, #16
 8002744:	46bd      	mov	sp, r7
 8002746:	bd80      	pop	{r7, pc}
 8002748:	40020008 	.word	0x40020008
 800274c:	4002001c 	.word	0x4002001c
 8002750:	40020030 	.word	0x40020030
 8002754:	40020044 	.word	0x40020044
 8002758:	40020058 	.word	0x40020058
 800275c:	4002006c 	.word	0x4002006c
 8002760:	40020000 	.word	0x40020000

08002764 <HAL_GPIO_Init>:
  * @param  GPIO_Init: pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8002764:	b480      	push	{r7}
 8002766:	b08b      	sub	sp, #44	; 0x2c
 8002768:	af00      	add	r7, sp, #0
 800276a:	6078      	str	r0, [r7, #4]
 800276c:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 800276e:	2300      	movs	r3, #0
 8002770:	627b      	str	r3, [r7, #36]	; 0x24
  uint32_t ioposition;
  uint32_t iocurrent;
  uint32_t temp;
  uint32_t config = 0x00u;
 8002772:	2300      	movs	r3, #0
 8002774:	623b      	str	r3, [r7, #32]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8002776:	e169      	b.n	8002a4c <HAL_GPIO_Init+0x2e8>
  {
    /* Get the IO position */
    ioposition = (0x01uL << position);
 8002778:	2201      	movs	r2, #1
 800277a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800277c:	fa02 f303 	lsl.w	r3, r2, r3
 8002780:	61fb      	str	r3, [r7, #28]

    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 8002782:	683b      	ldr	r3, [r7, #0]
 8002784:	681b      	ldr	r3, [r3, #0]
 8002786:	69fa      	ldr	r2, [r7, #28]
 8002788:	4013      	ands	r3, r2
 800278a:	61bb      	str	r3, [r7, #24]

    if (iocurrent == ioposition)
 800278c:	69ba      	ldr	r2, [r7, #24]
 800278e:	69fb      	ldr	r3, [r7, #28]
 8002790:	429a      	cmp	r2, r3
 8002792:	f040 8158 	bne.w	8002a46 <HAL_GPIO_Init+0x2e2>
    {
      /* Check the Alternate function parameters */
      assert_param(IS_GPIO_AF_INSTANCE(GPIOx));

      /* Based on the required mode, filling config variable with MODEy[1:0] and CNFy[3:2] corresponding bits */
      switch (GPIO_Init->Mode)
 8002796:	683b      	ldr	r3, [r7, #0]
 8002798:	685b      	ldr	r3, [r3, #4]
 800279a:	4a9a      	ldr	r2, [pc, #616]	; (8002a04 <HAL_GPIO_Init+0x2a0>)
 800279c:	4293      	cmp	r3, r2
 800279e:	d05e      	beq.n	800285e <HAL_GPIO_Init+0xfa>
 80027a0:	4a98      	ldr	r2, [pc, #608]	; (8002a04 <HAL_GPIO_Init+0x2a0>)
 80027a2:	4293      	cmp	r3, r2
 80027a4:	d875      	bhi.n	8002892 <HAL_GPIO_Init+0x12e>
 80027a6:	4a98      	ldr	r2, [pc, #608]	; (8002a08 <HAL_GPIO_Init+0x2a4>)
 80027a8:	4293      	cmp	r3, r2
 80027aa:	d058      	beq.n	800285e <HAL_GPIO_Init+0xfa>
 80027ac:	4a96      	ldr	r2, [pc, #600]	; (8002a08 <HAL_GPIO_Init+0x2a4>)
 80027ae:	4293      	cmp	r3, r2
 80027b0:	d86f      	bhi.n	8002892 <HAL_GPIO_Init+0x12e>
 80027b2:	4a96      	ldr	r2, [pc, #600]	; (8002a0c <HAL_GPIO_Init+0x2a8>)
 80027b4:	4293      	cmp	r3, r2
 80027b6:	d052      	beq.n	800285e <HAL_GPIO_Init+0xfa>
 80027b8:	4a94      	ldr	r2, [pc, #592]	; (8002a0c <HAL_GPIO_Init+0x2a8>)
 80027ba:	4293      	cmp	r3, r2
 80027bc:	d869      	bhi.n	8002892 <HAL_GPIO_Init+0x12e>
 80027be:	4a94      	ldr	r2, [pc, #592]	; (8002a10 <HAL_GPIO_Init+0x2ac>)
 80027c0:	4293      	cmp	r3, r2
 80027c2:	d04c      	beq.n	800285e <HAL_GPIO_Init+0xfa>
 80027c4:	4a92      	ldr	r2, [pc, #584]	; (8002a10 <HAL_GPIO_Init+0x2ac>)
 80027c6:	4293      	cmp	r3, r2
 80027c8:	d863      	bhi.n	8002892 <HAL_GPIO_Init+0x12e>
 80027ca:	4a92      	ldr	r2, [pc, #584]	; (8002a14 <HAL_GPIO_Init+0x2b0>)
 80027cc:	4293      	cmp	r3, r2
 80027ce:	d046      	beq.n	800285e <HAL_GPIO_Init+0xfa>
 80027d0:	4a90      	ldr	r2, [pc, #576]	; (8002a14 <HAL_GPIO_Init+0x2b0>)
 80027d2:	4293      	cmp	r3, r2
 80027d4:	d85d      	bhi.n	8002892 <HAL_GPIO_Init+0x12e>
 80027d6:	2b12      	cmp	r3, #18
 80027d8:	d82a      	bhi.n	8002830 <HAL_GPIO_Init+0xcc>
 80027da:	2b12      	cmp	r3, #18
 80027dc:	d859      	bhi.n	8002892 <HAL_GPIO_Init+0x12e>
 80027de:	a201      	add	r2, pc, #4	; (adr r2, 80027e4 <HAL_GPIO_Init+0x80>)
 80027e0:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80027e4:	0800285f 	.word	0x0800285f
 80027e8:	08002839 	.word	0x08002839
 80027ec:	0800284b 	.word	0x0800284b
 80027f0:	0800288d 	.word	0x0800288d
 80027f4:	08002893 	.word	0x08002893
 80027f8:	08002893 	.word	0x08002893
 80027fc:	08002893 	.word	0x08002893
 8002800:	08002893 	.word	0x08002893
 8002804:	08002893 	.word	0x08002893
 8002808:	08002893 	.word	0x08002893
 800280c:	08002893 	.word	0x08002893
 8002810:	08002893 	.word	0x08002893
 8002814:	08002893 	.word	0x08002893
 8002818:	08002893 	.word	0x08002893
 800281c:	08002893 	.word	0x08002893
 8002820:	08002893 	.word	0x08002893
 8002824:	08002893 	.word	0x08002893
 8002828:	08002841 	.word	0x08002841
 800282c:	08002855 	.word	0x08002855
 8002830:	4a79      	ldr	r2, [pc, #484]	; (8002a18 <HAL_GPIO_Init+0x2b4>)
 8002832:	4293      	cmp	r3, r2
 8002834:	d013      	beq.n	800285e <HAL_GPIO_Init+0xfa>
          config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_ANALOG;
          break;

        /* Parameters are checked with assert_param */
        default:
          break;
 8002836:	e02c      	b.n	8002892 <HAL_GPIO_Init+0x12e>
          config = GPIO_Init->Speed + GPIO_CR_CNF_GP_OUTPUT_PP;
 8002838:	683b      	ldr	r3, [r7, #0]
 800283a:	68db      	ldr	r3, [r3, #12]
 800283c:	623b      	str	r3, [r7, #32]
          break;
 800283e:	e029      	b.n	8002894 <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_GP_OUTPUT_OD;
 8002840:	683b      	ldr	r3, [r7, #0]
 8002842:	68db      	ldr	r3, [r3, #12]
 8002844:	3304      	adds	r3, #4
 8002846:	623b      	str	r3, [r7, #32]
          break;
 8002848:	e024      	b.n	8002894 <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_AF_OUTPUT_PP;
 800284a:	683b      	ldr	r3, [r7, #0]
 800284c:	68db      	ldr	r3, [r3, #12]
 800284e:	3308      	adds	r3, #8
 8002850:	623b      	str	r3, [r7, #32]
          break;
 8002852:	e01f      	b.n	8002894 <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_AF_OUTPUT_OD;
 8002854:	683b      	ldr	r3, [r7, #0]
 8002856:	68db      	ldr	r3, [r3, #12]
 8002858:	330c      	adds	r3, #12
 800285a:	623b      	str	r3, [r7, #32]
          break;
 800285c:	e01a      	b.n	8002894 <HAL_GPIO_Init+0x130>
          if (GPIO_Init->Pull == GPIO_NOPULL)
 800285e:	683b      	ldr	r3, [r7, #0]
 8002860:	689b      	ldr	r3, [r3, #8]
 8002862:	2b00      	cmp	r3, #0
 8002864:	d102      	bne.n	800286c <HAL_GPIO_Init+0x108>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_FLOATING;
 8002866:	2304      	movs	r3, #4
 8002868:	623b      	str	r3, [r7, #32]
          break;
 800286a:	e013      	b.n	8002894 <HAL_GPIO_Init+0x130>
          else if (GPIO_Init->Pull == GPIO_PULLUP)
 800286c:	683b      	ldr	r3, [r7, #0]
 800286e:	689b      	ldr	r3, [r3, #8]
 8002870:	2b01      	cmp	r3, #1
 8002872:	d105      	bne.n	8002880 <HAL_GPIO_Init+0x11c>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_PU_PD;
 8002874:	2308      	movs	r3, #8
 8002876:	623b      	str	r3, [r7, #32]
            GPIOx->BSRR = ioposition;
 8002878:	687b      	ldr	r3, [r7, #4]
 800287a:	69fa      	ldr	r2, [r7, #28]
 800287c:	611a      	str	r2, [r3, #16]
          break;
 800287e:	e009      	b.n	8002894 <HAL_GPIO_Init+0x130>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_PU_PD;
 8002880:	2308      	movs	r3, #8
 8002882:	623b      	str	r3, [r7, #32]
            GPIOx->BRR = ioposition;
 8002884:	687b      	ldr	r3, [r7, #4]
 8002886:	69fa      	ldr	r2, [r7, #28]
 8002888:	615a      	str	r2, [r3, #20]
          break;
 800288a:	e003      	b.n	8002894 <HAL_GPIO_Init+0x130>
          config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_ANALOG;
 800288c:	2300      	movs	r3, #0
 800288e:	623b      	str	r3, [r7, #32]
          break;
 8002890:	e000      	b.n	8002894 <HAL_GPIO_Init+0x130>
          break;
 8002892:	bf00      	nop
      }

      /* Check if the current bit belongs to first half or last half of the pin count number
       in order to address CRH or CRL register*/
      configregister = (iocurrent < GPIO_PIN_8) ? &GPIOx->CRL     : &GPIOx->CRH;
 8002894:	69bb      	ldr	r3, [r7, #24]
 8002896:	2bff      	cmp	r3, #255	; 0xff
 8002898:	d801      	bhi.n	800289e <HAL_GPIO_Init+0x13a>
 800289a:	687b      	ldr	r3, [r7, #4]
 800289c:	e001      	b.n	80028a2 <HAL_GPIO_Init+0x13e>
 800289e:	687b      	ldr	r3, [r7, #4]
 80028a0:	3304      	adds	r3, #4
 80028a2:	617b      	str	r3, [r7, #20]
      registeroffset = (iocurrent < GPIO_PIN_8) ? (position << 2u) : ((position - 8u) << 2u);
 80028a4:	69bb      	ldr	r3, [r7, #24]
 80028a6:	2bff      	cmp	r3, #255	; 0xff
 80028a8:	d802      	bhi.n	80028b0 <HAL_GPIO_Init+0x14c>
 80028aa:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80028ac:	009b      	lsls	r3, r3, #2
 80028ae:	e002      	b.n	80028b6 <HAL_GPIO_Init+0x152>
 80028b0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80028b2:	3b08      	subs	r3, #8
 80028b4:	009b      	lsls	r3, r3, #2
 80028b6:	613b      	str	r3, [r7, #16]

      /* Apply the new configuration of the pin to the register */
      MODIFY_REG((*configregister), ((GPIO_CRL_MODE0 | GPIO_CRL_CNF0) << registeroffset), (config << registeroffset));
 80028b8:	697b      	ldr	r3, [r7, #20]
 80028ba:	681a      	ldr	r2, [r3, #0]
 80028bc:	210f      	movs	r1, #15
 80028be:	693b      	ldr	r3, [r7, #16]
 80028c0:	fa01 f303 	lsl.w	r3, r1, r3
 80028c4:	43db      	mvns	r3, r3
 80028c6:	401a      	ands	r2, r3
 80028c8:	6a39      	ldr	r1, [r7, #32]
 80028ca:	693b      	ldr	r3, [r7, #16]
 80028cc:	fa01 f303 	lsl.w	r3, r1, r3
 80028d0:	431a      	orrs	r2, r3
 80028d2:	697b      	ldr	r3, [r7, #20]
 80028d4:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 80028d6:	683b      	ldr	r3, [r7, #0]
 80028d8:	685b      	ldr	r3, [r3, #4]
 80028da:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80028de:	2b00      	cmp	r3, #0
 80028e0:	f000 80b1 	beq.w	8002a46 <HAL_GPIO_Init+0x2e2>
      {
        /* Enable AFIO Clock */
        __HAL_RCC_AFIO_CLK_ENABLE();
 80028e4:	4b4d      	ldr	r3, [pc, #308]	; (8002a1c <HAL_GPIO_Init+0x2b8>)
 80028e6:	699b      	ldr	r3, [r3, #24]
 80028e8:	4a4c      	ldr	r2, [pc, #304]	; (8002a1c <HAL_GPIO_Init+0x2b8>)
 80028ea:	f043 0301 	orr.w	r3, r3, #1
 80028ee:	6193      	str	r3, [r2, #24]
 80028f0:	4b4a      	ldr	r3, [pc, #296]	; (8002a1c <HAL_GPIO_Init+0x2b8>)
 80028f2:	699b      	ldr	r3, [r3, #24]
 80028f4:	f003 0301 	and.w	r3, r3, #1
 80028f8:	60bb      	str	r3, [r7, #8]
 80028fa:	68bb      	ldr	r3, [r7, #8]
        temp = AFIO->EXTICR[position >> 2u];
 80028fc:	4a48      	ldr	r2, [pc, #288]	; (8002a20 <HAL_GPIO_Init+0x2bc>)
 80028fe:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002900:	089b      	lsrs	r3, r3, #2
 8002902:	3302      	adds	r3, #2
 8002904:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8002908:	60fb      	str	r3, [r7, #12]
        CLEAR_BIT(temp, (0x0Fu) << (4u * (position & 0x03u)));
 800290a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800290c:	f003 0303 	and.w	r3, r3, #3
 8002910:	009b      	lsls	r3, r3, #2
 8002912:	220f      	movs	r2, #15
 8002914:	fa02 f303 	lsl.w	r3, r2, r3
 8002918:	43db      	mvns	r3, r3
 800291a:	68fa      	ldr	r2, [r7, #12]
 800291c:	4013      	ands	r3, r2
 800291e:	60fb      	str	r3, [r7, #12]
        SET_BIT(temp, (GPIO_GET_INDEX(GPIOx)) << (4u * (position & 0x03u)));
 8002920:	687b      	ldr	r3, [r7, #4]
 8002922:	4a40      	ldr	r2, [pc, #256]	; (8002a24 <HAL_GPIO_Init+0x2c0>)
 8002924:	4293      	cmp	r3, r2
 8002926:	d013      	beq.n	8002950 <HAL_GPIO_Init+0x1ec>
 8002928:	687b      	ldr	r3, [r7, #4]
 800292a:	4a3f      	ldr	r2, [pc, #252]	; (8002a28 <HAL_GPIO_Init+0x2c4>)
 800292c:	4293      	cmp	r3, r2
 800292e:	d00d      	beq.n	800294c <HAL_GPIO_Init+0x1e8>
 8002930:	687b      	ldr	r3, [r7, #4]
 8002932:	4a3e      	ldr	r2, [pc, #248]	; (8002a2c <HAL_GPIO_Init+0x2c8>)
 8002934:	4293      	cmp	r3, r2
 8002936:	d007      	beq.n	8002948 <HAL_GPIO_Init+0x1e4>
 8002938:	687b      	ldr	r3, [r7, #4]
 800293a:	4a3d      	ldr	r2, [pc, #244]	; (8002a30 <HAL_GPIO_Init+0x2cc>)
 800293c:	4293      	cmp	r3, r2
 800293e:	d101      	bne.n	8002944 <HAL_GPIO_Init+0x1e0>
 8002940:	2303      	movs	r3, #3
 8002942:	e006      	b.n	8002952 <HAL_GPIO_Init+0x1ee>
 8002944:	2304      	movs	r3, #4
 8002946:	e004      	b.n	8002952 <HAL_GPIO_Init+0x1ee>
 8002948:	2302      	movs	r3, #2
 800294a:	e002      	b.n	8002952 <HAL_GPIO_Init+0x1ee>
 800294c:	2301      	movs	r3, #1
 800294e:	e000      	b.n	8002952 <HAL_GPIO_Init+0x1ee>
 8002950:	2300      	movs	r3, #0
 8002952:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8002954:	f002 0203 	and.w	r2, r2, #3
 8002958:	0092      	lsls	r2, r2, #2
 800295a:	4093      	lsls	r3, r2
 800295c:	68fa      	ldr	r2, [r7, #12]
 800295e:	4313      	orrs	r3, r2
 8002960:	60fb      	str	r3, [r7, #12]
        AFIO->EXTICR[position >> 2u] = temp;
 8002962:	492f      	ldr	r1, [pc, #188]	; (8002a20 <HAL_GPIO_Init+0x2bc>)
 8002964:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002966:	089b      	lsrs	r3, r3, #2
 8002968:	3302      	adds	r3, #2
 800296a:	68fa      	ldr	r2, [r7, #12]
 800296c:	f841 2023 	str.w	r2, [r1, r3, lsl #2]


        /* Configure the interrupt mask */
        if ((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 8002970:	683b      	ldr	r3, [r7, #0]
 8002972:	685b      	ldr	r3, [r3, #4]
 8002974:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8002978:	2b00      	cmp	r3, #0
 800297a:	d006      	beq.n	800298a <HAL_GPIO_Init+0x226>
        {
          SET_BIT(EXTI->IMR, iocurrent);
 800297c:	4b2d      	ldr	r3, [pc, #180]	; (8002a34 <HAL_GPIO_Init+0x2d0>)
 800297e:	681a      	ldr	r2, [r3, #0]
 8002980:	492c      	ldr	r1, [pc, #176]	; (8002a34 <HAL_GPIO_Init+0x2d0>)
 8002982:	69bb      	ldr	r3, [r7, #24]
 8002984:	4313      	orrs	r3, r2
 8002986:	600b      	str	r3, [r1, #0]
 8002988:	e006      	b.n	8002998 <HAL_GPIO_Init+0x234>
        }
        else
        {
          CLEAR_BIT(EXTI->IMR, iocurrent);
 800298a:	4b2a      	ldr	r3, [pc, #168]	; (8002a34 <HAL_GPIO_Init+0x2d0>)
 800298c:	681a      	ldr	r2, [r3, #0]
 800298e:	69bb      	ldr	r3, [r7, #24]
 8002990:	43db      	mvns	r3, r3
 8002992:	4928      	ldr	r1, [pc, #160]	; (8002a34 <HAL_GPIO_Init+0x2d0>)
 8002994:	4013      	ands	r3, r2
 8002996:	600b      	str	r3, [r1, #0]
        }

        /* Configure the event mask */
        if ((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 8002998:	683b      	ldr	r3, [r7, #0]
 800299a:	685b      	ldr	r3, [r3, #4]
 800299c:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80029a0:	2b00      	cmp	r3, #0
 80029a2:	d006      	beq.n	80029b2 <HAL_GPIO_Init+0x24e>
        {
          SET_BIT(EXTI->EMR, iocurrent);
 80029a4:	4b23      	ldr	r3, [pc, #140]	; (8002a34 <HAL_GPIO_Init+0x2d0>)
 80029a6:	685a      	ldr	r2, [r3, #4]
 80029a8:	4922      	ldr	r1, [pc, #136]	; (8002a34 <HAL_GPIO_Init+0x2d0>)
 80029aa:	69bb      	ldr	r3, [r7, #24]
 80029ac:	4313      	orrs	r3, r2
 80029ae:	604b      	str	r3, [r1, #4]
 80029b0:	e006      	b.n	80029c0 <HAL_GPIO_Init+0x25c>
        }
        else
        {
          CLEAR_BIT(EXTI->EMR, iocurrent);
 80029b2:	4b20      	ldr	r3, [pc, #128]	; (8002a34 <HAL_GPIO_Init+0x2d0>)
 80029b4:	685a      	ldr	r2, [r3, #4]
 80029b6:	69bb      	ldr	r3, [r7, #24]
 80029b8:	43db      	mvns	r3, r3
 80029ba:	491e      	ldr	r1, [pc, #120]	; (8002a34 <HAL_GPIO_Init+0x2d0>)
 80029bc:	4013      	ands	r3, r2
 80029be:	604b      	str	r3, [r1, #4]
        }

        /* Enable or disable the rising trigger */
        if ((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 80029c0:	683b      	ldr	r3, [r7, #0]
 80029c2:	685b      	ldr	r3, [r3, #4]
 80029c4:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 80029c8:	2b00      	cmp	r3, #0
 80029ca:	d006      	beq.n	80029da <HAL_GPIO_Init+0x276>
        {
          SET_BIT(EXTI->RTSR, iocurrent);
 80029cc:	4b19      	ldr	r3, [pc, #100]	; (8002a34 <HAL_GPIO_Init+0x2d0>)
 80029ce:	689a      	ldr	r2, [r3, #8]
 80029d0:	4918      	ldr	r1, [pc, #96]	; (8002a34 <HAL_GPIO_Init+0x2d0>)
 80029d2:	69bb      	ldr	r3, [r7, #24]
 80029d4:	4313      	orrs	r3, r2
 80029d6:	608b      	str	r3, [r1, #8]
 80029d8:	e006      	b.n	80029e8 <HAL_GPIO_Init+0x284>
        }
        else
        {
          CLEAR_BIT(EXTI->RTSR, iocurrent);
 80029da:	4b16      	ldr	r3, [pc, #88]	; (8002a34 <HAL_GPIO_Init+0x2d0>)
 80029dc:	689a      	ldr	r2, [r3, #8]
 80029de:	69bb      	ldr	r3, [r7, #24]
 80029e0:	43db      	mvns	r3, r3
 80029e2:	4914      	ldr	r1, [pc, #80]	; (8002a34 <HAL_GPIO_Init+0x2d0>)
 80029e4:	4013      	ands	r3, r2
 80029e6:	608b      	str	r3, [r1, #8]
        }

        /* Enable or disable the falling trigger */
        if ((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 80029e8:	683b      	ldr	r3, [r7, #0]
 80029ea:	685b      	ldr	r3, [r3, #4]
 80029ec:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 80029f0:	2b00      	cmp	r3, #0
 80029f2:	d021      	beq.n	8002a38 <HAL_GPIO_Init+0x2d4>
        {
          SET_BIT(EXTI->FTSR, iocurrent);
 80029f4:	4b0f      	ldr	r3, [pc, #60]	; (8002a34 <HAL_GPIO_Init+0x2d0>)
 80029f6:	68da      	ldr	r2, [r3, #12]
 80029f8:	490e      	ldr	r1, [pc, #56]	; (8002a34 <HAL_GPIO_Init+0x2d0>)
 80029fa:	69bb      	ldr	r3, [r7, #24]
 80029fc:	4313      	orrs	r3, r2
 80029fe:	60cb      	str	r3, [r1, #12]
 8002a00:	e021      	b.n	8002a46 <HAL_GPIO_Init+0x2e2>
 8002a02:	bf00      	nop
 8002a04:	10320000 	.word	0x10320000
 8002a08:	10310000 	.word	0x10310000
 8002a0c:	10220000 	.word	0x10220000
 8002a10:	10210000 	.word	0x10210000
 8002a14:	10120000 	.word	0x10120000
 8002a18:	10110000 	.word	0x10110000
 8002a1c:	40021000 	.word	0x40021000
 8002a20:	40010000 	.word	0x40010000
 8002a24:	40010800 	.word	0x40010800
 8002a28:	40010c00 	.word	0x40010c00
 8002a2c:	40011000 	.word	0x40011000
 8002a30:	40011400 	.word	0x40011400
 8002a34:	40010400 	.word	0x40010400
        }
        else
        {
          CLEAR_BIT(EXTI->FTSR, iocurrent);
 8002a38:	4b0b      	ldr	r3, [pc, #44]	; (8002a68 <HAL_GPIO_Init+0x304>)
 8002a3a:	68da      	ldr	r2, [r3, #12]
 8002a3c:	69bb      	ldr	r3, [r7, #24]
 8002a3e:	43db      	mvns	r3, r3
 8002a40:	4909      	ldr	r1, [pc, #36]	; (8002a68 <HAL_GPIO_Init+0x304>)
 8002a42:	4013      	ands	r3, r2
 8002a44:	60cb      	str	r3, [r1, #12]
        }
      }
    }

	position++;
 8002a46:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002a48:	3301      	adds	r3, #1
 8002a4a:	627b      	str	r3, [r7, #36]	; 0x24
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8002a4c:	683b      	ldr	r3, [r7, #0]
 8002a4e:	681a      	ldr	r2, [r3, #0]
 8002a50:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002a52:	fa22 f303 	lsr.w	r3, r2, r3
 8002a56:	2b00      	cmp	r3, #0
 8002a58:	f47f ae8e 	bne.w	8002778 <HAL_GPIO_Init+0x14>
  }
}
 8002a5c:	bf00      	nop
 8002a5e:	bf00      	nop
 8002a60:	372c      	adds	r7, #44	; 0x2c
 8002a62:	46bd      	mov	sp, r7
 8002a64:	bc80      	pop	{r7}
 8002a66:	4770      	bx	lr
 8002a68:	40010400 	.word	0x40010400

08002a6c <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8002a6c:	b580      	push	{r7, lr}
 8002a6e:	b086      	sub	sp, #24
 8002a70:	af00      	add	r7, sp, #0
 8002a72:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t pll_config;

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 8002a74:	687b      	ldr	r3, [r7, #4]
 8002a76:	2b00      	cmp	r3, #0
 8002a78:	d101      	bne.n	8002a7e <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8002a7a:	2301      	movs	r3, #1
 8002a7c:	e272      	b.n	8002f64 <HAL_RCC_OscConfig+0x4f8>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8002a7e:	687b      	ldr	r3, [r7, #4]
 8002a80:	681b      	ldr	r3, [r3, #0]
 8002a82:	f003 0301 	and.w	r3, r3, #1
 8002a86:	2b00      	cmp	r3, #0
 8002a88:	f000 8087 	beq.w	8002b9a <HAL_RCC_OscConfig+0x12e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSE)
 8002a8c:	4b92      	ldr	r3, [pc, #584]	; (8002cd8 <HAL_RCC_OscConfig+0x26c>)
 8002a8e:	685b      	ldr	r3, [r3, #4]
 8002a90:	f003 030c 	and.w	r3, r3, #12
 8002a94:	2b04      	cmp	r3, #4
 8002a96:	d00c      	beq.n	8002ab2 <HAL_RCC_OscConfig+0x46>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSE)))
 8002a98:	4b8f      	ldr	r3, [pc, #572]	; (8002cd8 <HAL_RCC_OscConfig+0x26c>)
 8002a9a:	685b      	ldr	r3, [r3, #4]
 8002a9c:	f003 030c 	and.w	r3, r3, #12
 8002aa0:	2b08      	cmp	r3, #8
 8002aa2:	d112      	bne.n	8002aca <HAL_RCC_OscConfig+0x5e>
 8002aa4:	4b8c      	ldr	r3, [pc, #560]	; (8002cd8 <HAL_RCC_OscConfig+0x26c>)
 8002aa6:	685b      	ldr	r3, [r3, #4]
 8002aa8:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8002aac:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8002ab0:	d10b      	bne.n	8002aca <HAL_RCC_OscConfig+0x5e>
    {
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8002ab2:	4b89      	ldr	r3, [pc, #548]	; (8002cd8 <HAL_RCC_OscConfig+0x26c>)
 8002ab4:	681b      	ldr	r3, [r3, #0]
 8002ab6:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002aba:	2b00      	cmp	r3, #0
 8002abc:	d06c      	beq.n	8002b98 <HAL_RCC_OscConfig+0x12c>
 8002abe:	687b      	ldr	r3, [r7, #4]
 8002ac0:	685b      	ldr	r3, [r3, #4]
 8002ac2:	2b00      	cmp	r3, #0
 8002ac4:	d168      	bne.n	8002b98 <HAL_RCC_OscConfig+0x12c>
      {
        return HAL_ERROR;
 8002ac6:	2301      	movs	r3, #1
 8002ac8:	e24c      	b.n	8002f64 <HAL_RCC_OscConfig+0x4f8>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8002aca:	687b      	ldr	r3, [r7, #4]
 8002acc:	685b      	ldr	r3, [r3, #4]
 8002ace:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8002ad2:	d106      	bne.n	8002ae2 <HAL_RCC_OscConfig+0x76>
 8002ad4:	4b80      	ldr	r3, [pc, #512]	; (8002cd8 <HAL_RCC_OscConfig+0x26c>)
 8002ad6:	681b      	ldr	r3, [r3, #0]
 8002ad8:	4a7f      	ldr	r2, [pc, #508]	; (8002cd8 <HAL_RCC_OscConfig+0x26c>)
 8002ada:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8002ade:	6013      	str	r3, [r2, #0]
 8002ae0:	e02e      	b.n	8002b40 <HAL_RCC_OscConfig+0xd4>
 8002ae2:	687b      	ldr	r3, [r7, #4]
 8002ae4:	685b      	ldr	r3, [r3, #4]
 8002ae6:	2b00      	cmp	r3, #0
 8002ae8:	d10c      	bne.n	8002b04 <HAL_RCC_OscConfig+0x98>
 8002aea:	4b7b      	ldr	r3, [pc, #492]	; (8002cd8 <HAL_RCC_OscConfig+0x26c>)
 8002aec:	681b      	ldr	r3, [r3, #0]
 8002aee:	4a7a      	ldr	r2, [pc, #488]	; (8002cd8 <HAL_RCC_OscConfig+0x26c>)
 8002af0:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8002af4:	6013      	str	r3, [r2, #0]
 8002af6:	4b78      	ldr	r3, [pc, #480]	; (8002cd8 <HAL_RCC_OscConfig+0x26c>)
 8002af8:	681b      	ldr	r3, [r3, #0]
 8002afa:	4a77      	ldr	r2, [pc, #476]	; (8002cd8 <HAL_RCC_OscConfig+0x26c>)
 8002afc:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8002b00:	6013      	str	r3, [r2, #0]
 8002b02:	e01d      	b.n	8002b40 <HAL_RCC_OscConfig+0xd4>
 8002b04:	687b      	ldr	r3, [r7, #4]
 8002b06:	685b      	ldr	r3, [r3, #4]
 8002b08:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8002b0c:	d10c      	bne.n	8002b28 <HAL_RCC_OscConfig+0xbc>
 8002b0e:	4b72      	ldr	r3, [pc, #456]	; (8002cd8 <HAL_RCC_OscConfig+0x26c>)
 8002b10:	681b      	ldr	r3, [r3, #0]
 8002b12:	4a71      	ldr	r2, [pc, #452]	; (8002cd8 <HAL_RCC_OscConfig+0x26c>)
 8002b14:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8002b18:	6013      	str	r3, [r2, #0]
 8002b1a:	4b6f      	ldr	r3, [pc, #444]	; (8002cd8 <HAL_RCC_OscConfig+0x26c>)
 8002b1c:	681b      	ldr	r3, [r3, #0]
 8002b1e:	4a6e      	ldr	r2, [pc, #440]	; (8002cd8 <HAL_RCC_OscConfig+0x26c>)
 8002b20:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8002b24:	6013      	str	r3, [r2, #0]
 8002b26:	e00b      	b.n	8002b40 <HAL_RCC_OscConfig+0xd4>
 8002b28:	4b6b      	ldr	r3, [pc, #428]	; (8002cd8 <HAL_RCC_OscConfig+0x26c>)
 8002b2a:	681b      	ldr	r3, [r3, #0]
 8002b2c:	4a6a      	ldr	r2, [pc, #424]	; (8002cd8 <HAL_RCC_OscConfig+0x26c>)
 8002b2e:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8002b32:	6013      	str	r3, [r2, #0]
 8002b34:	4b68      	ldr	r3, [pc, #416]	; (8002cd8 <HAL_RCC_OscConfig+0x26c>)
 8002b36:	681b      	ldr	r3, [r3, #0]
 8002b38:	4a67      	ldr	r2, [pc, #412]	; (8002cd8 <HAL_RCC_OscConfig+0x26c>)
 8002b3a:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8002b3e:	6013      	str	r3, [r2, #0]


      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8002b40:	687b      	ldr	r3, [r7, #4]
 8002b42:	685b      	ldr	r3, [r3, #4]
 8002b44:	2b00      	cmp	r3, #0
 8002b46:	d013      	beq.n	8002b70 <HAL_RCC_OscConfig+0x104>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002b48:	f7ff fc44 	bl	80023d4 <HAL_GetTick>
 8002b4c:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8002b4e:	e008      	b.n	8002b62 <HAL_RCC_OscConfig+0xf6>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8002b50:	f7ff fc40 	bl	80023d4 <HAL_GetTick>
 8002b54:	4602      	mov	r2, r0
 8002b56:	693b      	ldr	r3, [r7, #16]
 8002b58:	1ad3      	subs	r3, r2, r3
 8002b5a:	2b64      	cmp	r3, #100	; 0x64
 8002b5c:	d901      	bls.n	8002b62 <HAL_RCC_OscConfig+0xf6>
          {
            return HAL_TIMEOUT;
 8002b5e:	2303      	movs	r3, #3
 8002b60:	e200      	b.n	8002f64 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8002b62:	4b5d      	ldr	r3, [pc, #372]	; (8002cd8 <HAL_RCC_OscConfig+0x26c>)
 8002b64:	681b      	ldr	r3, [r3, #0]
 8002b66:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002b6a:	2b00      	cmp	r3, #0
 8002b6c:	d0f0      	beq.n	8002b50 <HAL_RCC_OscConfig+0xe4>
 8002b6e:	e014      	b.n	8002b9a <HAL_RCC_OscConfig+0x12e>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002b70:	f7ff fc30 	bl	80023d4 <HAL_GetTick>
 8002b74:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8002b76:	e008      	b.n	8002b8a <HAL_RCC_OscConfig+0x11e>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8002b78:	f7ff fc2c 	bl	80023d4 <HAL_GetTick>
 8002b7c:	4602      	mov	r2, r0
 8002b7e:	693b      	ldr	r3, [r7, #16]
 8002b80:	1ad3      	subs	r3, r2, r3
 8002b82:	2b64      	cmp	r3, #100	; 0x64
 8002b84:	d901      	bls.n	8002b8a <HAL_RCC_OscConfig+0x11e>
          {
            return HAL_TIMEOUT;
 8002b86:	2303      	movs	r3, #3
 8002b88:	e1ec      	b.n	8002f64 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8002b8a:	4b53      	ldr	r3, [pc, #332]	; (8002cd8 <HAL_RCC_OscConfig+0x26c>)
 8002b8c:	681b      	ldr	r3, [r3, #0]
 8002b8e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002b92:	2b00      	cmp	r3, #0
 8002b94:	d1f0      	bne.n	8002b78 <HAL_RCC_OscConfig+0x10c>
 8002b96:	e000      	b.n	8002b9a <HAL_RCC_OscConfig+0x12e>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8002b98:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8002b9a:	687b      	ldr	r3, [r7, #4]
 8002b9c:	681b      	ldr	r3, [r3, #0]
 8002b9e:	f003 0302 	and.w	r3, r3, #2
 8002ba2:	2b00      	cmp	r3, #0
 8002ba4:	d063      	beq.n	8002c6e <HAL_RCC_OscConfig+0x202>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI)
 8002ba6:	4b4c      	ldr	r3, [pc, #304]	; (8002cd8 <HAL_RCC_OscConfig+0x26c>)
 8002ba8:	685b      	ldr	r3, [r3, #4]
 8002baa:	f003 030c 	and.w	r3, r3, #12
 8002bae:	2b00      	cmp	r3, #0
 8002bb0:	d00b      	beq.n	8002bca <HAL_RCC_OscConfig+0x15e>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSI_DIV2)))
 8002bb2:	4b49      	ldr	r3, [pc, #292]	; (8002cd8 <HAL_RCC_OscConfig+0x26c>)
 8002bb4:	685b      	ldr	r3, [r3, #4]
 8002bb6:	f003 030c 	and.w	r3, r3, #12
 8002bba:	2b08      	cmp	r3, #8
 8002bbc:	d11c      	bne.n	8002bf8 <HAL_RCC_OscConfig+0x18c>
 8002bbe:	4b46      	ldr	r3, [pc, #280]	; (8002cd8 <HAL_RCC_OscConfig+0x26c>)
 8002bc0:	685b      	ldr	r3, [r3, #4]
 8002bc2:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8002bc6:	2b00      	cmp	r3, #0
 8002bc8:	d116      	bne.n	8002bf8 <HAL_RCC_OscConfig+0x18c>
    {
      /* When HSI is used as system clock it will not disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8002bca:	4b43      	ldr	r3, [pc, #268]	; (8002cd8 <HAL_RCC_OscConfig+0x26c>)
 8002bcc:	681b      	ldr	r3, [r3, #0]
 8002bce:	f003 0302 	and.w	r3, r3, #2
 8002bd2:	2b00      	cmp	r3, #0
 8002bd4:	d005      	beq.n	8002be2 <HAL_RCC_OscConfig+0x176>
 8002bd6:	687b      	ldr	r3, [r7, #4]
 8002bd8:	691b      	ldr	r3, [r3, #16]
 8002bda:	2b01      	cmp	r3, #1
 8002bdc:	d001      	beq.n	8002be2 <HAL_RCC_OscConfig+0x176>
      {
        return HAL_ERROR;
 8002bde:	2301      	movs	r3, #1
 8002be0:	e1c0      	b.n	8002f64 <HAL_RCC_OscConfig+0x4f8>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8002be2:	4b3d      	ldr	r3, [pc, #244]	; (8002cd8 <HAL_RCC_OscConfig+0x26c>)
 8002be4:	681b      	ldr	r3, [r3, #0]
 8002be6:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8002bea:	687b      	ldr	r3, [r7, #4]
 8002bec:	695b      	ldr	r3, [r3, #20]
 8002bee:	00db      	lsls	r3, r3, #3
 8002bf0:	4939      	ldr	r1, [pc, #228]	; (8002cd8 <HAL_RCC_OscConfig+0x26c>)
 8002bf2:	4313      	orrs	r3, r2
 8002bf4:	600b      	str	r3, [r1, #0]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8002bf6:	e03a      	b.n	8002c6e <HAL_RCC_OscConfig+0x202>
      }
    }
    else
    {
      /* Check the HSI State */
      if (RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 8002bf8:	687b      	ldr	r3, [r7, #4]
 8002bfa:	691b      	ldr	r3, [r3, #16]
 8002bfc:	2b00      	cmp	r3, #0
 8002bfe:	d020      	beq.n	8002c42 <HAL_RCC_OscConfig+0x1d6>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8002c00:	4b36      	ldr	r3, [pc, #216]	; (8002cdc <HAL_RCC_OscConfig+0x270>)
 8002c02:	2201      	movs	r2, #1
 8002c04:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002c06:	f7ff fbe5 	bl	80023d4 <HAL_GetTick>
 8002c0a:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8002c0c:	e008      	b.n	8002c20 <HAL_RCC_OscConfig+0x1b4>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8002c0e:	f7ff fbe1 	bl	80023d4 <HAL_GetTick>
 8002c12:	4602      	mov	r2, r0
 8002c14:	693b      	ldr	r3, [r7, #16]
 8002c16:	1ad3      	subs	r3, r2, r3
 8002c18:	2b02      	cmp	r3, #2
 8002c1a:	d901      	bls.n	8002c20 <HAL_RCC_OscConfig+0x1b4>
          {
            return HAL_TIMEOUT;
 8002c1c:	2303      	movs	r3, #3
 8002c1e:	e1a1      	b.n	8002f64 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8002c20:	4b2d      	ldr	r3, [pc, #180]	; (8002cd8 <HAL_RCC_OscConfig+0x26c>)
 8002c22:	681b      	ldr	r3, [r3, #0]
 8002c24:	f003 0302 	and.w	r3, r3, #2
 8002c28:	2b00      	cmp	r3, #0
 8002c2a:	d0f0      	beq.n	8002c0e <HAL_RCC_OscConfig+0x1a2>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8002c2c:	4b2a      	ldr	r3, [pc, #168]	; (8002cd8 <HAL_RCC_OscConfig+0x26c>)
 8002c2e:	681b      	ldr	r3, [r3, #0]
 8002c30:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8002c34:	687b      	ldr	r3, [r7, #4]
 8002c36:	695b      	ldr	r3, [r3, #20]
 8002c38:	00db      	lsls	r3, r3, #3
 8002c3a:	4927      	ldr	r1, [pc, #156]	; (8002cd8 <HAL_RCC_OscConfig+0x26c>)
 8002c3c:	4313      	orrs	r3, r2
 8002c3e:	600b      	str	r3, [r1, #0]
 8002c40:	e015      	b.n	8002c6e <HAL_RCC_OscConfig+0x202>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8002c42:	4b26      	ldr	r3, [pc, #152]	; (8002cdc <HAL_RCC_OscConfig+0x270>)
 8002c44:	2200      	movs	r2, #0
 8002c46:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002c48:	f7ff fbc4 	bl	80023d4 <HAL_GetTick>
 8002c4c:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8002c4e:	e008      	b.n	8002c62 <HAL_RCC_OscConfig+0x1f6>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8002c50:	f7ff fbc0 	bl	80023d4 <HAL_GetTick>
 8002c54:	4602      	mov	r2, r0
 8002c56:	693b      	ldr	r3, [r7, #16]
 8002c58:	1ad3      	subs	r3, r2, r3
 8002c5a:	2b02      	cmp	r3, #2
 8002c5c:	d901      	bls.n	8002c62 <HAL_RCC_OscConfig+0x1f6>
          {
            return HAL_TIMEOUT;
 8002c5e:	2303      	movs	r3, #3
 8002c60:	e180      	b.n	8002f64 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8002c62:	4b1d      	ldr	r3, [pc, #116]	; (8002cd8 <HAL_RCC_OscConfig+0x26c>)
 8002c64:	681b      	ldr	r3, [r3, #0]
 8002c66:	f003 0302 	and.w	r3, r3, #2
 8002c6a:	2b00      	cmp	r3, #0
 8002c6c:	d1f0      	bne.n	8002c50 <HAL_RCC_OscConfig+0x1e4>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8002c6e:	687b      	ldr	r3, [r7, #4]
 8002c70:	681b      	ldr	r3, [r3, #0]
 8002c72:	f003 0308 	and.w	r3, r3, #8
 8002c76:	2b00      	cmp	r3, #0
 8002c78:	d03a      	beq.n	8002cf0 <HAL_RCC_OscConfig+0x284>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if (RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 8002c7a:	687b      	ldr	r3, [r7, #4]
 8002c7c:	699b      	ldr	r3, [r3, #24]
 8002c7e:	2b00      	cmp	r3, #0
 8002c80:	d019      	beq.n	8002cb6 <HAL_RCC_OscConfig+0x24a>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8002c82:	4b17      	ldr	r3, [pc, #92]	; (8002ce0 <HAL_RCC_OscConfig+0x274>)
 8002c84:	2201      	movs	r2, #1
 8002c86:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8002c88:	f7ff fba4 	bl	80023d4 <HAL_GetTick>
 8002c8c:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8002c8e:	e008      	b.n	8002ca2 <HAL_RCC_OscConfig+0x236>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8002c90:	f7ff fba0 	bl	80023d4 <HAL_GetTick>
 8002c94:	4602      	mov	r2, r0
 8002c96:	693b      	ldr	r3, [r7, #16]
 8002c98:	1ad3      	subs	r3, r2, r3
 8002c9a:	2b02      	cmp	r3, #2
 8002c9c:	d901      	bls.n	8002ca2 <HAL_RCC_OscConfig+0x236>
        {
          return HAL_TIMEOUT;
 8002c9e:	2303      	movs	r3, #3
 8002ca0:	e160      	b.n	8002f64 <HAL_RCC_OscConfig+0x4f8>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8002ca2:	4b0d      	ldr	r3, [pc, #52]	; (8002cd8 <HAL_RCC_OscConfig+0x26c>)
 8002ca4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002ca6:	f003 0302 	and.w	r3, r3, #2
 8002caa:	2b00      	cmp	r3, #0
 8002cac:	d0f0      	beq.n	8002c90 <HAL_RCC_OscConfig+0x224>
        }
      }
      /*  To have a fully stabilized clock in the specified range, a software delay of 1ms
          should be added.*/
      RCC_Delay(1);
 8002cae:	2001      	movs	r0, #1
 8002cb0:	f000 fad8 	bl	8003264 <RCC_Delay>
 8002cb4:	e01c      	b.n	8002cf0 <HAL_RCC_OscConfig+0x284>
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8002cb6:	4b0a      	ldr	r3, [pc, #40]	; (8002ce0 <HAL_RCC_OscConfig+0x274>)
 8002cb8:	2200      	movs	r2, #0
 8002cba:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8002cbc:	f7ff fb8a 	bl	80023d4 <HAL_GetTick>
 8002cc0:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is disabled */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8002cc2:	e00f      	b.n	8002ce4 <HAL_RCC_OscConfig+0x278>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8002cc4:	f7ff fb86 	bl	80023d4 <HAL_GetTick>
 8002cc8:	4602      	mov	r2, r0
 8002cca:	693b      	ldr	r3, [r7, #16]
 8002ccc:	1ad3      	subs	r3, r2, r3
 8002cce:	2b02      	cmp	r3, #2
 8002cd0:	d908      	bls.n	8002ce4 <HAL_RCC_OscConfig+0x278>
        {
          return HAL_TIMEOUT;
 8002cd2:	2303      	movs	r3, #3
 8002cd4:	e146      	b.n	8002f64 <HAL_RCC_OscConfig+0x4f8>
 8002cd6:	bf00      	nop
 8002cd8:	40021000 	.word	0x40021000
 8002cdc:	42420000 	.word	0x42420000
 8002ce0:	42420480 	.word	0x42420480
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8002ce4:	4b92      	ldr	r3, [pc, #584]	; (8002f30 <HAL_RCC_OscConfig+0x4c4>)
 8002ce6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002ce8:	f003 0302 	and.w	r3, r3, #2
 8002cec:	2b00      	cmp	r3, #0
 8002cee:	d1e9      	bne.n	8002cc4 <HAL_RCC_OscConfig+0x258>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8002cf0:	687b      	ldr	r3, [r7, #4]
 8002cf2:	681b      	ldr	r3, [r3, #0]
 8002cf4:	f003 0304 	and.w	r3, r3, #4
 8002cf8:	2b00      	cmp	r3, #0
 8002cfa:	f000 80a6 	beq.w	8002e4a <HAL_RCC_OscConfig+0x3de>
  {
    FlagStatus       pwrclkchanged = RESET;
 8002cfe:	2300      	movs	r3, #0
 8002d00:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 8002d02:	4b8b      	ldr	r3, [pc, #556]	; (8002f30 <HAL_RCC_OscConfig+0x4c4>)
 8002d04:	69db      	ldr	r3, [r3, #28]
 8002d06:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002d0a:	2b00      	cmp	r3, #0
 8002d0c:	d10d      	bne.n	8002d2a <HAL_RCC_OscConfig+0x2be>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8002d0e:	4b88      	ldr	r3, [pc, #544]	; (8002f30 <HAL_RCC_OscConfig+0x4c4>)
 8002d10:	69db      	ldr	r3, [r3, #28]
 8002d12:	4a87      	ldr	r2, [pc, #540]	; (8002f30 <HAL_RCC_OscConfig+0x4c4>)
 8002d14:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8002d18:	61d3      	str	r3, [r2, #28]
 8002d1a:	4b85      	ldr	r3, [pc, #532]	; (8002f30 <HAL_RCC_OscConfig+0x4c4>)
 8002d1c:	69db      	ldr	r3, [r3, #28]
 8002d1e:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002d22:	60bb      	str	r3, [r7, #8]
 8002d24:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8002d26:	2301      	movs	r3, #1
 8002d28:	75fb      	strb	r3, [r7, #23]
    }

    if (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8002d2a:	4b82      	ldr	r3, [pc, #520]	; (8002f34 <HAL_RCC_OscConfig+0x4c8>)
 8002d2c:	681b      	ldr	r3, [r3, #0]
 8002d2e:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002d32:	2b00      	cmp	r3, #0
 8002d34:	d118      	bne.n	8002d68 <HAL_RCC_OscConfig+0x2fc>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8002d36:	4b7f      	ldr	r3, [pc, #508]	; (8002f34 <HAL_RCC_OscConfig+0x4c8>)
 8002d38:	681b      	ldr	r3, [r3, #0]
 8002d3a:	4a7e      	ldr	r2, [pc, #504]	; (8002f34 <HAL_RCC_OscConfig+0x4c8>)
 8002d3c:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8002d40:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8002d42:	f7ff fb47 	bl	80023d4 <HAL_GetTick>
 8002d46:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8002d48:	e008      	b.n	8002d5c <HAL_RCC_OscConfig+0x2f0>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8002d4a:	f7ff fb43 	bl	80023d4 <HAL_GetTick>
 8002d4e:	4602      	mov	r2, r0
 8002d50:	693b      	ldr	r3, [r7, #16]
 8002d52:	1ad3      	subs	r3, r2, r3
 8002d54:	2b64      	cmp	r3, #100	; 0x64
 8002d56:	d901      	bls.n	8002d5c <HAL_RCC_OscConfig+0x2f0>
        {
          return HAL_TIMEOUT;
 8002d58:	2303      	movs	r3, #3
 8002d5a:	e103      	b.n	8002f64 <HAL_RCC_OscConfig+0x4f8>
      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8002d5c:	4b75      	ldr	r3, [pc, #468]	; (8002f34 <HAL_RCC_OscConfig+0x4c8>)
 8002d5e:	681b      	ldr	r3, [r3, #0]
 8002d60:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002d64:	2b00      	cmp	r3, #0
 8002d66:	d0f0      	beq.n	8002d4a <HAL_RCC_OscConfig+0x2de>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8002d68:	687b      	ldr	r3, [r7, #4]
 8002d6a:	68db      	ldr	r3, [r3, #12]
 8002d6c:	2b01      	cmp	r3, #1
 8002d6e:	d106      	bne.n	8002d7e <HAL_RCC_OscConfig+0x312>
 8002d70:	4b6f      	ldr	r3, [pc, #444]	; (8002f30 <HAL_RCC_OscConfig+0x4c4>)
 8002d72:	6a1b      	ldr	r3, [r3, #32]
 8002d74:	4a6e      	ldr	r2, [pc, #440]	; (8002f30 <HAL_RCC_OscConfig+0x4c4>)
 8002d76:	f043 0301 	orr.w	r3, r3, #1
 8002d7a:	6213      	str	r3, [r2, #32]
 8002d7c:	e02d      	b.n	8002dda <HAL_RCC_OscConfig+0x36e>
 8002d7e:	687b      	ldr	r3, [r7, #4]
 8002d80:	68db      	ldr	r3, [r3, #12]
 8002d82:	2b00      	cmp	r3, #0
 8002d84:	d10c      	bne.n	8002da0 <HAL_RCC_OscConfig+0x334>
 8002d86:	4b6a      	ldr	r3, [pc, #424]	; (8002f30 <HAL_RCC_OscConfig+0x4c4>)
 8002d88:	6a1b      	ldr	r3, [r3, #32]
 8002d8a:	4a69      	ldr	r2, [pc, #420]	; (8002f30 <HAL_RCC_OscConfig+0x4c4>)
 8002d8c:	f023 0301 	bic.w	r3, r3, #1
 8002d90:	6213      	str	r3, [r2, #32]
 8002d92:	4b67      	ldr	r3, [pc, #412]	; (8002f30 <HAL_RCC_OscConfig+0x4c4>)
 8002d94:	6a1b      	ldr	r3, [r3, #32]
 8002d96:	4a66      	ldr	r2, [pc, #408]	; (8002f30 <HAL_RCC_OscConfig+0x4c4>)
 8002d98:	f023 0304 	bic.w	r3, r3, #4
 8002d9c:	6213      	str	r3, [r2, #32]
 8002d9e:	e01c      	b.n	8002dda <HAL_RCC_OscConfig+0x36e>
 8002da0:	687b      	ldr	r3, [r7, #4]
 8002da2:	68db      	ldr	r3, [r3, #12]
 8002da4:	2b05      	cmp	r3, #5
 8002da6:	d10c      	bne.n	8002dc2 <HAL_RCC_OscConfig+0x356>
 8002da8:	4b61      	ldr	r3, [pc, #388]	; (8002f30 <HAL_RCC_OscConfig+0x4c4>)
 8002daa:	6a1b      	ldr	r3, [r3, #32]
 8002dac:	4a60      	ldr	r2, [pc, #384]	; (8002f30 <HAL_RCC_OscConfig+0x4c4>)
 8002dae:	f043 0304 	orr.w	r3, r3, #4
 8002db2:	6213      	str	r3, [r2, #32]
 8002db4:	4b5e      	ldr	r3, [pc, #376]	; (8002f30 <HAL_RCC_OscConfig+0x4c4>)
 8002db6:	6a1b      	ldr	r3, [r3, #32]
 8002db8:	4a5d      	ldr	r2, [pc, #372]	; (8002f30 <HAL_RCC_OscConfig+0x4c4>)
 8002dba:	f043 0301 	orr.w	r3, r3, #1
 8002dbe:	6213      	str	r3, [r2, #32]
 8002dc0:	e00b      	b.n	8002dda <HAL_RCC_OscConfig+0x36e>
 8002dc2:	4b5b      	ldr	r3, [pc, #364]	; (8002f30 <HAL_RCC_OscConfig+0x4c4>)
 8002dc4:	6a1b      	ldr	r3, [r3, #32]
 8002dc6:	4a5a      	ldr	r2, [pc, #360]	; (8002f30 <HAL_RCC_OscConfig+0x4c4>)
 8002dc8:	f023 0301 	bic.w	r3, r3, #1
 8002dcc:	6213      	str	r3, [r2, #32]
 8002dce:	4b58      	ldr	r3, [pc, #352]	; (8002f30 <HAL_RCC_OscConfig+0x4c4>)
 8002dd0:	6a1b      	ldr	r3, [r3, #32]
 8002dd2:	4a57      	ldr	r2, [pc, #348]	; (8002f30 <HAL_RCC_OscConfig+0x4c4>)
 8002dd4:	f023 0304 	bic.w	r3, r3, #4
 8002dd8:	6213      	str	r3, [r2, #32]
    /* Check the LSE State */
    if (RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 8002dda:	687b      	ldr	r3, [r7, #4]
 8002ddc:	68db      	ldr	r3, [r3, #12]
 8002dde:	2b00      	cmp	r3, #0
 8002de0:	d015      	beq.n	8002e0e <HAL_RCC_OscConfig+0x3a2>
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8002de2:	f7ff faf7 	bl	80023d4 <HAL_GetTick>
 8002de6:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8002de8:	e00a      	b.n	8002e00 <HAL_RCC_OscConfig+0x394>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8002dea:	f7ff faf3 	bl	80023d4 <HAL_GetTick>
 8002dee:	4602      	mov	r2, r0
 8002df0:	693b      	ldr	r3, [r7, #16]
 8002df2:	1ad3      	subs	r3, r2, r3
 8002df4:	f241 3288 	movw	r2, #5000	; 0x1388
 8002df8:	4293      	cmp	r3, r2
 8002dfa:	d901      	bls.n	8002e00 <HAL_RCC_OscConfig+0x394>
        {
          return HAL_TIMEOUT;
 8002dfc:	2303      	movs	r3, #3
 8002dfe:	e0b1      	b.n	8002f64 <HAL_RCC_OscConfig+0x4f8>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8002e00:	4b4b      	ldr	r3, [pc, #300]	; (8002f30 <HAL_RCC_OscConfig+0x4c4>)
 8002e02:	6a1b      	ldr	r3, [r3, #32]
 8002e04:	f003 0302 	and.w	r3, r3, #2
 8002e08:	2b00      	cmp	r3, #0
 8002e0a:	d0ee      	beq.n	8002dea <HAL_RCC_OscConfig+0x37e>
 8002e0c:	e014      	b.n	8002e38 <HAL_RCC_OscConfig+0x3cc>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8002e0e:	f7ff fae1 	bl	80023d4 <HAL_GetTick>
 8002e12:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is disabled */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8002e14:	e00a      	b.n	8002e2c <HAL_RCC_OscConfig+0x3c0>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8002e16:	f7ff fadd 	bl	80023d4 <HAL_GetTick>
 8002e1a:	4602      	mov	r2, r0
 8002e1c:	693b      	ldr	r3, [r7, #16]
 8002e1e:	1ad3      	subs	r3, r2, r3
 8002e20:	f241 3288 	movw	r2, #5000	; 0x1388
 8002e24:	4293      	cmp	r3, r2
 8002e26:	d901      	bls.n	8002e2c <HAL_RCC_OscConfig+0x3c0>
        {
          return HAL_TIMEOUT;
 8002e28:	2303      	movs	r3, #3
 8002e2a:	e09b      	b.n	8002f64 <HAL_RCC_OscConfig+0x4f8>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8002e2c:	4b40      	ldr	r3, [pc, #256]	; (8002f30 <HAL_RCC_OscConfig+0x4c4>)
 8002e2e:	6a1b      	ldr	r3, [r3, #32]
 8002e30:	f003 0302 	and.w	r3, r3, #2
 8002e34:	2b00      	cmp	r3, #0
 8002e36:	d1ee      	bne.n	8002e16 <HAL_RCC_OscConfig+0x3aa>
        }
      }
    }

    /* Require to disable power clock if necessary */
    if (pwrclkchanged == SET)
 8002e38:	7dfb      	ldrb	r3, [r7, #23]
 8002e3a:	2b01      	cmp	r3, #1
 8002e3c:	d105      	bne.n	8002e4a <HAL_RCC_OscConfig+0x3de>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8002e3e:	4b3c      	ldr	r3, [pc, #240]	; (8002f30 <HAL_RCC_OscConfig+0x4c4>)
 8002e40:	69db      	ldr	r3, [r3, #28]
 8002e42:	4a3b      	ldr	r2, [pc, #236]	; (8002f30 <HAL_RCC_OscConfig+0x4c4>)
 8002e44:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8002e48:	61d3      	str	r3, [r2, #28]

#endif /* RCC_CR_PLL2ON */
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8002e4a:	687b      	ldr	r3, [r7, #4]
 8002e4c:	69db      	ldr	r3, [r3, #28]
 8002e4e:	2b00      	cmp	r3, #0
 8002e50:	f000 8087 	beq.w	8002f62 <HAL_RCC_OscConfig+0x4f6>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8002e54:	4b36      	ldr	r3, [pc, #216]	; (8002f30 <HAL_RCC_OscConfig+0x4c4>)
 8002e56:	685b      	ldr	r3, [r3, #4]
 8002e58:	f003 030c 	and.w	r3, r3, #12
 8002e5c:	2b08      	cmp	r3, #8
 8002e5e:	d061      	beq.n	8002f24 <HAL_RCC_OscConfig+0x4b8>
    {
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8002e60:	687b      	ldr	r3, [r7, #4]
 8002e62:	69db      	ldr	r3, [r3, #28]
 8002e64:	2b02      	cmp	r3, #2
 8002e66:	d146      	bne.n	8002ef6 <HAL_RCC_OscConfig+0x48a>
        /* Check the parameters */
        assert_param(IS_RCC_PLLSOURCE(RCC_OscInitStruct->PLL.PLLSource));
        assert_param(IS_RCC_PLL_MUL(RCC_OscInitStruct->PLL.PLLMUL));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8002e68:	4b33      	ldr	r3, [pc, #204]	; (8002f38 <HAL_RCC_OscConfig+0x4cc>)
 8002e6a:	2200      	movs	r2, #0
 8002e6c:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002e6e:	f7ff fab1 	bl	80023d4 <HAL_GetTick>
 8002e72:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8002e74:	e008      	b.n	8002e88 <HAL_RCC_OscConfig+0x41c>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8002e76:	f7ff faad 	bl	80023d4 <HAL_GetTick>
 8002e7a:	4602      	mov	r2, r0
 8002e7c:	693b      	ldr	r3, [r7, #16]
 8002e7e:	1ad3      	subs	r3, r2, r3
 8002e80:	2b02      	cmp	r3, #2
 8002e82:	d901      	bls.n	8002e88 <HAL_RCC_OscConfig+0x41c>
          {
            return HAL_TIMEOUT;
 8002e84:	2303      	movs	r3, #3
 8002e86:	e06d      	b.n	8002f64 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8002e88:	4b29      	ldr	r3, [pc, #164]	; (8002f30 <HAL_RCC_OscConfig+0x4c4>)
 8002e8a:	681b      	ldr	r3, [r3, #0]
 8002e8c:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002e90:	2b00      	cmp	r3, #0
 8002e92:	d1f0      	bne.n	8002e76 <HAL_RCC_OscConfig+0x40a>
          }
        }

        /* Configure the HSE prediv factor --------------------------------*/
        /* It can be written only when the PLL is disabled. Not used in PLL source is different than HSE */
        if (RCC_OscInitStruct->PLL.PLLSource == RCC_PLLSOURCE_HSE)
 8002e94:	687b      	ldr	r3, [r7, #4]
 8002e96:	6a1b      	ldr	r3, [r3, #32]
 8002e98:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8002e9c:	d108      	bne.n	8002eb0 <HAL_RCC_OscConfig+0x444>
          /* Set PREDIV1 source */
          SET_BIT(RCC->CFGR2, RCC_OscInitStruct->Prediv1Source);
#endif /* RCC_CFGR2_PREDIV1SRC */

          /* Set PREDIV1 Value */
          __HAL_RCC_HSE_PREDIV_CONFIG(RCC_OscInitStruct->HSEPredivValue);
 8002e9e:	4b24      	ldr	r3, [pc, #144]	; (8002f30 <HAL_RCC_OscConfig+0x4c4>)
 8002ea0:	685b      	ldr	r3, [r3, #4]
 8002ea2:	f423 3200 	bic.w	r2, r3, #131072	; 0x20000
 8002ea6:	687b      	ldr	r3, [r7, #4]
 8002ea8:	689b      	ldr	r3, [r3, #8]
 8002eaa:	4921      	ldr	r1, [pc, #132]	; (8002f30 <HAL_RCC_OscConfig+0x4c4>)
 8002eac:	4313      	orrs	r3, r2
 8002eae:	604b      	str	r3, [r1, #4]
        }

        /* Configure the main PLL clock source and multiplication factors. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8002eb0:	4b1f      	ldr	r3, [pc, #124]	; (8002f30 <HAL_RCC_OscConfig+0x4c4>)
 8002eb2:	685b      	ldr	r3, [r3, #4]
 8002eb4:	f423 1274 	bic.w	r2, r3, #3997696	; 0x3d0000
 8002eb8:	687b      	ldr	r3, [r7, #4]
 8002eba:	6a19      	ldr	r1, [r3, #32]
 8002ebc:	687b      	ldr	r3, [r7, #4]
 8002ebe:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002ec0:	430b      	orrs	r3, r1
 8002ec2:	491b      	ldr	r1, [pc, #108]	; (8002f30 <HAL_RCC_OscConfig+0x4c4>)
 8002ec4:	4313      	orrs	r3, r2
 8002ec6:	604b      	str	r3, [r1, #4]
                             RCC_OscInitStruct->PLL.PLLMUL);
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8002ec8:	4b1b      	ldr	r3, [pc, #108]	; (8002f38 <HAL_RCC_OscConfig+0x4cc>)
 8002eca:	2201      	movs	r2, #1
 8002ecc:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002ece:	f7ff fa81 	bl	80023d4 <HAL_GetTick>
 8002ed2:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 8002ed4:	e008      	b.n	8002ee8 <HAL_RCC_OscConfig+0x47c>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8002ed6:	f7ff fa7d 	bl	80023d4 <HAL_GetTick>
 8002eda:	4602      	mov	r2, r0
 8002edc:	693b      	ldr	r3, [r7, #16]
 8002ede:	1ad3      	subs	r3, r2, r3
 8002ee0:	2b02      	cmp	r3, #2
 8002ee2:	d901      	bls.n	8002ee8 <HAL_RCC_OscConfig+0x47c>
          {
            return HAL_TIMEOUT;
 8002ee4:	2303      	movs	r3, #3
 8002ee6:	e03d      	b.n	8002f64 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 8002ee8:	4b11      	ldr	r3, [pc, #68]	; (8002f30 <HAL_RCC_OscConfig+0x4c4>)
 8002eea:	681b      	ldr	r3, [r3, #0]
 8002eec:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002ef0:	2b00      	cmp	r3, #0
 8002ef2:	d0f0      	beq.n	8002ed6 <HAL_RCC_OscConfig+0x46a>
 8002ef4:	e035      	b.n	8002f62 <HAL_RCC_OscConfig+0x4f6>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8002ef6:	4b10      	ldr	r3, [pc, #64]	; (8002f38 <HAL_RCC_OscConfig+0x4cc>)
 8002ef8:	2200      	movs	r2, #0
 8002efa:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002efc:	f7ff fa6a 	bl	80023d4 <HAL_GetTick>
 8002f00:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8002f02:	e008      	b.n	8002f16 <HAL_RCC_OscConfig+0x4aa>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8002f04:	f7ff fa66 	bl	80023d4 <HAL_GetTick>
 8002f08:	4602      	mov	r2, r0
 8002f0a:	693b      	ldr	r3, [r7, #16]
 8002f0c:	1ad3      	subs	r3, r2, r3
 8002f0e:	2b02      	cmp	r3, #2
 8002f10:	d901      	bls.n	8002f16 <HAL_RCC_OscConfig+0x4aa>
          {
            return HAL_TIMEOUT;
 8002f12:	2303      	movs	r3, #3
 8002f14:	e026      	b.n	8002f64 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8002f16:	4b06      	ldr	r3, [pc, #24]	; (8002f30 <HAL_RCC_OscConfig+0x4c4>)
 8002f18:	681b      	ldr	r3, [r3, #0]
 8002f1a:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002f1e:	2b00      	cmp	r3, #0
 8002f20:	d1f0      	bne.n	8002f04 <HAL_RCC_OscConfig+0x498>
 8002f22:	e01e      	b.n	8002f62 <HAL_RCC_OscConfig+0x4f6>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8002f24:	687b      	ldr	r3, [r7, #4]
 8002f26:	69db      	ldr	r3, [r3, #28]
 8002f28:	2b01      	cmp	r3, #1
 8002f2a:	d107      	bne.n	8002f3c <HAL_RCC_OscConfig+0x4d0>
      {
        return HAL_ERROR;
 8002f2c:	2301      	movs	r3, #1
 8002f2e:	e019      	b.n	8002f64 <HAL_RCC_OscConfig+0x4f8>
 8002f30:	40021000 	.word	0x40021000
 8002f34:	40007000 	.word	0x40007000
 8002f38:	42420060 	.word	0x42420060
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->CFGR;
 8002f3c:	4b0b      	ldr	r3, [pc, #44]	; (8002f6c <HAL_RCC_OscConfig+0x500>)
 8002f3e:	685b      	ldr	r3, [r3, #4]
 8002f40:	60fb      	str	r3, [r7, #12]
        if ((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8002f42:	68fb      	ldr	r3, [r7, #12]
 8002f44:	f403 3280 	and.w	r2, r3, #65536	; 0x10000
 8002f48:	687b      	ldr	r3, [r7, #4]
 8002f4a:	6a1b      	ldr	r3, [r3, #32]
 8002f4c:	429a      	cmp	r2, r3
 8002f4e:	d106      	bne.n	8002f5e <HAL_RCC_OscConfig+0x4f2>
            (READ_BIT(pll_config, RCC_CFGR_PLLMULL) != RCC_OscInitStruct->PLL.PLLMUL))
 8002f50:	68fb      	ldr	r3, [r7, #12]
 8002f52:	f403 1270 	and.w	r2, r3, #3932160	; 0x3c0000
 8002f56:	687b      	ldr	r3, [r7, #4]
 8002f58:	6a5b      	ldr	r3, [r3, #36]	; 0x24
        if ((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8002f5a:	429a      	cmp	r2, r3
 8002f5c:	d001      	beq.n	8002f62 <HAL_RCC_OscConfig+0x4f6>
        {
          return HAL_ERROR;
 8002f5e:	2301      	movs	r3, #1
 8002f60:	e000      	b.n	8002f64 <HAL_RCC_OscConfig+0x4f8>
        }
      }
    }
  }

  return HAL_OK;
 8002f62:	2300      	movs	r3, #0
}
 8002f64:	4618      	mov	r0, r3
 8002f66:	3718      	adds	r7, #24
 8002f68:	46bd      	mov	sp, r7
 8002f6a:	bd80      	pop	{r7, pc}
 8002f6c:	40021000 	.word	0x40021000

08002f70 <HAL_RCC_ClockConfig>:
  *         You can use @ref HAL_RCC_GetClockConfig() function to know which clock is
  *         currently used as system clock source.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8002f70:	b580      	push	{r7, lr}
 8002f72:	b084      	sub	sp, #16
 8002f74:	af00      	add	r7, sp, #0
 8002f76:	6078      	str	r0, [r7, #4]
 8002f78:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 8002f7a:	687b      	ldr	r3, [r7, #4]
 8002f7c:	2b00      	cmp	r3, #0
 8002f7e:	d101      	bne.n	8002f84 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8002f80:	2301      	movs	r3, #1
 8002f82:	e0d0      	b.n	8003126 <HAL_RCC_ClockConfig+0x1b6>
  must be correctly programmed according to the frequency of the CPU clock
    (HCLK) of the device. */

#if defined(FLASH_ACR_LATENCY)
  /* Increasing the number of wait states because of higher CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 8002f84:	4b6a      	ldr	r3, [pc, #424]	; (8003130 <HAL_RCC_ClockConfig+0x1c0>)
 8002f86:	681b      	ldr	r3, [r3, #0]
 8002f88:	f003 0307 	and.w	r3, r3, #7
 8002f8c:	683a      	ldr	r2, [r7, #0]
 8002f8e:	429a      	cmp	r2, r3
 8002f90:	d910      	bls.n	8002fb4 <HAL_RCC_ClockConfig+0x44>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8002f92:	4b67      	ldr	r3, [pc, #412]	; (8003130 <HAL_RCC_ClockConfig+0x1c0>)
 8002f94:	681b      	ldr	r3, [r3, #0]
 8002f96:	f023 0207 	bic.w	r2, r3, #7
 8002f9a:	4965      	ldr	r1, [pc, #404]	; (8003130 <HAL_RCC_ClockConfig+0x1c0>)
 8002f9c:	683b      	ldr	r3, [r7, #0]
 8002f9e:	4313      	orrs	r3, r2
 8002fa0:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8002fa2:	4b63      	ldr	r3, [pc, #396]	; (8003130 <HAL_RCC_ClockConfig+0x1c0>)
 8002fa4:	681b      	ldr	r3, [r3, #0]
 8002fa6:	f003 0307 	and.w	r3, r3, #7
 8002faa:	683a      	ldr	r2, [r7, #0]
 8002fac:	429a      	cmp	r2, r3
 8002fae:	d001      	beq.n	8002fb4 <HAL_RCC_ClockConfig+0x44>
  {
    return HAL_ERROR;
 8002fb0:	2301      	movs	r3, #1
 8002fb2:	e0b8      	b.n	8003126 <HAL_RCC_ClockConfig+0x1b6>
  }
}

#endif /* FLASH_ACR_LATENCY */
/*-------------------------- HCLK Configuration --------------------------*/
if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8002fb4:	687b      	ldr	r3, [r7, #4]
 8002fb6:	681b      	ldr	r3, [r3, #0]
 8002fb8:	f003 0302 	and.w	r3, r3, #2
 8002fbc:	2b00      	cmp	r3, #0
 8002fbe:	d020      	beq.n	8003002 <HAL_RCC_ClockConfig+0x92>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
    a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8002fc0:	687b      	ldr	r3, [r7, #4]
 8002fc2:	681b      	ldr	r3, [r3, #0]
 8002fc4:	f003 0304 	and.w	r3, r3, #4
 8002fc8:	2b00      	cmp	r3, #0
 8002fca:	d005      	beq.n	8002fd8 <HAL_RCC_ClockConfig+0x68>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8002fcc:	4b59      	ldr	r3, [pc, #356]	; (8003134 <HAL_RCC_ClockConfig+0x1c4>)
 8002fce:	685b      	ldr	r3, [r3, #4]
 8002fd0:	4a58      	ldr	r2, [pc, #352]	; (8003134 <HAL_RCC_ClockConfig+0x1c4>)
 8002fd2:	f443 63e0 	orr.w	r3, r3, #1792	; 0x700
 8002fd6:	6053      	str	r3, [r2, #4]
    }

    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8002fd8:	687b      	ldr	r3, [r7, #4]
 8002fda:	681b      	ldr	r3, [r3, #0]
 8002fdc:	f003 0308 	and.w	r3, r3, #8
 8002fe0:	2b00      	cmp	r3, #0
 8002fe2:	d005      	beq.n	8002ff0 <HAL_RCC_ClockConfig+0x80>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8002fe4:	4b53      	ldr	r3, [pc, #332]	; (8003134 <HAL_RCC_ClockConfig+0x1c4>)
 8002fe6:	685b      	ldr	r3, [r3, #4]
 8002fe8:	4a52      	ldr	r2, [pc, #328]	; (8003134 <HAL_RCC_ClockConfig+0x1c4>)
 8002fea:	f443 5360 	orr.w	r3, r3, #14336	; 0x3800
 8002fee:	6053      	str	r3, [r2, #4]
    }

    /* Set the new HCLK clock divider */
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8002ff0:	4b50      	ldr	r3, [pc, #320]	; (8003134 <HAL_RCC_ClockConfig+0x1c4>)
 8002ff2:	685b      	ldr	r3, [r3, #4]
 8002ff4:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8002ff8:	687b      	ldr	r3, [r7, #4]
 8002ffa:	689b      	ldr	r3, [r3, #8]
 8002ffc:	494d      	ldr	r1, [pc, #308]	; (8003134 <HAL_RCC_ClockConfig+0x1c4>)
 8002ffe:	4313      	orrs	r3, r2
 8003000:	604b      	str	r3, [r1, #4]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8003002:	687b      	ldr	r3, [r7, #4]
 8003004:	681b      	ldr	r3, [r3, #0]
 8003006:	f003 0301 	and.w	r3, r3, #1
 800300a:	2b00      	cmp	r3, #0
 800300c:	d040      	beq.n	8003090 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 800300e:	687b      	ldr	r3, [r7, #4]
 8003010:	685b      	ldr	r3, [r3, #4]
 8003012:	2b01      	cmp	r3, #1
 8003014:	d107      	bne.n	8003026 <HAL_RCC_ClockConfig+0xb6>
    {
      /* Check the HSE ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8003016:	4b47      	ldr	r3, [pc, #284]	; (8003134 <HAL_RCC_ClockConfig+0x1c4>)
 8003018:	681b      	ldr	r3, [r3, #0]
 800301a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800301e:	2b00      	cmp	r3, #0
 8003020:	d115      	bne.n	800304e <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8003022:	2301      	movs	r3, #1
 8003024:	e07f      	b.n	8003126 <HAL_RCC_ClockConfig+0x1b6>
      }
    }
    /* PLL is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8003026:	687b      	ldr	r3, [r7, #4]
 8003028:	685b      	ldr	r3, [r3, #4]
 800302a:	2b02      	cmp	r3, #2
 800302c:	d107      	bne.n	800303e <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 800302e:	4b41      	ldr	r3, [pc, #260]	; (8003134 <HAL_RCC_ClockConfig+0x1c4>)
 8003030:	681b      	ldr	r3, [r3, #0]
 8003032:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8003036:	2b00      	cmp	r3, #0
 8003038:	d109      	bne.n	800304e <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 800303a:	2301      	movs	r3, #1
 800303c:	e073      	b.n	8003126 <HAL_RCC_ClockConfig+0x1b6>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 800303e:	4b3d      	ldr	r3, [pc, #244]	; (8003134 <HAL_RCC_ClockConfig+0x1c4>)
 8003040:	681b      	ldr	r3, [r3, #0]
 8003042:	f003 0302 	and.w	r3, r3, #2
 8003046:	2b00      	cmp	r3, #0
 8003048:	d101      	bne.n	800304e <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 800304a:	2301      	movs	r3, #1
 800304c:	e06b      	b.n	8003126 <HAL_RCC_ClockConfig+0x1b6>
      }
    }
    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 800304e:	4b39      	ldr	r3, [pc, #228]	; (8003134 <HAL_RCC_ClockConfig+0x1c4>)
 8003050:	685b      	ldr	r3, [r3, #4]
 8003052:	f023 0203 	bic.w	r2, r3, #3
 8003056:	687b      	ldr	r3, [r7, #4]
 8003058:	685b      	ldr	r3, [r3, #4]
 800305a:	4936      	ldr	r1, [pc, #216]	; (8003134 <HAL_RCC_ClockConfig+0x1c4>)
 800305c:	4313      	orrs	r3, r2
 800305e:	604b      	str	r3, [r1, #4]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8003060:	f7ff f9b8 	bl	80023d4 <HAL_GetTick>
 8003064:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8003066:	e00a      	b.n	800307e <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8003068:	f7ff f9b4 	bl	80023d4 <HAL_GetTick>
 800306c:	4602      	mov	r2, r0
 800306e:	68fb      	ldr	r3, [r7, #12]
 8003070:	1ad3      	subs	r3, r2, r3
 8003072:	f241 3288 	movw	r2, #5000	; 0x1388
 8003076:	4293      	cmp	r3, r2
 8003078:	d901      	bls.n	800307e <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 800307a:	2303      	movs	r3, #3
 800307c:	e053      	b.n	8003126 <HAL_RCC_ClockConfig+0x1b6>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800307e:	4b2d      	ldr	r3, [pc, #180]	; (8003134 <HAL_RCC_ClockConfig+0x1c4>)
 8003080:	685b      	ldr	r3, [r3, #4]
 8003082:	f003 020c 	and.w	r2, r3, #12
 8003086:	687b      	ldr	r3, [r7, #4]
 8003088:	685b      	ldr	r3, [r3, #4]
 800308a:	009b      	lsls	r3, r3, #2
 800308c:	429a      	cmp	r2, r3
 800308e:	d1eb      	bne.n	8003068 <HAL_RCC_ClockConfig+0xf8>
    }
  }

#if defined(FLASH_ACR_LATENCY)
  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 8003090:	4b27      	ldr	r3, [pc, #156]	; (8003130 <HAL_RCC_ClockConfig+0x1c0>)
 8003092:	681b      	ldr	r3, [r3, #0]
 8003094:	f003 0307 	and.w	r3, r3, #7
 8003098:	683a      	ldr	r2, [r7, #0]
 800309a:	429a      	cmp	r2, r3
 800309c:	d210      	bcs.n	80030c0 <HAL_RCC_ClockConfig+0x150>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800309e:	4b24      	ldr	r3, [pc, #144]	; (8003130 <HAL_RCC_ClockConfig+0x1c0>)
 80030a0:	681b      	ldr	r3, [r3, #0]
 80030a2:	f023 0207 	bic.w	r2, r3, #7
 80030a6:	4922      	ldr	r1, [pc, #136]	; (8003130 <HAL_RCC_ClockConfig+0x1c0>)
 80030a8:	683b      	ldr	r3, [r7, #0]
 80030aa:	4313      	orrs	r3, r2
 80030ac:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 80030ae:	4b20      	ldr	r3, [pc, #128]	; (8003130 <HAL_RCC_ClockConfig+0x1c0>)
 80030b0:	681b      	ldr	r3, [r3, #0]
 80030b2:	f003 0307 	and.w	r3, r3, #7
 80030b6:	683a      	ldr	r2, [r7, #0]
 80030b8:	429a      	cmp	r2, r3
 80030ba:	d001      	beq.n	80030c0 <HAL_RCC_ClockConfig+0x150>
  {
    return HAL_ERROR;
 80030bc:	2301      	movs	r3, #1
 80030be:	e032      	b.n	8003126 <HAL_RCC_ClockConfig+0x1b6>
  }
}
#endif /* FLASH_ACR_LATENCY */

/*-------------------------- PCLK1 Configuration ---------------------------*/
if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80030c0:	687b      	ldr	r3, [r7, #4]
 80030c2:	681b      	ldr	r3, [r3, #0]
 80030c4:	f003 0304 	and.w	r3, r3, #4
 80030c8:	2b00      	cmp	r3, #0
 80030ca:	d008      	beq.n	80030de <HAL_RCC_ClockConfig+0x16e>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 80030cc:	4b19      	ldr	r3, [pc, #100]	; (8003134 <HAL_RCC_ClockConfig+0x1c4>)
 80030ce:	685b      	ldr	r3, [r3, #4]
 80030d0:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 80030d4:	687b      	ldr	r3, [r7, #4]
 80030d6:	68db      	ldr	r3, [r3, #12]
 80030d8:	4916      	ldr	r1, [pc, #88]	; (8003134 <HAL_RCC_ClockConfig+0x1c4>)
 80030da:	4313      	orrs	r3, r2
 80030dc:	604b      	str	r3, [r1, #4]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80030de:	687b      	ldr	r3, [r7, #4]
 80030e0:	681b      	ldr	r3, [r3, #0]
 80030e2:	f003 0308 	and.w	r3, r3, #8
 80030e6:	2b00      	cmp	r3, #0
 80030e8:	d009      	beq.n	80030fe <HAL_RCC_ClockConfig+0x18e>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3));
 80030ea:	4b12      	ldr	r3, [pc, #72]	; (8003134 <HAL_RCC_ClockConfig+0x1c4>)
 80030ec:	685b      	ldr	r3, [r3, #4]
 80030ee:	f423 5260 	bic.w	r2, r3, #14336	; 0x3800
 80030f2:	687b      	ldr	r3, [r7, #4]
 80030f4:	691b      	ldr	r3, [r3, #16]
 80030f6:	00db      	lsls	r3, r3, #3
 80030f8:	490e      	ldr	r1, [pc, #56]	; (8003134 <HAL_RCC_ClockConfig+0x1c4>)
 80030fa:	4313      	orrs	r3, r2
 80030fc:	604b      	str	r3, [r1, #4]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos];
 80030fe:	f000 f821 	bl	8003144 <HAL_RCC_GetSysClockFreq>
 8003102:	4602      	mov	r2, r0
 8003104:	4b0b      	ldr	r3, [pc, #44]	; (8003134 <HAL_RCC_ClockConfig+0x1c4>)
 8003106:	685b      	ldr	r3, [r3, #4]
 8003108:	091b      	lsrs	r3, r3, #4
 800310a:	f003 030f 	and.w	r3, r3, #15
 800310e:	490a      	ldr	r1, [pc, #40]	; (8003138 <HAL_RCC_ClockConfig+0x1c8>)
 8003110:	5ccb      	ldrb	r3, [r1, r3]
 8003112:	fa22 f303 	lsr.w	r3, r2, r3
 8003116:	4a09      	ldr	r2, [pc, #36]	; (800313c <HAL_RCC_ClockConfig+0x1cc>)
 8003118:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  HAL_InitTick(uwTickPrio);
 800311a:	4b09      	ldr	r3, [pc, #36]	; (8003140 <HAL_RCC_ClockConfig+0x1d0>)
 800311c:	681b      	ldr	r3, [r3, #0]
 800311e:	4618      	mov	r0, r3
 8003120:	f7ff f916 	bl	8002350 <HAL_InitTick>

  return HAL_OK;
 8003124:	2300      	movs	r3, #0
}
 8003126:	4618      	mov	r0, r3
 8003128:	3710      	adds	r7, #16
 800312a:	46bd      	mov	sp, r7
 800312c:	bd80      	pop	{r7, pc}
 800312e:	bf00      	nop
 8003130:	40022000 	.word	0x40022000
 8003134:	40021000 	.word	0x40021000
 8003138:	080050f8 	.word	0x080050f8
 800313c:	20000008 	.word	0x20000008
 8003140:	2000000c 	.word	0x2000000c

08003144 <HAL_RCC_GetSysClockFreq>:
  *         right SYSCLK value. Otherwise, any configuration based on this function will be incorrect.
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8003144:	b490      	push	{r4, r7}
 8003146:	b08a      	sub	sp, #40	; 0x28
 8003148:	af00      	add	r7, sp, #0
#if defined(RCC_CFGR2_PREDIV1SRC)
  const uint8_t aPLLMULFactorTable[14] = {0, 0, 4, 5, 6, 7, 8, 9, 0, 0, 0, 0, 0, 13};
  const uint8_t aPredivFactorTable[16] = {1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16};
#else
  const uint8_t aPLLMULFactorTable[16] = {2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 16};
 800314a:	4b29      	ldr	r3, [pc, #164]	; (80031f0 <HAL_RCC_GetSysClockFreq+0xac>)
 800314c:	1d3c      	adds	r4, r7, #4
 800314e:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 8003150:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
#if defined(RCC_CFGR2_PREDIV1)
  const uint8_t aPredivFactorTable[16] = {1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16};
#else
  const uint8_t aPredivFactorTable[2] = {1, 2};
 8003154:	f240 2301 	movw	r3, #513	; 0x201
 8003158:	803b      	strh	r3, [r7, #0]
#endif /*RCC_CFGR2_PREDIV1*/

#endif
  uint32_t tmpreg = 0U, prediv = 0U, pllclk = 0U, pllmul = 0U;
 800315a:	2300      	movs	r3, #0
 800315c:	61fb      	str	r3, [r7, #28]
 800315e:	2300      	movs	r3, #0
 8003160:	61bb      	str	r3, [r7, #24]
 8003162:	2300      	movs	r3, #0
 8003164:	627b      	str	r3, [r7, #36]	; 0x24
 8003166:	2300      	movs	r3, #0
 8003168:	617b      	str	r3, [r7, #20]
  uint32_t sysclockfreq = 0U;
 800316a:	2300      	movs	r3, #0
 800316c:	623b      	str	r3, [r7, #32]
#if defined(RCC_CFGR2_PREDIV1SRC)
  uint32_t prediv2 = 0U, pll2mul = 0U;
#endif /*RCC_CFGR2_PREDIV1SRC*/

  tmpreg = RCC->CFGR;
 800316e:	4b21      	ldr	r3, [pc, #132]	; (80031f4 <HAL_RCC_GetSysClockFreq+0xb0>)
 8003170:	685b      	ldr	r3, [r3, #4]
 8003172:	61fb      	str	r3, [r7, #28]

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (tmpreg & RCC_CFGR_SWS)
 8003174:	69fb      	ldr	r3, [r7, #28]
 8003176:	f003 030c 	and.w	r3, r3, #12
 800317a:	2b04      	cmp	r3, #4
 800317c:	d002      	beq.n	8003184 <HAL_RCC_GetSysClockFreq+0x40>
 800317e:	2b08      	cmp	r3, #8
 8003180:	d003      	beq.n	800318a <HAL_RCC_GetSysClockFreq+0x46>
 8003182:	e02b      	b.n	80031dc <HAL_RCC_GetSysClockFreq+0x98>
  {
    case RCC_SYSCLKSOURCE_STATUS_HSE:  /* HSE used as system clock */
    {
      sysclockfreq = HSE_VALUE;
 8003184:	4b1c      	ldr	r3, [pc, #112]	; (80031f8 <HAL_RCC_GetSysClockFreq+0xb4>)
 8003186:	623b      	str	r3, [r7, #32]
      break;
 8003188:	e02b      	b.n	80031e2 <HAL_RCC_GetSysClockFreq+0x9e>
    }
    case RCC_SYSCLKSOURCE_STATUS_PLLCLK:  /* PLL used as system clock */
    {
      pllmul = aPLLMULFactorTable[(uint32_t)(tmpreg & RCC_CFGR_PLLMULL) >> RCC_CFGR_PLLMULL_Pos];
 800318a:	69fb      	ldr	r3, [r7, #28]
 800318c:	0c9b      	lsrs	r3, r3, #18
 800318e:	f003 030f 	and.w	r3, r3, #15
 8003192:	3328      	adds	r3, #40	; 0x28
 8003194:	443b      	add	r3, r7
 8003196:	f813 3c24 	ldrb.w	r3, [r3, #-36]
 800319a:	617b      	str	r3, [r7, #20]
      if ((tmpreg & RCC_CFGR_PLLSRC) != RCC_PLLSOURCE_HSI_DIV2)
 800319c:	69fb      	ldr	r3, [r7, #28]
 800319e:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80031a2:	2b00      	cmp	r3, #0
 80031a4:	d012      	beq.n	80031cc <HAL_RCC_GetSysClockFreq+0x88>
      {
#if defined(RCC_CFGR2_PREDIV1)
        prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR2 & RCC_CFGR2_PREDIV1) >> RCC_CFGR2_PREDIV1_Pos];
#else
        prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR & RCC_CFGR_PLLXTPRE) >> RCC_CFGR_PLLXTPRE_Pos];
 80031a6:	4b13      	ldr	r3, [pc, #76]	; (80031f4 <HAL_RCC_GetSysClockFreq+0xb0>)
 80031a8:	685b      	ldr	r3, [r3, #4]
 80031aa:	0c5b      	lsrs	r3, r3, #17
 80031ac:	f003 0301 	and.w	r3, r3, #1
 80031b0:	3328      	adds	r3, #40	; 0x28
 80031b2:	443b      	add	r3, r7
 80031b4:	f813 3c28 	ldrb.w	r3, [r3, #-40]
 80031b8:	61bb      	str	r3, [r7, #24]
        {
          pllclk = pllclk / 2;
        }
#else
        /* HSE used as PLL clock source : PLLCLK = HSE/PREDIV1 * PLLMUL */
        pllclk = (uint32_t)((HSE_VALUE  * pllmul) / prediv);
 80031ba:	697b      	ldr	r3, [r7, #20]
 80031bc:	4a0e      	ldr	r2, [pc, #56]	; (80031f8 <HAL_RCC_GetSysClockFreq+0xb4>)
 80031be:	fb03 f202 	mul.w	r2, r3, r2
 80031c2:	69bb      	ldr	r3, [r7, #24]
 80031c4:	fbb2 f3f3 	udiv	r3, r2, r3
 80031c8:	627b      	str	r3, [r7, #36]	; 0x24
 80031ca:	e004      	b.n	80031d6 <HAL_RCC_GetSysClockFreq+0x92>
#endif /*RCC_CFGR2_PREDIV1SRC*/
      }
      else
      {
        /* HSI used as PLL clock source : PLLCLK = HSI/2 * PLLMUL */
        pllclk = (uint32_t)((HSI_VALUE >> 1) * pllmul);
 80031cc:	697b      	ldr	r3, [r7, #20]
 80031ce:	4a0b      	ldr	r2, [pc, #44]	; (80031fc <HAL_RCC_GetSysClockFreq+0xb8>)
 80031d0:	fb02 f303 	mul.w	r3, r2, r3
 80031d4:	627b      	str	r3, [r7, #36]	; 0x24
      }
      sysclockfreq = pllclk;
 80031d6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80031d8:	623b      	str	r3, [r7, #32]
      break;
 80031da:	e002      	b.n	80031e2 <HAL_RCC_GetSysClockFreq+0x9e>
    }
    case RCC_SYSCLKSOURCE_STATUS_HSI:  /* HSI used as system clock source */
    default: /* HSI used as system clock */
    {
      sysclockfreq = HSI_VALUE;
 80031dc:	4b06      	ldr	r3, [pc, #24]	; (80031f8 <HAL_RCC_GetSysClockFreq+0xb4>)
 80031de:	623b      	str	r3, [r7, #32]
      break;
 80031e0:	bf00      	nop
    }
  }
  return sysclockfreq;
 80031e2:	6a3b      	ldr	r3, [r7, #32]
}
 80031e4:	4618      	mov	r0, r3
 80031e6:	3728      	adds	r7, #40	; 0x28
 80031e8:	46bd      	mov	sp, r7
 80031ea:	bc90      	pop	{r4, r7}
 80031ec:	4770      	bx	lr
 80031ee:	bf00      	nop
 80031f0:	080050e8 	.word	0x080050e8
 80031f4:	40021000 	.word	0x40021000
 80031f8:	007a1200 	.word	0x007a1200
 80031fc:	003d0900 	.word	0x003d0900

08003200 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8003200:	b480      	push	{r7}
 8003202:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8003204:	4b02      	ldr	r3, [pc, #8]	; (8003210 <HAL_RCC_GetHCLKFreq+0x10>)
 8003206:	681b      	ldr	r3, [r3, #0]
}
 8003208:	4618      	mov	r0, r3
 800320a:	46bd      	mov	sp, r7
 800320c:	bc80      	pop	{r7}
 800320e:	4770      	bx	lr
 8003210:	20000008 	.word	0x20000008

08003214 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8003214:	b580      	push	{r7, lr}
 8003216:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos]);
 8003218:	f7ff fff2 	bl	8003200 <HAL_RCC_GetHCLKFreq>
 800321c:	4602      	mov	r2, r0
 800321e:	4b05      	ldr	r3, [pc, #20]	; (8003234 <HAL_RCC_GetPCLK1Freq+0x20>)
 8003220:	685b      	ldr	r3, [r3, #4]
 8003222:	0a1b      	lsrs	r3, r3, #8
 8003224:	f003 0307 	and.w	r3, r3, #7
 8003228:	4903      	ldr	r1, [pc, #12]	; (8003238 <HAL_RCC_GetPCLK1Freq+0x24>)
 800322a:	5ccb      	ldrb	r3, [r1, r3]
 800322c:	fa22 f303 	lsr.w	r3, r2, r3
}
 8003230:	4618      	mov	r0, r3
 8003232:	bd80      	pop	{r7, pc}
 8003234:	40021000 	.word	0x40021000
 8003238:	08005108 	.word	0x08005108

0800323c <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 800323c:	b580      	push	{r7, lr}
 800323e:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos]);
 8003240:	f7ff ffde 	bl	8003200 <HAL_RCC_GetHCLKFreq>
 8003244:	4602      	mov	r2, r0
 8003246:	4b05      	ldr	r3, [pc, #20]	; (800325c <HAL_RCC_GetPCLK2Freq+0x20>)
 8003248:	685b      	ldr	r3, [r3, #4]
 800324a:	0adb      	lsrs	r3, r3, #11
 800324c:	f003 0307 	and.w	r3, r3, #7
 8003250:	4903      	ldr	r1, [pc, #12]	; (8003260 <HAL_RCC_GetPCLK2Freq+0x24>)
 8003252:	5ccb      	ldrb	r3, [r1, r3]
 8003254:	fa22 f303 	lsr.w	r3, r2, r3
}
 8003258:	4618      	mov	r0, r3
 800325a:	bd80      	pop	{r7, pc}
 800325c:	40021000 	.word	0x40021000
 8003260:	08005108 	.word	0x08005108

08003264 <RCC_Delay>:
  * @brief  This function provides delay (in milliseconds) based on CPU cycles method.
  * @param  mdelay: specifies the delay time length, in milliseconds.
  * @retval None
  */
static void RCC_Delay(uint32_t mdelay)
{
 8003264:	b480      	push	{r7}
 8003266:	b085      	sub	sp, #20
 8003268:	af00      	add	r7, sp, #0
 800326a:	6078      	str	r0, [r7, #4]
  __IO uint32_t Delay = mdelay * (SystemCoreClock / 8U / 1000U);
 800326c:	4b0a      	ldr	r3, [pc, #40]	; (8003298 <RCC_Delay+0x34>)
 800326e:	681b      	ldr	r3, [r3, #0]
 8003270:	4a0a      	ldr	r2, [pc, #40]	; (800329c <RCC_Delay+0x38>)
 8003272:	fba2 2303 	umull	r2, r3, r2, r3
 8003276:	0a5b      	lsrs	r3, r3, #9
 8003278:	687a      	ldr	r2, [r7, #4]
 800327a:	fb02 f303 	mul.w	r3, r2, r3
 800327e:	60fb      	str	r3, [r7, #12]
  do
  {
    __NOP();
 8003280:	bf00      	nop
  }
  while (Delay --);
 8003282:	68fb      	ldr	r3, [r7, #12]
 8003284:	1e5a      	subs	r2, r3, #1
 8003286:	60fa      	str	r2, [r7, #12]
 8003288:	2b00      	cmp	r3, #0
 800328a:	d1f9      	bne.n	8003280 <RCC_Delay+0x1c>
}
 800328c:	bf00      	nop
 800328e:	bf00      	nop
 8003290:	3714      	adds	r7, #20
 8003292:	46bd      	mov	sp, r7
 8003294:	bc80      	pop	{r7}
 8003296:	4770      	bx	lr
 8003298:	20000008 	.word	0x20000008
 800329c:	10624dd3 	.word	0x10624dd3

080032a0 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 80032a0:	b580      	push	{r7, lr}
 80032a2:	b082      	sub	sp, #8
 80032a4:	af00      	add	r7, sp, #0
 80032a6:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 80032a8:	687b      	ldr	r3, [r7, #4]
 80032aa:	2b00      	cmp	r3, #0
 80032ac:	d101      	bne.n	80032b2 <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 80032ae:	2301      	movs	r3, #1
 80032b0:	e041      	b.n	8003336 <HAL_TIM_Base_Init+0x96>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 80032b2:	687b      	ldr	r3, [r7, #4]
 80032b4:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80032b8:	b2db      	uxtb	r3, r3
 80032ba:	2b00      	cmp	r3, #0
 80032bc:	d106      	bne.n	80032cc <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 80032be:	687b      	ldr	r3, [r7, #4]
 80032c0:	2200      	movs	r2, #0
 80032c2:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 80032c6:	6878      	ldr	r0, [r7, #4]
 80032c8:	f7fe ff32 	bl	8002130 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 80032cc:	687b      	ldr	r3, [r7, #4]
 80032ce:	2202      	movs	r2, #2
 80032d0:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 80032d4:	687b      	ldr	r3, [r7, #4]
 80032d6:	681a      	ldr	r2, [r3, #0]
 80032d8:	687b      	ldr	r3, [r7, #4]
 80032da:	3304      	adds	r3, #4
 80032dc:	4619      	mov	r1, r3
 80032de:	4610      	mov	r0, r2
 80032e0:	f000 fd50 	bl	8003d84 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 80032e4:	687b      	ldr	r3, [r7, #4]
 80032e6:	2201      	movs	r2, #1
 80032e8:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 80032ec:	687b      	ldr	r3, [r7, #4]
 80032ee:	2201      	movs	r2, #1
 80032f0:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 80032f4:	687b      	ldr	r3, [r7, #4]
 80032f6:	2201      	movs	r2, #1
 80032f8:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 80032fc:	687b      	ldr	r3, [r7, #4]
 80032fe:	2201      	movs	r2, #1
 8003300:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8003304:	687b      	ldr	r3, [r7, #4]
 8003306:	2201      	movs	r2, #1
 8003308:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 800330c:	687b      	ldr	r3, [r7, #4]
 800330e:	2201      	movs	r2, #1
 8003310:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8003314:	687b      	ldr	r3, [r7, #4]
 8003316:	2201      	movs	r2, #1
 8003318:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 800331c:	687b      	ldr	r3, [r7, #4]
 800331e:	2201      	movs	r2, #1
 8003320:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8003324:	687b      	ldr	r3, [r7, #4]
 8003326:	2201      	movs	r2, #1
 8003328:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 800332c:	687b      	ldr	r3, [r7, #4]
 800332e:	2201      	movs	r2, #1
 8003330:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8003334:	2300      	movs	r3, #0
}
 8003336:	4618      	mov	r0, r3
 8003338:	3708      	adds	r7, #8
 800333a:	46bd      	mov	sp, r7
 800333c:	bd80      	pop	{r7, pc}
	...

08003340 <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 8003340:	b480      	push	{r7}
 8003342:	b085      	sub	sp, #20
 8003344:	af00      	add	r7, sp, #0
 8003346:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 8003348:	687b      	ldr	r3, [r7, #4]
 800334a:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800334e:	b2db      	uxtb	r3, r3
 8003350:	2b01      	cmp	r3, #1
 8003352:	d001      	beq.n	8003358 <HAL_TIM_Base_Start_IT+0x18>
  {
    return HAL_ERROR;
 8003354:	2301      	movs	r3, #1
 8003356:	e03a      	b.n	80033ce <HAL_TIM_Base_Start_IT+0x8e>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8003358:	687b      	ldr	r3, [r7, #4]
 800335a:	2202      	movs	r2, #2
 800335c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 8003360:	687b      	ldr	r3, [r7, #4]
 8003362:	681b      	ldr	r3, [r3, #0]
 8003364:	68da      	ldr	r2, [r3, #12]
 8003366:	687b      	ldr	r3, [r7, #4]
 8003368:	681b      	ldr	r3, [r3, #0]
 800336a:	f042 0201 	orr.w	r2, r2, #1
 800336e:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8003370:	687b      	ldr	r3, [r7, #4]
 8003372:	681b      	ldr	r3, [r3, #0]
 8003374:	4a18      	ldr	r2, [pc, #96]	; (80033d8 <HAL_TIM_Base_Start_IT+0x98>)
 8003376:	4293      	cmp	r3, r2
 8003378:	d00e      	beq.n	8003398 <HAL_TIM_Base_Start_IT+0x58>
 800337a:	687b      	ldr	r3, [r7, #4]
 800337c:	681b      	ldr	r3, [r3, #0]
 800337e:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8003382:	d009      	beq.n	8003398 <HAL_TIM_Base_Start_IT+0x58>
 8003384:	687b      	ldr	r3, [r7, #4]
 8003386:	681b      	ldr	r3, [r3, #0]
 8003388:	4a14      	ldr	r2, [pc, #80]	; (80033dc <HAL_TIM_Base_Start_IT+0x9c>)
 800338a:	4293      	cmp	r3, r2
 800338c:	d004      	beq.n	8003398 <HAL_TIM_Base_Start_IT+0x58>
 800338e:	687b      	ldr	r3, [r7, #4]
 8003390:	681b      	ldr	r3, [r3, #0]
 8003392:	4a13      	ldr	r2, [pc, #76]	; (80033e0 <HAL_TIM_Base_Start_IT+0xa0>)
 8003394:	4293      	cmp	r3, r2
 8003396:	d111      	bne.n	80033bc <HAL_TIM_Base_Start_IT+0x7c>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8003398:	687b      	ldr	r3, [r7, #4]
 800339a:	681b      	ldr	r3, [r3, #0]
 800339c:	689b      	ldr	r3, [r3, #8]
 800339e:	f003 0307 	and.w	r3, r3, #7
 80033a2:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80033a4:	68fb      	ldr	r3, [r7, #12]
 80033a6:	2b06      	cmp	r3, #6
 80033a8:	d010      	beq.n	80033cc <HAL_TIM_Base_Start_IT+0x8c>
    {
      __HAL_TIM_ENABLE(htim);
 80033aa:	687b      	ldr	r3, [r7, #4]
 80033ac:	681b      	ldr	r3, [r3, #0]
 80033ae:	681a      	ldr	r2, [r3, #0]
 80033b0:	687b      	ldr	r3, [r7, #4]
 80033b2:	681b      	ldr	r3, [r3, #0]
 80033b4:	f042 0201 	orr.w	r2, r2, #1
 80033b8:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80033ba:	e007      	b.n	80033cc <HAL_TIM_Base_Start_IT+0x8c>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 80033bc:	687b      	ldr	r3, [r7, #4]
 80033be:	681b      	ldr	r3, [r3, #0]
 80033c0:	681a      	ldr	r2, [r3, #0]
 80033c2:	687b      	ldr	r3, [r7, #4]
 80033c4:	681b      	ldr	r3, [r3, #0]
 80033c6:	f042 0201 	orr.w	r2, r2, #1
 80033ca:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 80033cc:	2300      	movs	r3, #0
}
 80033ce:	4618      	mov	r0, r3
 80033d0:	3714      	adds	r7, #20
 80033d2:	46bd      	mov	sp, r7
 80033d4:	bc80      	pop	{r7}
 80033d6:	4770      	bx	lr
 80033d8:	40012c00 	.word	0x40012c00
 80033dc:	40000400 	.word	0x40000400
 80033e0:	40000800 	.word	0x40000800

080033e4 <HAL_TIM_PWM_Init>:
  *         Ex: call @ref HAL_TIM_PWM_DeInit() before HAL_TIM_PWM_Init()
  * @param  htim TIM PWM handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Init(TIM_HandleTypeDef *htim)
{
 80033e4:	b580      	push	{r7, lr}
 80033e6:	b082      	sub	sp, #8
 80033e8:	af00      	add	r7, sp, #0
 80033ea:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 80033ec:	687b      	ldr	r3, [r7, #4]
 80033ee:	2b00      	cmp	r3, #0
 80033f0:	d101      	bne.n	80033f6 <HAL_TIM_PWM_Init+0x12>
  {
    return HAL_ERROR;
 80033f2:	2301      	movs	r3, #1
 80033f4:	e041      	b.n	800347a <HAL_TIM_PWM_Init+0x96>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 80033f6:	687b      	ldr	r3, [r7, #4]
 80033f8:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80033fc:	b2db      	uxtb	r3, r3
 80033fe:	2b00      	cmp	r3, #0
 8003400:	d106      	bne.n	8003410 <HAL_TIM_PWM_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8003402:	687b      	ldr	r3, [r7, #4]
 8003404:	2200      	movs	r2, #0
 8003406:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->PWM_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_PWM_MspInit(htim);
 800340a:	6878      	ldr	r0, [r7, #4]
 800340c:	f7fe fe74 	bl	80020f8 <HAL_TIM_PWM_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8003410:	687b      	ldr	r3, [r7, #4]
 8003412:	2202      	movs	r2, #2
 8003414:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Init the base time for the PWM */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8003418:	687b      	ldr	r3, [r7, #4]
 800341a:	681a      	ldr	r2, [r3, #0]
 800341c:	687b      	ldr	r3, [r7, #4]
 800341e:	3304      	adds	r3, #4
 8003420:	4619      	mov	r1, r3
 8003422:	4610      	mov	r0, r2
 8003424:	f000 fcae 	bl	8003d84 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8003428:	687b      	ldr	r3, [r7, #4]
 800342a:	2201      	movs	r2, #1
 800342c:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8003430:	687b      	ldr	r3, [r7, #4]
 8003432:	2201      	movs	r2, #1
 8003434:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8003438:	687b      	ldr	r3, [r7, #4]
 800343a:	2201      	movs	r2, #1
 800343c:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8003440:	687b      	ldr	r3, [r7, #4]
 8003442:	2201      	movs	r2, #1
 8003444:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8003448:	687b      	ldr	r3, [r7, #4]
 800344a:	2201      	movs	r2, #1
 800344c:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8003450:	687b      	ldr	r3, [r7, #4]
 8003452:	2201      	movs	r2, #1
 8003454:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8003458:	687b      	ldr	r3, [r7, #4]
 800345a:	2201      	movs	r2, #1
 800345c:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 8003460:	687b      	ldr	r3, [r7, #4]
 8003462:	2201      	movs	r2, #1
 8003464:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8003468:	687b      	ldr	r3, [r7, #4]
 800346a:	2201      	movs	r2, #1
 800346c:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8003470:	687b      	ldr	r3, [r7, #4]
 8003472:	2201      	movs	r2, #1
 8003474:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8003478:	2300      	movs	r3, #0
}
 800347a:	4618      	mov	r0, r3
 800347c:	3708      	adds	r7, #8
 800347e:	46bd      	mov	sp, r7
 8003480:	bd80      	pop	{r7, pc}
	...

08003484 <HAL_TIM_PWM_Start>:
  *            @arg TIM_CHANNEL_3: TIM Channel 3 selected
  *            @arg TIM_CHANNEL_4: TIM Channel 4 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Start(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 8003484:	b580      	push	{r7, lr}
 8003486:	b084      	sub	sp, #16
 8003488:	af00      	add	r7, sp, #0
 800348a:	6078      	str	r0, [r7, #4]
 800348c:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_TIM_CCX_INSTANCE(htim->Instance, Channel));

  /* Check the TIM channel state */
  if (TIM_CHANNEL_STATE_GET(htim, Channel) != HAL_TIM_CHANNEL_STATE_READY)
 800348e:	683b      	ldr	r3, [r7, #0]
 8003490:	2b00      	cmp	r3, #0
 8003492:	d109      	bne.n	80034a8 <HAL_TIM_PWM_Start+0x24>
 8003494:	687b      	ldr	r3, [r7, #4]
 8003496:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 800349a:	b2db      	uxtb	r3, r3
 800349c:	2b01      	cmp	r3, #1
 800349e:	bf14      	ite	ne
 80034a0:	2301      	movne	r3, #1
 80034a2:	2300      	moveq	r3, #0
 80034a4:	b2db      	uxtb	r3, r3
 80034a6:	e022      	b.n	80034ee <HAL_TIM_PWM_Start+0x6a>
 80034a8:	683b      	ldr	r3, [r7, #0]
 80034aa:	2b04      	cmp	r3, #4
 80034ac:	d109      	bne.n	80034c2 <HAL_TIM_PWM_Start+0x3e>
 80034ae:	687b      	ldr	r3, [r7, #4]
 80034b0:	f893 303f 	ldrb.w	r3, [r3, #63]	; 0x3f
 80034b4:	b2db      	uxtb	r3, r3
 80034b6:	2b01      	cmp	r3, #1
 80034b8:	bf14      	ite	ne
 80034ba:	2301      	movne	r3, #1
 80034bc:	2300      	moveq	r3, #0
 80034be:	b2db      	uxtb	r3, r3
 80034c0:	e015      	b.n	80034ee <HAL_TIM_PWM_Start+0x6a>
 80034c2:	683b      	ldr	r3, [r7, #0]
 80034c4:	2b08      	cmp	r3, #8
 80034c6:	d109      	bne.n	80034dc <HAL_TIM_PWM_Start+0x58>
 80034c8:	687b      	ldr	r3, [r7, #4]
 80034ca:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 80034ce:	b2db      	uxtb	r3, r3
 80034d0:	2b01      	cmp	r3, #1
 80034d2:	bf14      	ite	ne
 80034d4:	2301      	movne	r3, #1
 80034d6:	2300      	moveq	r3, #0
 80034d8:	b2db      	uxtb	r3, r3
 80034da:	e008      	b.n	80034ee <HAL_TIM_PWM_Start+0x6a>
 80034dc:	687b      	ldr	r3, [r7, #4]
 80034de:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 80034e2:	b2db      	uxtb	r3, r3
 80034e4:	2b01      	cmp	r3, #1
 80034e6:	bf14      	ite	ne
 80034e8:	2301      	movne	r3, #1
 80034ea:	2300      	moveq	r3, #0
 80034ec:	b2db      	uxtb	r3, r3
 80034ee:	2b00      	cmp	r3, #0
 80034f0:	d001      	beq.n	80034f6 <HAL_TIM_PWM_Start+0x72>
  {
    return HAL_ERROR;
 80034f2:	2301      	movs	r3, #1
 80034f4:	e05e      	b.n	80035b4 <HAL_TIM_PWM_Start+0x130>
  }

  /* Set the TIM channel state */
  TIM_CHANNEL_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_BUSY);
 80034f6:	683b      	ldr	r3, [r7, #0]
 80034f8:	2b00      	cmp	r3, #0
 80034fa:	d104      	bne.n	8003506 <HAL_TIM_PWM_Start+0x82>
 80034fc:	687b      	ldr	r3, [r7, #4]
 80034fe:	2202      	movs	r2, #2
 8003500:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8003504:	e013      	b.n	800352e <HAL_TIM_PWM_Start+0xaa>
 8003506:	683b      	ldr	r3, [r7, #0]
 8003508:	2b04      	cmp	r3, #4
 800350a:	d104      	bne.n	8003516 <HAL_TIM_PWM_Start+0x92>
 800350c:	687b      	ldr	r3, [r7, #4]
 800350e:	2202      	movs	r2, #2
 8003510:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8003514:	e00b      	b.n	800352e <HAL_TIM_PWM_Start+0xaa>
 8003516:	683b      	ldr	r3, [r7, #0]
 8003518:	2b08      	cmp	r3, #8
 800351a:	d104      	bne.n	8003526 <HAL_TIM_PWM_Start+0xa2>
 800351c:	687b      	ldr	r3, [r7, #4]
 800351e:	2202      	movs	r2, #2
 8003520:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8003524:	e003      	b.n	800352e <HAL_TIM_PWM_Start+0xaa>
 8003526:	687b      	ldr	r3, [r7, #4]
 8003528:	2202      	movs	r2, #2
 800352a:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

  /* Enable the Capture compare channel */
  TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_ENABLE);
 800352e:	687b      	ldr	r3, [r7, #4]
 8003530:	681b      	ldr	r3, [r3, #0]
 8003532:	2201      	movs	r2, #1
 8003534:	6839      	ldr	r1, [r7, #0]
 8003536:	4618      	mov	r0, r3
 8003538:	f000 fea4 	bl	8004284 <TIM_CCxChannelCmd>

  if (IS_TIM_BREAK_INSTANCE(htim->Instance) != RESET)
 800353c:	687b      	ldr	r3, [r7, #4]
 800353e:	681b      	ldr	r3, [r3, #0]
 8003540:	4a1e      	ldr	r2, [pc, #120]	; (80035bc <HAL_TIM_PWM_Start+0x138>)
 8003542:	4293      	cmp	r3, r2
 8003544:	d107      	bne.n	8003556 <HAL_TIM_PWM_Start+0xd2>
  {
    /* Enable the main output */
    __HAL_TIM_MOE_ENABLE(htim);
 8003546:	687b      	ldr	r3, [r7, #4]
 8003548:	681b      	ldr	r3, [r3, #0]
 800354a:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 800354c:	687b      	ldr	r3, [r7, #4]
 800354e:	681b      	ldr	r3, [r3, #0]
 8003550:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 8003554:	645a      	str	r2, [r3, #68]	; 0x44
  }

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8003556:	687b      	ldr	r3, [r7, #4]
 8003558:	681b      	ldr	r3, [r3, #0]
 800355a:	4a18      	ldr	r2, [pc, #96]	; (80035bc <HAL_TIM_PWM_Start+0x138>)
 800355c:	4293      	cmp	r3, r2
 800355e:	d00e      	beq.n	800357e <HAL_TIM_PWM_Start+0xfa>
 8003560:	687b      	ldr	r3, [r7, #4]
 8003562:	681b      	ldr	r3, [r3, #0]
 8003564:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8003568:	d009      	beq.n	800357e <HAL_TIM_PWM_Start+0xfa>
 800356a:	687b      	ldr	r3, [r7, #4]
 800356c:	681b      	ldr	r3, [r3, #0]
 800356e:	4a14      	ldr	r2, [pc, #80]	; (80035c0 <HAL_TIM_PWM_Start+0x13c>)
 8003570:	4293      	cmp	r3, r2
 8003572:	d004      	beq.n	800357e <HAL_TIM_PWM_Start+0xfa>
 8003574:	687b      	ldr	r3, [r7, #4]
 8003576:	681b      	ldr	r3, [r3, #0]
 8003578:	4a12      	ldr	r2, [pc, #72]	; (80035c4 <HAL_TIM_PWM_Start+0x140>)
 800357a:	4293      	cmp	r3, r2
 800357c:	d111      	bne.n	80035a2 <HAL_TIM_PWM_Start+0x11e>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 800357e:	687b      	ldr	r3, [r7, #4]
 8003580:	681b      	ldr	r3, [r3, #0]
 8003582:	689b      	ldr	r3, [r3, #8]
 8003584:	f003 0307 	and.w	r3, r3, #7
 8003588:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800358a:	68fb      	ldr	r3, [r7, #12]
 800358c:	2b06      	cmp	r3, #6
 800358e:	d010      	beq.n	80035b2 <HAL_TIM_PWM_Start+0x12e>
    {
      __HAL_TIM_ENABLE(htim);
 8003590:	687b      	ldr	r3, [r7, #4]
 8003592:	681b      	ldr	r3, [r3, #0]
 8003594:	681a      	ldr	r2, [r3, #0]
 8003596:	687b      	ldr	r3, [r7, #4]
 8003598:	681b      	ldr	r3, [r3, #0]
 800359a:	f042 0201 	orr.w	r2, r2, #1
 800359e:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80035a0:	e007      	b.n	80035b2 <HAL_TIM_PWM_Start+0x12e>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 80035a2:	687b      	ldr	r3, [r7, #4]
 80035a4:	681b      	ldr	r3, [r3, #0]
 80035a6:	681a      	ldr	r2, [r3, #0]
 80035a8:	687b      	ldr	r3, [r7, #4]
 80035aa:	681b      	ldr	r3, [r3, #0]
 80035ac:	f042 0201 	orr.w	r2, r2, #1
 80035b0:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 80035b2:	2300      	movs	r3, #0
}
 80035b4:	4618      	mov	r0, r3
 80035b6:	3710      	adds	r7, #16
 80035b8:	46bd      	mov	sp, r7
 80035ba:	bd80      	pop	{r7, pc}
 80035bc:	40012c00 	.word	0x40012c00
 80035c0:	40000400 	.word	0x40000400
 80035c4:	40000800 	.word	0x40000800

080035c8 <HAL_TIM_Encoder_Init>:
  * @param  htim TIM Encoder Interface handle
  * @param  sConfig TIM Encoder Interface configuration structure
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Encoder_Init(TIM_HandleTypeDef *htim,  TIM_Encoder_InitTypeDef *sConfig)
{
 80035c8:	b580      	push	{r7, lr}
 80035ca:	b086      	sub	sp, #24
 80035cc:	af00      	add	r7, sp, #0
 80035ce:	6078      	str	r0, [r7, #4]
 80035d0:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Check the TIM handle allocation */
  if (htim == NULL)
 80035d2:	687b      	ldr	r3, [r7, #4]
 80035d4:	2b00      	cmp	r3, #0
 80035d6:	d101      	bne.n	80035dc <HAL_TIM_Encoder_Init+0x14>
  {
    return HAL_ERROR;
 80035d8:	2301      	movs	r3, #1
 80035da:	e093      	b.n	8003704 <HAL_TIM_Encoder_Init+0x13c>
  assert_param(IS_TIM_IC_PRESCALER(sConfig->IC1Prescaler));
  assert_param(IS_TIM_IC_PRESCALER(sConfig->IC2Prescaler));
  assert_param(IS_TIM_IC_FILTER(sConfig->IC1Filter));
  assert_param(IS_TIM_IC_FILTER(sConfig->IC2Filter));

  if (htim->State == HAL_TIM_STATE_RESET)
 80035dc:	687b      	ldr	r3, [r7, #4]
 80035de:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80035e2:	b2db      	uxtb	r3, r3
 80035e4:	2b00      	cmp	r3, #0
 80035e6:	d106      	bne.n	80035f6 <HAL_TIM_Encoder_Init+0x2e>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 80035e8:	687b      	ldr	r3, [r7, #4]
 80035ea:	2200      	movs	r2, #0
 80035ec:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Encoder_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_Encoder_MspInit(htim);
 80035f0:	6878      	ldr	r0, [r7, #4]
 80035f2:	f7fe fd13 	bl	800201c <HAL_TIM_Encoder_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 80035f6:	687b      	ldr	r3, [r7, #4]
 80035f8:	2202      	movs	r2, #2
 80035fa:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Reset the SMS and ECE bits */
  htim->Instance->SMCR &= ~(TIM_SMCR_SMS | TIM_SMCR_ECE);
 80035fe:	687b      	ldr	r3, [r7, #4]
 8003600:	681b      	ldr	r3, [r3, #0]
 8003602:	689b      	ldr	r3, [r3, #8]
 8003604:	687a      	ldr	r2, [r7, #4]
 8003606:	6812      	ldr	r2, [r2, #0]
 8003608:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 800360c:	f023 0307 	bic.w	r3, r3, #7
 8003610:	6093      	str	r3, [r2, #8]

  /* Configure the Time base in the Encoder Mode */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8003612:	687b      	ldr	r3, [r7, #4]
 8003614:	681a      	ldr	r2, [r3, #0]
 8003616:	687b      	ldr	r3, [r7, #4]
 8003618:	3304      	adds	r3, #4
 800361a:	4619      	mov	r1, r3
 800361c:	4610      	mov	r0, r2
 800361e:	f000 fbb1 	bl	8003d84 <TIM_Base_SetConfig>

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 8003622:	687b      	ldr	r3, [r7, #4]
 8003624:	681b      	ldr	r3, [r3, #0]
 8003626:	689b      	ldr	r3, [r3, #8]
 8003628:	617b      	str	r3, [r7, #20]

  /* Get the TIMx CCMR1 register value */
  tmpccmr1 = htim->Instance->CCMR1;
 800362a:	687b      	ldr	r3, [r7, #4]
 800362c:	681b      	ldr	r3, [r3, #0]
 800362e:	699b      	ldr	r3, [r3, #24]
 8003630:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCER register value */
  tmpccer = htim->Instance->CCER;
 8003632:	687b      	ldr	r3, [r7, #4]
 8003634:	681b      	ldr	r3, [r3, #0]
 8003636:	6a1b      	ldr	r3, [r3, #32]
 8003638:	60fb      	str	r3, [r7, #12]

  /* Set the encoder Mode */
  tmpsmcr |= sConfig->EncoderMode;
 800363a:	683b      	ldr	r3, [r7, #0]
 800363c:	681b      	ldr	r3, [r3, #0]
 800363e:	697a      	ldr	r2, [r7, #20]
 8003640:	4313      	orrs	r3, r2
 8003642:	617b      	str	r3, [r7, #20]

  /* Select the Capture Compare 1 and the Capture Compare 2 as input */
  tmpccmr1 &= ~(TIM_CCMR1_CC1S | TIM_CCMR1_CC2S);
 8003644:	693b      	ldr	r3, [r7, #16]
 8003646:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 800364a:	f023 0303 	bic.w	r3, r3, #3
 800364e:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (sConfig->IC1Selection | (sConfig->IC2Selection << 8U));
 8003650:	683b      	ldr	r3, [r7, #0]
 8003652:	689a      	ldr	r2, [r3, #8]
 8003654:	683b      	ldr	r3, [r7, #0]
 8003656:	699b      	ldr	r3, [r3, #24]
 8003658:	021b      	lsls	r3, r3, #8
 800365a:	4313      	orrs	r3, r2
 800365c:	693a      	ldr	r2, [r7, #16]
 800365e:	4313      	orrs	r3, r2
 8003660:	613b      	str	r3, [r7, #16]

  /* Set the Capture Compare 1 and the Capture Compare 2 prescalers and filters */
  tmpccmr1 &= ~(TIM_CCMR1_IC1PSC | TIM_CCMR1_IC2PSC);
 8003662:	693b      	ldr	r3, [r7, #16]
 8003664:	f423 6340 	bic.w	r3, r3, #3072	; 0xc00
 8003668:	f023 030c 	bic.w	r3, r3, #12
 800366c:	613b      	str	r3, [r7, #16]
  tmpccmr1 &= ~(TIM_CCMR1_IC1F | TIM_CCMR1_IC2F);
 800366e:	693b      	ldr	r3, [r7, #16]
 8003670:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 8003674:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 8003678:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= sConfig->IC1Prescaler | (sConfig->IC2Prescaler << 8U);
 800367a:	683b      	ldr	r3, [r7, #0]
 800367c:	68da      	ldr	r2, [r3, #12]
 800367e:	683b      	ldr	r3, [r7, #0]
 8003680:	69db      	ldr	r3, [r3, #28]
 8003682:	021b      	lsls	r3, r3, #8
 8003684:	4313      	orrs	r3, r2
 8003686:	693a      	ldr	r2, [r7, #16]
 8003688:	4313      	orrs	r3, r2
 800368a:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (sConfig->IC1Filter << 4U) | (sConfig->IC2Filter << 12U);
 800368c:	683b      	ldr	r3, [r7, #0]
 800368e:	691b      	ldr	r3, [r3, #16]
 8003690:	011a      	lsls	r2, r3, #4
 8003692:	683b      	ldr	r3, [r7, #0]
 8003694:	6a1b      	ldr	r3, [r3, #32]
 8003696:	031b      	lsls	r3, r3, #12
 8003698:	4313      	orrs	r3, r2
 800369a:	693a      	ldr	r2, [r7, #16]
 800369c:	4313      	orrs	r3, r2
 800369e:	613b      	str	r3, [r7, #16]

  /* Set the TI1 and the TI2 Polarities */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC2P);
 80036a0:	68fb      	ldr	r3, [r7, #12]
 80036a2:	f023 0322 	bic.w	r3, r3, #34	; 0x22
 80036a6:	60fb      	str	r3, [r7, #12]
  tmpccer |= sConfig->IC1Polarity | (sConfig->IC2Polarity << 4U);
 80036a8:	683b      	ldr	r3, [r7, #0]
 80036aa:	685a      	ldr	r2, [r3, #4]
 80036ac:	683b      	ldr	r3, [r7, #0]
 80036ae:	695b      	ldr	r3, [r3, #20]
 80036b0:	011b      	lsls	r3, r3, #4
 80036b2:	4313      	orrs	r3, r2
 80036b4:	68fa      	ldr	r2, [r7, #12]
 80036b6:	4313      	orrs	r3, r2
 80036b8:	60fb      	str	r3, [r7, #12]

  /* Write to TIMx SMCR */
  htim->Instance->SMCR = tmpsmcr;
 80036ba:	687b      	ldr	r3, [r7, #4]
 80036bc:	681b      	ldr	r3, [r3, #0]
 80036be:	697a      	ldr	r2, [r7, #20]
 80036c0:	609a      	str	r2, [r3, #8]

  /* Write to TIMx CCMR1 */
  htim->Instance->CCMR1 = tmpccmr1;
 80036c2:	687b      	ldr	r3, [r7, #4]
 80036c4:	681b      	ldr	r3, [r3, #0]
 80036c6:	693a      	ldr	r2, [r7, #16]
 80036c8:	619a      	str	r2, [r3, #24]

  /* Write to TIMx CCER */
  htim->Instance->CCER = tmpccer;
 80036ca:	687b      	ldr	r3, [r7, #4]
 80036cc:	681b      	ldr	r3, [r3, #0]
 80036ce:	68fa      	ldr	r2, [r7, #12]
 80036d0:	621a      	str	r2, [r3, #32]

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 80036d2:	687b      	ldr	r3, [r7, #4]
 80036d4:	2201      	movs	r2, #1
 80036d6:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46

  /* Set the TIM channels state */
  TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_READY);
 80036da:	687b      	ldr	r3, [r7, #4]
 80036dc:	2201      	movs	r2, #1
 80036de:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
  TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_READY);
 80036e2:	687b      	ldr	r3, [r7, #4]
 80036e4:	2201      	movs	r2, #1
 80036e6:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
  TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_READY);
 80036ea:	687b      	ldr	r3, [r7, #4]
 80036ec:	2201      	movs	r2, #1
 80036ee:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
  TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_READY);
 80036f2:	687b      	ldr	r3, [r7, #4]
 80036f4:	2201      	movs	r2, #1
 80036f6:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 80036fa:	687b      	ldr	r3, [r7, #4]
 80036fc:	2201      	movs	r2, #1
 80036fe:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8003702:	2300      	movs	r3, #0
}
 8003704:	4618      	mov	r0, r3
 8003706:	3718      	adds	r7, #24
 8003708:	46bd      	mov	sp, r7
 800370a:	bd80      	pop	{r7, pc}

0800370c <HAL_TIM_Encoder_Start>:
  *            @arg TIM_CHANNEL_2: TIM Channel 2 selected
  *            @arg TIM_CHANNEL_ALL: TIM Channel 1 and TIM Channel 2 are selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Encoder_Start(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 800370c:	b580      	push	{r7, lr}
 800370e:	b084      	sub	sp, #16
 8003710:	af00      	add	r7, sp, #0
 8003712:	6078      	str	r0, [r7, #4]
 8003714:	6039      	str	r1, [r7, #0]
  HAL_TIM_ChannelStateTypeDef channel_1_state = TIM_CHANNEL_STATE_GET(htim, TIM_CHANNEL_1);
 8003716:	687b      	ldr	r3, [r7, #4]
 8003718:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 800371c:	73fb      	strb	r3, [r7, #15]
  HAL_TIM_ChannelStateTypeDef channel_2_state = TIM_CHANNEL_STATE_GET(htim, TIM_CHANNEL_2);
 800371e:	687b      	ldr	r3, [r7, #4]
 8003720:	f893 303f 	ldrb.w	r3, [r3, #63]	; 0x3f
 8003724:	73bb      	strb	r3, [r7, #14]
  HAL_TIM_ChannelStateTypeDef complementary_channel_1_state = TIM_CHANNEL_N_STATE_GET(htim, TIM_CHANNEL_1);
 8003726:	687b      	ldr	r3, [r7, #4]
 8003728:	f893 3042 	ldrb.w	r3, [r3, #66]	; 0x42
 800372c:	737b      	strb	r3, [r7, #13]
  HAL_TIM_ChannelStateTypeDef complementary_channel_2_state = TIM_CHANNEL_N_STATE_GET(htim, TIM_CHANNEL_2);
 800372e:	687b      	ldr	r3, [r7, #4]
 8003730:	f893 3043 	ldrb.w	r3, [r3, #67]	; 0x43
 8003734:	733b      	strb	r3, [r7, #12]

  /* Check the parameters */
  assert_param(IS_TIM_ENCODER_INTERFACE_INSTANCE(htim->Instance));

  /* Set the TIM channel(s) state */
  if (Channel == TIM_CHANNEL_1)
 8003736:	683b      	ldr	r3, [r7, #0]
 8003738:	2b00      	cmp	r3, #0
 800373a:	d110      	bne.n	800375e <HAL_TIM_Encoder_Start+0x52>
  {
    if ((channel_1_state != HAL_TIM_CHANNEL_STATE_READY)
 800373c:	7bfb      	ldrb	r3, [r7, #15]
 800373e:	2b01      	cmp	r3, #1
 8003740:	d102      	bne.n	8003748 <HAL_TIM_Encoder_Start+0x3c>
        || (complementary_channel_1_state != HAL_TIM_CHANNEL_STATE_READY))
 8003742:	7b7b      	ldrb	r3, [r7, #13]
 8003744:	2b01      	cmp	r3, #1
 8003746:	d001      	beq.n	800374c <HAL_TIM_Encoder_Start+0x40>
    {
      return HAL_ERROR;
 8003748:	2301      	movs	r3, #1
 800374a:	e069      	b.n	8003820 <HAL_TIM_Encoder_Start+0x114>
    }
    else
    {
      TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_BUSY);
 800374c:	687b      	ldr	r3, [r7, #4]
 800374e:	2202      	movs	r2, #2
 8003750:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_BUSY);
 8003754:	687b      	ldr	r3, [r7, #4]
 8003756:	2202      	movs	r2, #2
 8003758:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 800375c:	e031      	b.n	80037c2 <HAL_TIM_Encoder_Start+0xb6>
    }
  }
  else if (Channel == TIM_CHANNEL_2)
 800375e:	683b      	ldr	r3, [r7, #0]
 8003760:	2b04      	cmp	r3, #4
 8003762:	d110      	bne.n	8003786 <HAL_TIM_Encoder_Start+0x7a>
  {
    if ((channel_2_state != HAL_TIM_CHANNEL_STATE_READY)
 8003764:	7bbb      	ldrb	r3, [r7, #14]
 8003766:	2b01      	cmp	r3, #1
 8003768:	d102      	bne.n	8003770 <HAL_TIM_Encoder_Start+0x64>
        || (complementary_channel_2_state != HAL_TIM_CHANNEL_STATE_READY))
 800376a:	7b3b      	ldrb	r3, [r7, #12]
 800376c:	2b01      	cmp	r3, #1
 800376e:	d001      	beq.n	8003774 <HAL_TIM_Encoder_Start+0x68>
    {
      return HAL_ERROR;
 8003770:	2301      	movs	r3, #1
 8003772:	e055      	b.n	8003820 <HAL_TIM_Encoder_Start+0x114>
    }
    else
    {
      TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_BUSY);
 8003774:	687b      	ldr	r3, [r7, #4]
 8003776:	2202      	movs	r2, #2
 8003778:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
      TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_BUSY);
 800377c:	687b      	ldr	r3, [r7, #4]
 800377e:	2202      	movs	r2, #2
 8003780:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 8003784:	e01d      	b.n	80037c2 <HAL_TIM_Encoder_Start+0xb6>
    }
  }
  else
  {
    if ((channel_1_state != HAL_TIM_CHANNEL_STATE_READY)
 8003786:	7bfb      	ldrb	r3, [r7, #15]
 8003788:	2b01      	cmp	r3, #1
 800378a:	d108      	bne.n	800379e <HAL_TIM_Encoder_Start+0x92>
        || (channel_2_state != HAL_TIM_CHANNEL_STATE_READY)
 800378c:	7bbb      	ldrb	r3, [r7, #14]
 800378e:	2b01      	cmp	r3, #1
 8003790:	d105      	bne.n	800379e <HAL_TIM_Encoder_Start+0x92>
        || (complementary_channel_1_state != HAL_TIM_CHANNEL_STATE_READY)
 8003792:	7b7b      	ldrb	r3, [r7, #13]
 8003794:	2b01      	cmp	r3, #1
 8003796:	d102      	bne.n	800379e <HAL_TIM_Encoder_Start+0x92>
        || (complementary_channel_2_state != HAL_TIM_CHANNEL_STATE_READY))
 8003798:	7b3b      	ldrb	r3, [r7, #12]
 800379a:	2b01      	cmp	r3, #1
 800379c:	d001      	beq.n	80037a2 <HAL_TIM_Encoder_Start+0x96>
    {
      return HAL_ERROR;
 800379e:	2301      	movs	r3, #1
 80037a0:	e03e      	b.n	8003820 <HAL_TIM_Encoder_Start+0x114>
    }
    else
    {
      TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_BUSY);
 80037a2:	687b      	ldr	r3, [r7, #4]
 80037a4:	2202      	movs	r2, #2
 80037a6:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_BUSY);
 80037aa:	687b      	ldr	r3, [r7, #4]
 80037ac:	2202      	movs	r2, #2
 80037ae:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
      TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_BUSY);
 80037b2:	687b      	ldr	r3, [r7, #4]
 80037b4:	2202      	movs	r2, #2
 80037b6:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
      TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_BUSY);
 80037ba:	687b      	ldr	r3, [r7, #4]
 80037bc:	2202      	movs	r2, #2
 80037be:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
    }
  }

  /* Enable the encoder interface channels */
  switch (Channel)
 80037c2:	683b      	ldr	r3, [r7, #0]
 80037c4:	2b00      	cmp	r3, #0
 80037c6:	d003      	beq.n	80037d0 <HAL_TIM_Encoder_Start+0xc4>
 80037c8:	683b      	ldr	r3, [r7, #0]
 80037ca:	2b04      	cmp	r3, #4
 80037cc:	d008      	beq.n	80037e0 <HAL_TIM_Encoder_Start+0xd4>
 80037ce:	e00f      	b.n	80037f0 <HAL_TIM_Encoder_Start+0xe4>
  {
    case TIM_CHANNEL_1:
    {
      TIM_CCxChannelCmd(htim->Instance, TIM_CHANNEL_1, TIM_CCx_ENABLE);
 80037d0:	687b      	ldr	r3, [r7, #4]
 80037d2:	681b      	ldr	r3, [r3, #0]
 80037d4:	2201      	movs	r2, #1
 80037d6:	2100      	movs	r1, #0
 80037d8:	4618      	mov	r0, r3
 80037da:	f000 fd53 	bl	8004284 <TIM_CCxChannelCmd>
      break;
 80037de:	e016      	b.n	800380e <HAL_TIM_Encoder_Start+0x102>
    }

    case TIM_CHANNEL_2:
    {
      TIM_CCxChannelCmd(htim->Instance, TIM_CHANNEL_2, TIM_CCx_ENABLE);
 80037e0:	687b      	ldr	r3, [r7, #4]
 80037e2:	681b      	ldr	r3, [r3, #0]
 80037e4:	2201      	movs	r2, #1
 80037e6:	2104      	movs	r1, #4
 80037e8:	4618      	mov	r0, r3
 80037ea:	f000 fd4b 	bl	8004284 <TIM_CCxChannelCmd>
      break;
 80037ee:	e00e      	b.n	800380e <HAL_TIM_Encoder_Start+0x102>
    }

    default :
    {
      TIM_CCxChannelCmd(htim->Instance, TIM_CHANNEL_1, TIM_CCx_ENABLE);
 80037f0:	687b      	ldr	r3, [r7, #4]
 80037f2:	681b      	ldr	r3, [r3, #0]
 80037f4:	2201      	movs	r2, #1
 80037f6:	2100      	movs	r1, #0
 80037f8:	4618      	mov	r0, r3
 80037fa:	f000 fd43 	bl	8004284 <TIM_CCxChannelCmd>
      TIM_CCxChannelCmd(htim->Instance, TIM_CHANNEL_2, TIM_CCx_ENABLE);
 80037fe:	687b      	ldr	r3, [r7, #4]
 8003800:	681b      	ldr	r3, [r3, #0]
 8003802:	2201      	movs	r2, #1
 8003804:	2104      	movs	r1, #4
 8003806:	4618      	mov	r0, r3
 8003808:	f000 fd3c 	bl	8004284 <TIM_CCxChannelCmd>
      break;
 800380c:	bf00      	nop
    }
  }
  /* Enable the Peripheral */
  __HAL_TIM_ENABLE(htim);
 800380e:	687b      	ldr	r3, [r7, #4]
 8003810:	681b      	ldr	r3, [r3, #0]
 8003812:	681a      	ldr	r2, [r3, #0]
 8003814:	687b      	ldr	r3, [r7, #4]
 8003816:	681b      	ldr	r3, [r3, #0]
 8003818:	f042 0201 	orr.w	r2, r2, #1
 800381c:	601a      	str	r2, [r3, #0]

  /* Return function status */
  return HAL_OK;
 800381e:	2300      	movs	r3, #0
}
 8003820:	4618      	mov	r0, r3
 8003822:	3710      	adds	r7, #16
 8003824:	46bd      	mov	sp, r7
 8003826:	bd80      	pop	{r7, pc}

08003828 <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 8003828:	b580      	push	{r7, lr}
 800382a:	b082      	sub	sp, #8
 800382c:	af00      	add	r7, sp, #0
 800382e:	6078      	str	r0, [r7, #4]
  /* Capture compare 1 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 8003830:	687b      	ldr	r3, [r7, #4]
 8003832:	681b      	ldr	r3, [r3, #0]
 8003834:	691b      	ldr	r3, [r3, #16]
 8003836:	f003 0302 	and.w	r3, r3, #2
 800383a:	2b02      	cmp	r3, #2
 800383c:	d122      	bne.n	8003884 <HAL_TIM_IRQHandler+0x5c>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC1) != RESET)
 800383e:	687b      	ldr	r3, [r7, #4]
 8003840:	681b      	ldr	r3, [r3, #0]
 8003842:	68db      	ldr	r3, [r3, #12]
 8003844:	f003 0302 	and.w	r3, r3, #2
 8003848:	2b02      	cmp	r3, #2
 800384a:	d11b      	bne.n	8003884 <HAL_TIM_IRQHandler+0x5c>
    {
      {
        __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC1);
 800384c:	687b      	ldr	r3, [r7, #4]
 800384e:	681b      	ldr	r3, [r3, #0]
 8003850:	f06f 0202 	mvn.w	r2, #2
 8003854:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 8003856:	687b      	ldr	r3, [r7, #4]
 8003858:	2201      	movs	r2, #1
 800385a:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 800385c:	687b      	ldr	r3, [r7, #4]
 800385e:	681b      	ldr	r3, [r3, #0]
 8003860:	699b      	ldr	r3, [r3, #24]
 8003862:	f003 0303 	and.w	r3, r3, #3
 8003866:	2b00      	cmp	r3, #0
 8003868:	d003      	beq.n	8003872 <HAL_TIM_IRQHandler+0x4a>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 800386a:	6878      	ldr	r0, [r7, #4]
 800386c:	f000 fa6f 	bl	8003d4e <HAL_TIM_IC_CaptureCallback>
 8003870:	e005      	b.n	800387e <HAL_TIM_IRQHandler+0x56>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 8003872:	6878      	ldr	r0, [r7, #4]
 8003874:	f000 fa62 	bl	8003d3c <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 8003878:	6878      	ldr	r0, [r7, #4]
 800387a:	f000 fa71 	bl	8003d60 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800387e:	687b      	ldr	r3, [r7, #4]
 8003880:	2200      	movs	r2, #0
 8003882:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC2) != RESET)
 8003884:	687b      	ldr	r3, [r7, #4]
 8003886:	681b      	ldr	r3, [r3, #0]
 8003888:	691b      	ldr	r3, [r3, #16]
 800388a:	f003 0304 	and.w	r3, r3, #4
 800388e:	2b04      	cmp	r3, #4
 8003890:	d122      	bne.n	80038d8 <HAL_TIM_IRQHandler+0xb0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC2) != RESET)
 8003892:	687b      	ldr	r3, [r7, #4]
 8003894:	681b      	ldr	r3, [r3, #0]
 8003896:	68db      	ldr	r3, [r3, #12]
 8003898:	f003 0304 	and.w	r3, r3, #4
 800389c:	2b04      	cmp	r3, #4
 800389e:	d11b      	bne.n	80038d8 <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC2);
 80038a0:	687b      	ldr	r3, [r7, #4]
 80038a2:	681b      	ldr	r3, [r3, #0]
 80038a4:	f06f 0204 	mvn.w	r2, #4
 80038a8:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 80038aa:	687b      	ldr	r3, [r7, #4]
 80038ac:	2202      	movs	r2, #2
 80038ae:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 80038b0:	687b      	ldr	r3, [r7, #4]
 80038b2:	681b      	ldr	r3, [r3, #0]
 80038b4:	699b      	ldr	r3, [r3, #24]
 80038b6:	f403 7340 	and.w	r3, r3, #768	; 0x300
 80038ba:	2b00      	cmp	r3, #0
 80038bc:	d003      	beq.n	80038c6 <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 80038be:	6878      	ldr	r0, [r7, #4]
 80038c0:	f000 fa45 	bl	8003d4e <HAL_TIM_IC_CaptureCallback>
 80038c4:	e005      	b.n	80038d2 <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 80038c6:	6878      	ldr	r0, [r7, #4]
 80038c8:	f000 fa38 	bl	8003d3c <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 80038cc:	6878      	ldr	r0, [r7, #4]
 80038ce:	f000 fa47 	bl	8003d60 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80038d2:	687b      	ldr	r3, [r7, #4]
 80038d4:	2200      	movs	r2, #0
 80038d6:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC3) != RESET)
 80038d8:	687b      	ldr	r3, [r7, #4]
 80038da:	681b      	ldr	r3, [r3, #0]
 80038dc:	691b      	ldr	r3, [r3, #16]
 80038de:	f003 0308 	and.w	r3, r3, #8
 80038e2:	2b08      	cmp	r3, #8
 80038e4:	d122      	bne.n	800392c <HAL_TIM_IRQHandler+0x104>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC3) != RESET)
 80038e6:	687b      	ldr	r3, [r7, #4]
 80038e8:	681b      	ldr	r3, [r3, #0]
 80038ea:	68db      	ldr	r3, [r3, #12]
 80038ec:	f003 0308 	and.w	r3, r3, #8
 80038f0:	2b08      	cmp	r3, #8
 80038f2:	d11b      	bne.n	800392c <HAL_TIM_IRQHandler+0x104>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC3);
 80038f4:	687b      	ldr	r3, [r7, #4]
 80038f6:	681b      	ldr	r3, [r3, #0]
 80038f8:	f06f 0208 	mvn.w	r2, #8
 80038fc:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 80038fe:	687b      	ldr	r3, [r7, #4]
 8003900:	2204      	movs	r2, #4
 8003902:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 8003904:	687b      	ldr	r3, [r7, #4]
 8003906:	681b      	ldr	r3, [r3, #0]
 8003908:	69db      	ldr	r3, [r3, #28]
 800390a:	f003 0303 	and.w	r3, r3, #3
 800390e:	2b00      	cmp	r3, #0
 8003910:	d003      	beq.n	800391a <HAL_TIM_IRQHandler+0xf2>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8003912:	6878      	ldr	r0, [r7, #4]
 8003914:	f000 fa1b 	bl	8003d4e <HAL_TIM_IC_CaptureCallback>
 8003918:	e005      	b.n	8003926 <HAL_TIM_IRQHandler+0xfe>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 800391a:	6878      	ldr	r0, [r7, #4]
 800391c:	f000 fa0e 	bl	8003d3c <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8003920:	6878      	ldr	r0, [r7, #4]
 8003922:	f000 fa1d 	bl	8003d60 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8003926:	687b      	ldr	r3, [r7, #4]
 8003928:	2200      	movs	r2, #0
 800392a:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC4) != RESET)
 800392c:	687b      	ldr	r3, [r7, #4]
 800392e:	681b      	ldr	r3, [r3, #0]
 8003930:	691b      	ldr	r3, [r3, #16]
 8003932:	f003 0310 	and.w	r3, r3, #16
 8003936:	2b10      	cmp	r3, #16
 8003938:	d122      	bne.n	8003980 <HAL_TIM_IRQHandler+0x158>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC4) != RESET)
 800393a:	687b      	ldr	r3, [r7, #4]
 800393c:	681b      	ldr	r3, [r3, #0]
 800393e:	68db      	ldr	r3, [r3, #12]
 8003940:	f003 0310 	and.w	r3, r3, #16
 8003944:	2b10      	cmp	r3, #16
 8003946:	d11b      	bne.n	8003980 <HAL_TIM_IRQHandler+0x158>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC4);
 8003948:	687b      	ldr	r3, [r7, #4]
 800394a:	681b      	ldr	r3, [r3, #0]
 800394c:	f06f 0210 	mvn.w	r2, #16
 8003950:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 8003952:	687b      	ldr	r3, [r7, #4]
 8003954:	2208      	movs	r2, #8
 8003956:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 8003958:	687b      	ldr	r3, [r7, #4]
 800395a:	681b      	ldr	r3, [r3, #0]
 800395c:	69db      	ldr	r3, [r3, #28]
 800395e:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8003962:	2b00      	cmp	r3, #0
 8003964:	d003      	beq.n	800396e <HAL_TIM_IRQHandler+0x146>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8003966:	6878      	ldr	r0, [r7, #4]
 8003968:	f000 f9f1 	bl	8003d4e <HAL_TIM_IC_CaptureCallback>
 800396c:	e005      	b.n	800397a <HAL_TIM_IRQHandler+0x152>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 800396e:	6878      	ldr	r0, [r7, #4]
 8003970:	f000 f9e4 	bl	8003d3c <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8003974:	6878      	ldr	r0, [r7, #4]
 8003976:	f000 f9f3 	bl	8003d60 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800397a:	687b      	ldr	r3, [r7, #4]
 800397c:	2200      	movs	r2, #0
 800397e:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_UPDATE) != RESET)
 8003980:	687b      	ldr	r3, [r7, #4]
 8003982:	681b      	ldr	r3, [r3, #0]
 8003984:	691b      	ldr	r3, [r3, #16]
 8003986:	f003 0301 	and.w	r3, r3, #1
 800398a:	2b01      	cmp	r3, #1
 800398c:	d10e      	bne.n	80039ac <HAL_TIM_IRQHandler+0x184>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_UPDATE) != RESET)
 800398e:	687b      	ldr	r3, [r7, #4]
 8003990:	681b      	ldr	r3, [r3, #0]
 8003992:	68db      	ldr	r3, [r3, #12]
 8003994:	f003 0301 	and.w	r3, r3, #1
 8003998:	2b01      	cmp	r3, #1
 800399a:	d107      	bne.n	80039ac <HAL_TIM_IRQHandler+0x184>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_UPDATE);
 800399c:	687b      	ldr	r3, [r7, #4]
 800399e:	681b      	ldr	r3, [r3, #0]
 80039a0:	f06f 0201 	mvn.w	r2, #1
 80039a4:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 80039a6:	6878      	ldr	r0, [r7, #4]
 80039a8:	f7fd fca4 	bl	80012f4 <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK) != RESET)
 80039ac:	687b      	ldr	r3, [r7, #4]
 80039ae:	681b      	ldr	r3, [r3, #0]
 80039b0:	691b      	ldr	r3, [r3, #16]
 80039b2:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80039b6:	2b80      	cmp	r3, #128	; 0x80
 80039b8:	d10e      	bne.n	80039d8 <HAL_TIM_IRQHandler+0x1b0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 80039ba:	687b      	ldr	r3, [r7, #4]
 80039bc:	681b      	ldr	r3, [r3, #0]
 80039be:	68db      	ldr	r3, [r3, #12]
 80039c0:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80039c4:	2b80      	cmp	r3, #128	; 0x80
 80039c6:	d107      	bne.n	80039d8 <HAL_TIM_IRQHandler+0x1b0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_BREAK);
 80039c8:	687b      	ldr	r3, [r7, #4]
 80039ca:	681b      	ldr	r3, [r3, #0]
 80039cc:	f06f 0280 	mvn.w	r2, #128	; 0x80
 80039d0:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 80039d2:	6878      	ldr	r0, [r7, #4]
 80039d4:	f000 fce1 	bl	800439a <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_TRIGGER) != RESET)
 80039d8:	687b      	ldr	r3, [r7, #4]
 80039da:	681b      	ldr	r3, [r3, #0]
 80039dc:	691b      	ldr	r3, [r3, #16]
 80039de:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80039e2:	2b40      	cmp	r3, #64	; 0x40
 80039e4:	d10e      	bne.n	8003a04 <HAL_TIM_IRQHandler+0x1dc>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_TRIGGER) != RESET)
 80039e6:	687b      	ldr	r3, [r7, #4]
 80039e8:	681b      	ldr	r3, [r3, #0]
 80039ea:	68db      	ldr	r3, [r3, #12]
 80039ec:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80039f0:	2b40      	cmp	r3, #64	; 0x40
 80039f2:	d107      	bne.n	8003a04 <HAL_TIM_IRQHandler+0x1dc>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_TRIGGER);
 80039f4:	687b      	ldr	r3, [r7, #4]
 80039f6:	681b      	ldr	r3, [r3, #0]
 80039f8:	f06f 0240 	mvn.w	r2, #64	; 0x40
 80039fc:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 80039fe:	6878      	ldr	r0, [r7, #4]
 8003a00:	f000 f9b7 	bl	8003d72 <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_COM) != RESET)
 8003a04:	687b      	ldr	r3, [r7, #4]
 8003a06:	681b      	ldr	r3, [r3, #0]
 8003a08:	691b      	ldr	r3, [r3, #16]
 8003a0a:	f003 0320 	and.w	r3, r3, #32
 8003a0e:	2b20      	cmp	r3, #32
 8003a10:	d10e      	bne.n	8003a30 <HAL_TIM_IRQHandler+0x208>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_COM) != RESET)
 8003a12:	687b      	ldr	r3, [r7, #4]
 8003a14:	681b      	ldr	r3, [r3, #0]
 8003a16:	68db      	ldr	r3, [r3, #12]
 8003a18:	f003 0320 	and.w	r3, r3, #32
 8003a1c:	2b20      	cmp	r3, #32
 8003a1e:	d107      	bne.n	8003a30 <HAL_TIM_IRQHandler+0x208>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_COM);
 8003a20:	687b      	ldr	r3, [r7, #4]
 8003a22:	681b      	ldr	r3, [r3, #0]
 8003a24:	f06f 0220 	mvn.w	r2, #32
 8003a28:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 8003a2a:	6878      	ldr	r0, [r7, #4]
 8003a2c:	f000 fcac 	bl	8004388 <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 8003a30:	bf00      	nop
 8003a32:	3708      	adds	r7, #8
 8003a34:	46bd      	mov	sp, r7
 8003a36:	bd80      	pop	{r7, pc}

08003a38 <HAL_TIM_PWM_ConfigChannel>:
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_ConfigChannel(TIM_HandleTypeDef *htim,
                                            TIM_OC_InitTypeDef *sConfig,
                                            uint32_t Channel)
{
 8003a38:	b580      	push	{r7, lr}
 8003a3a:	b084      	sub	sp, #16
 8003a3c:	af00      	add	r7, sp, #0
 8003a3e:	60f8      	str	r0, [r7, #12]
 8003a40:	60b9      	str	r1, [r7, #8]
 8003a42:	607a      	str	r2, [r7, #4]
  assert_param(IS_TIM_PWM_MODE(sConfig->OCMode));
  assert_param(IS_TIM_OC_POLARITY(sConfig->OCPolarity));
  assert_param(IS_TIM_FAST_STATE(sConfig->OCFastMode));

  /* Process Locked */
  __HAL_LOCK(htim);
 8003a44:	68fb      	ldr	r3, [r7, #12]
 8003a46:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8003a4a:	2b01      	cmp	r3, #1
 8003a4c:	d101      	bne.n	8003a52 <HAL_TIM_PWM_ConfigChannel+0x1a>
 8003a4e:	2302      	movs	r3, #2
 8003a50:	e0ac      	b.n	8003bac <HAL_TIM_PWM_ConfigChannel+0x174>
 8003a52:	68fb      	ldr	r3, [r7, #12]
 8003a54:	2201      	movs	r2, #1
 8003a56:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  switch (Channel)
 8003a5a:	687b      	ldr	r3, [r7, #4]
 8003a5c:	2b0c      	cmp	r3, #12
 8003a5e:	f200 809f 	bhi.w	8003ba0 <HAL_TIM_PWM_ConfigChannel+0x168>
 8003a62:	a201      	add	r2, pc, #4	; (adr r2, 8003a68 <HAL_TIM_PWM_ConfigChannel+0x30>)
 8003a64:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8003a68:	08003a9d 	.word	0x08003a9d
 8003a6c:	08003ba1 	.word	0x08003ba1
 8003a70:	08003ba1 	.word	0x08003ba1
 8003a74:	08003ba1 	.word	0x08003ba1
 8003a78:	08003add 	.word	0x08003add
 8003a7c:	08003ba1 	.word	0x08003ba1
 8003a80:	08003ba1 	.word	0x08003ba1
 8003a84:	08003ba1 	.word	0x08003ba1
 8003a88:	08003b1f 	.word	0x08003b1f
 8003a8c:	08003ba1 	.word	0x08003ba1
 8003a90:	08003ba1 	.word	0x08003ba1
 8003a94:	08003ba1 	.word	0x08003ba1
 8003a98:	08003b5f 	.word	0x08003b5f
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));

      /* Configure the Channel 1 in PWM mode */
      TIM_OC1_SetConfig(htim->Instance, sConfig);
 8003a9c:	68fb      	ldr	r3, [r7, #12]
 8003a9e:	681b      	ldr	r3, [r3, #0]
 8003aa0:	68b9      	ldr	r1, [r7, #8]
 8003aa2:	4618      	mov	r0, r3
 8003aa4:	f000 f9d0 	bl	8003e48 <TIM_OC1_SetConfig>

      /* Set the Preload enable bit for channel1 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC1PE;
 8003aa8:	68fb      	ldr	r3, [r7, #12]
 8003aaa:	681b      	ldr	r3, [r3, #0]
 8003aac:	699a      	ldr	r2, [r3, #24]
 8003aae:	68fb      	ldr	r3, [r7, #12]
 8003ab0:	681b      	ldr	r3, [r3, #0]
 8003ab2:	f042 0208 	orr.w	r2, r2, #8
 8003ab6:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC1FE;
 8003ab8:	68fb      	ldr	r3, [r7, #12]
 8003aba:	681b      	ldr	r3, [r3, #0]
 8003abc:	699a      	ldr	r2, [r3, #24]
 8003abe:	68fb      	ldr	r3, [r7, #12]
 8003ac0:	681b      	ldr	r3, [r3, #0]
 8003ac2:	f022 0204 	bic.w	r2, r2, #4
 8003ac6:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode;
 8003ac8:	68fb      	ldr	r3, [r7, #12]
 8003aca:	681b      	ldr	r3, [r3, #0]
 8003acc:	6999      	ldr	r1, [r3, #24]
 8003ace:	68bb      	ldr	r3, [r7, #8]
 8003ad0:	691a      	ldr	r2, [r3, #16]
 8003ad2:	68fb      	ldr	r3, [r7, #12]
 8003ad4:	681b      	ldr	r3, [r3, #0]
 8003ad6:	430a      	orrs	r2, r1
 8003ad8:	619a      	str	r2, [r3, #24]
      break;
 8003ada:	e062      	b.n	8003ba2 <HAL_TIM_PWM_ConfigChannel+0x16a>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

      /* Configure the Channel 2 in PWM mode */
      TIM_OC2_SetConfig(htim->Instance, sConfig);
 8003adc:	68fb      	ldr	r3, [r7, #12]
 8003ade:	681b      	ldr	r3, [r3, #0]
 8003ae0:	68b9      	ldr	r1, [r7, #8]
 8003ae2:	4618      	mov	r0, r3
 8003ae4:	f000 fa16 	bl	8003f14 <TIM_OC2_SetConfig>

      /* Set the Preload enable bit for channel2 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC2PE;
 8003ae8:	68fb      	ldr	r3, [r7, #12]
 8003aea:	681b      	ldr	r3, [r3, #0]
 8003aec:	699a      	ldr	r2, [r3, #24]
 8003aee:	68fb      	ldr	r3, [r7, #12]
 8003af0:	681b      	ldr	r3, [r3, #0]
 8003af2:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8003af6:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC2FE;
 8003af8:	68fb      	ldr	r3, [r7, #12]
 8003afa:	681b      	ldr	r3, [r3, #0]
 8003afc:	699a      	ldr	r2, [r3, #24]
 8003afe:	68fb      	ldr	r3, [r7, #12]
 8003b00:	681b      	ldr	r3, [r3, #0]
 8003b02:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8003b06:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode << 8U;
 8003b08:	68fb      	ldr	r3, [r7, #12]
 8003b0a:	681b      	ldr	r3, [r3, #0]
 8003b0c:	6999      	ldr	r1, [r3, #24]
 8003b0e:	68bb      	ldr	r3, [r7, #8]
 8003b10:	691b      	ldr	r3, [r3, #16]
 8003b12:	021a      	lsls	r2, r3, #8
 8003b14:	68fb      	ldr	r3, [r7, #12]
 8003b16:	681b      	ldr	r3, [r3, #0]
 8003b18:	430a      	orrs	r2, r1
 8003b1a:	619a      	str	r2, [r3, #24]
      break;
 8003b1c:	e041      	b.n	8003ba2 <HAL_TIM_PWM_ConfigChannel+0x16a>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

      /* Configure the Channel 3 in PWM mode */
      TIM_OC3_SetConfig(htim->Instance, sConfig);
 8003b1e:	68fb      	ldr	r3, [r7, #12]
 8003b20:	681b      	ldr	r3, [r3, #0]
 8003b22:	68b9      	ldr	r1, [r7, #8]
 8003b24:	4618      	mov	r0, r3
 8003b26:	f000 fa5f 	bl	8003fe8 <TIM_OC3_SetConfig>

      /* Set the Preload enable bit for channel3 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC3PE;
 8003b2a:	68fb      	ldr	r3, [r7, #12]
 8003b2c:	681b      	ldr	r3, [r3, #0]
 8003b2e:	69da      	ldr	r2, [r3, #28]
 8003b30:	68fb      	ldr	r3, [r7, #12]
 8003b32:	681b      	ldr	r3, [r3, #0]
 8003b34:	f042 0208 	orr.w	r2, r2, #8
 8003b38:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC3FE;
 8003b3a:	68fb      	ldr	r3, [r7, #12]
 8003b3c:	681b      	ldr	r3, [r3, #0]
 8003b3e:	69da      	ldr	r2, [r3, #28]
 8003b40:	68fb      	ldr	r3, [r7, #12]
 8003b42:	681b      	ldr	r3, [r3, #0]
 8003b44:	f022 0204 	bic.w	r2, r2, #4
 8003b48:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode;
 8003b4a:	68fb      	ldr	r3, [r7, #12]
 8003b4c:	681b      	ldr	r3, [r3, #0]
 8003b4e:	69d9      	ldr	r1, [r3, #28]
 8003b50:	68bb      	ldr	r3, [r7, #8]
 8003b52:	691a      	ldr	r2, [r3, #16]
 8003b54:	68fb      	ldr	r3, [r7, #12]
 8003b56:	681b      	ldr	r3, [r3, #0]
 8003b58:	430a      	orrs	r2, r1
 8003b5a:	61da      	str	r2, [r3, #28]
      break;
 8003b5c:	e021      	b.n	8003ba2 <HAL_TIM_PWM_ConfigChannel+0x16a>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

      /* Configure the Channel 4 in PWM mode */
      TIM_OC4_SetConfig(htim->Instance, sConfig);
 8003b5e:	68fb      	ldr	r3, [r7, #12]
 8003b60:	681b      	ldr	r3, [r3, #0]
 8003b62:	68b9      	ldr	r1, [r7, #8]
 8003b64:	4618      	mov	r0, r3
 8003b66:	f000 faa9 	bl	80040bc <TIM_OC4_SetConfig>

      /* Set the Preload enable bit for channel4 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC4PE;
 8003b6a:	68fb      	ldr	r3, [r7, #12]
 8003b6c:	681b      	ldr	r3, [r3, #0]
 8003b6e:	69da      	ldr	r2, [r3, #28]
 8003b70:	68fb      	ldr	r3, [r7, #12]
 8003b72:	681b      	ldr	r3, [r3, #0]
 8003b74:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8003b78:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC4FE;
 8003b7a:	68fb      	ldr	r3, [r7, #12]
 8003b7c:	681b      	ldr	r3, [r3, #0]
 8003b7e:	69da      	ldr	r2, [r3, #28]
 8003b80:	68fb      	ldr	r3, [r7, #12]
 8003b82:	681b      	ldr	r3, [r3, #0]
 8003b84:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8003b88:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode << 8U;
 8003b8a:	68fb      	ldr	r3, [r7, #12]
 8003b8c:	681b      	ldr	r3, [r3, #0]
 8003b8e:	69d9      	ldr	r1, [r3, #28]
 8003b90:	68bb      	ldr	r3, [r7, #8]
 8003b92:	691b      	ldr	r3, [r3, #16]
 8003b94:	021a      	lsls	r2, r3, #8
 8003b96:	68fb      	ldr	r3, [r7, #12]
 8003b98:	681b      	ldr	r3, [r3, #0]
 8003b9a:	430a      	orrs	r2, r1
 8003b9c:	61da      	str	r2, [r3, #28]
      break;
 8003b9e:	e000      	b.n	8003ba2 <HAL_TIM_PWM_ConfigChannel+0x16a>
    }

    default:
      break;
 8003ba0:	bf00      	nop
  }

  __HAL_UNLOCK(htim);
 8003ba2:	68fb      	ldr	r3, [r7, #12]
 8003ba4:	2200      	movs	r2, #0
 8003ba6:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 8003baa:	2300      	movs	r3, #0
}
 8003bac:	4618      	mov	r0, r3
 8003bae:	3710      	adds	r7, #16
 8003bb0:	46bd      	mov	sp, r7
 8003bb2:	bd80      	pop	{r7, pc}

08003bb4 <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 8003bb4:	b580      	push	{r7, lr}
 8003bb6:	b084      	sub	sp, #16
 8003bb8:	af00      	add	r7, sp, #0
 8003bba:	6078      	str	r0, [r7, #4]
 8003bbc:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 8003bbe:	687b      	ldr	r3, [r7, #4]
 8003bc0:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8003bc4:	2b01      	cmp	r3, #1
 8003bc6:	d101      	bne.n	8003bcc <HAL_TIM_ConfigClockSource+0x18>
 8003bc8:	2302      	movs	r3, #2
 8003bca:	e0b3      	b.n	8003d34 <HAL_TIM_ConfigClockSource+0x180>
 8003bcc:	687b      	ldr	r3, [r7, #4]
 8003bce:	2201      	movs	r2, #1
 8003bd0:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 8003bd4:	687b      	ldr	r3, [r7, #4]
 8003bd6:	2202      	movs	r2, #2
 8003bd8:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 8003bdc:	687b      	ldr	r3, [r7, #4]
 8003bde:	681b      	ldr	r3, [r3, #0]
 8003be0:	689b      	ldr	r3, [r3, #8]
 8003be2:	60fb      	str	r3, [r7, #12]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 8003be4:	68fb      	ldr	r3, [r7, #12]
 8003be6:	f023 0377 	bic.w	r3, r3, #119	; 0x77
 8003bea:	60fb      	str	r3, [r7, #12]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8003bec:	68fb      	ldr	r3, [r7, #12]
 8003bee:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 8003bf2:	60fb      	str	r3, [r7, #12]
  htim->Instance->SMCR = tmpsmcr;
 8003bf4:	687b      	ldr	r3, [r7, #4]
 8003bf6:	681b      	ldr	r3, [r3, #0]
 8003bf8:	68fa      	ldr	r2, [r7, #12]
 8003bfa:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 8003bfc:	683b      	ldr	r3, [r7, #0]
 8003bfe:	681b      	ldr	r3, [r3, #0]
 8003c00:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8003c04:	d03e      	beq.n	8003c84 <HAL_TIM_ConfigClockSource+0xd0>
 8003c06:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8003c0a:	f200 8087 	bhi.w	8003d1c <HAL_TIM_ConfigClockSource+0x168>
 8003c0e:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8003c12:	f000 8085 	beq.w	8003d20 <HAL_TIM_ConfigClockSource+0x16c>
 8003c16:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8003c1a:	d87f      	bhi.n	8003d1c <HAL_TIM_ConfigClockSource+0x168>
 8003c1c:	2b70      	cmp	r3, #112	; 0x70
 8003c1e:	d01a      	beq.n	8003c56 <HAL_TIM_ConfigClockSource+0xa2>
 8003c20:	2b70      	cmp	r3, #112	; 0x70
 8003c22:	d87b      	bhi.n	8003d1c <HAL_TIM_ConfigClockSource+0x168>
 8003c24:	2b60      	cmp	r3, #96	; 0x60
 8003c26:	d050      	beq.n	8003cca <HAL_TIM_ConfigClockSource+0x116>
 8003c28:	2b60      	cmp	r3, #96	; 0x60
 8003c2a:	d877      	bhi.n	8003d1c <HAL_TIM_ConfigClockSource+0x168>
 8003c2c:	2b50      	cmp	r3, #80	; 0x50
 8003c2e:	d03c      	beq.n	8003caa <HAL_TIM_ConfigClockSource+0xf6>
 8003c30:	2b50      	cmp	r3, #80	; 0x50
 8003c32:	d873      	bhi.n	8003d1c <HAL_TIM_ConfigClockSource+0x168>
 8003c34:	2b40      	cmp	r3, #64	; 0x40
 8003c36:	d058      	beq.n	8003cea <HAL_TIM_ConfigClockSource+0x136>
 8003c38:	2b40      	cmp	r3, #64	; 0x40
 8003c3a:	d86f      	bhi.n	8003d1c <HAL_TIM_ConfigClockSource+0x168>
 8003c3c:	2b30      	cmp	r3, #48	; 0x30
 8003c3e:	d064      	beq.n	8003d0a <HAL_TIM_ConfigClockSource+0x156>
 8003c40:	2b30      	cmp	r3, #48	; 0x30
 8003c42:	d86b      	bhi.n	8003d1c <HAL_TIM_ConfigClockSource+0x168>
 8003c44:	2b20      	cmp	r3, #32
 8003c46:	d060      	beq.n	8003d0a <HAL_TIM_ConfigClockSource+0x156>
 8003c48:	2b20      	cmp	r3, #32
 8003c4a:	d867      	bhi.n	8003d1c <HAL_TIM_ConfigClockSource+0x168>
 8003c4c:	2b00      	cmp	r3, #0
 8003c4e:	d05c      	beq.n	8003d0a <HAL_TIM_ConfigClockSource+0x156>
 8003c50:	2b10      	cmp	r3, #16
 8003c52:	d05a      	beq.n	8003d0a <HAL_TIM_ConfigClockSource+0x156>
        TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
        break;
      }

    default:
      break;
 8003c54:	e062      	b.n	8003d1c <HAL_TIM_ConfigClockSource+0x168>
      TIM_ETR_SetConfig(htim->Instance,
 8003c56:	687b      	ldr	r3, [r7, #4]
 8003c58:	6818      	ldr	r0, [r3, #0]
 8003c5a:	683b      	ldr	r3, [r7, #0]
 8003c5c:	6899      	ldr	r1, [r3, #8]
 8003c5e:	683b      	ldr	r3, [r7, #0]
 8003c60:	685a      	ldr	r2, [r3, #4]
 8003c62:	683b      	ldr	r3, [r7, #0]
 8003c64:	68db      	ldr	r3, [r3, #12]
 8003c66:	f000 faee 	bl	8004246 <TIM_ETR_SetConfig>
      tmpsmcr = htim->Instance->SMCR;
 8003c6a:	687b      	ldr	r3, [r7, #4]
 8003c6c:	681b      	ldr	r3, [r3, #0]
 8003c6e:	689b      	ldr	r3, [r3, #8]
 8003c70:	60fb      	str	r3, [r7, #12]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 8003c72:	68fb      	ldr	r3, [r7, #12]
 8003c74:	f043 0377 	orr.w	r3, r3, #119	; 0x77
 8003c78:	60fb      	str	r3, [r7, #12]
      htim->Instance->SMCR = tmpsmcr;
 8003c7a:	687b      	ldr	r3, [r7, #4]
 8003c7c:	681b      	ldr	r3, [r3, #0]
 8003c7e:	68fa      	ldr	r2, [r7, #12]
 8003c80:	609a      	str	r2, [r3, #8]
      break;
 8003c82:	e04e      	b.n	8003d22 <HAL_TIM_ConfigClockSource+0x16e>
      TIM_ETR_SetConfig(htim->Instance,
 8003c84:	687b      	ldr	r3, [r7, #4]
 8003c86:	6818      	ldr	r0, [r3, #0]
 8003c88:	683b      	ldr	r3, [r7, #0]
 8003c8a:	6899      	ldr	r1, [r3, #8]
 8003c8c:	683b      	ldr	r3, [r7, #0]
 8003c8e:	685a      	ldr	r2, [r3, #4]
 8003c90:	683b      	ldr	r3, [r7, #0]
 8003c92:	68db      	ldr	r3, [r3, #12]
 8003c94:	f000 fad7 	bl	8004246 <TIM_ETR_SetConfig>
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 8003c98:	687b      	ldr	r3, [r7, #4]
 8003c9a:	681b      	ldr	r3, [r3, #0]
 8003c9c:	689a      	ldr	r2, [r3, #8]
 8003c9e:	687b      	ldr	r3, [r7, #4]
 8003ca0:	681b      	ldr	r3, [r3, #0]
 8003ca2:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 8003ca6:	609a      	str	r2, [r3, #8]
      break;
 8003ca8:	e03b      	b.n	8003d22 <HAL_TIM_ConfigClockSource+0x16e>
      TIM_TI1_ConfigInputStage(htim->Instance,
 8003caa:	687b      	ldr	r3, [r7, #4]
 8003cac:	6818      	ldr	r0, [r3, #0]
 8003cae:	683b      	ldr	r3, [r7, #0]
 8003cb0:	6859      	ldr	r1, [r3, #4]
 8003cb2:	683b      	ldr	r3, [r7, #0]
 8003cb4:	68db      	ldr	r3, [r3, #12]
 8003cb6:	461a      	mov	r2, r3
 8003cb8:	f000 fa4e 	bl	8004158 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 8003cbc:	687b      	ldr	r3, [r7, #4]
 8003cbe:	681b      	ldr	r3, [r3, #0]
 8003cc0:	2150      	movs	r1, #80	; 0x50
 8003cc2:	4618      	mov	r0, r3
 8003cc4:	f000 faa5 	bl	8004212 <TIM_ITRx_SetConfig>
      break;
 8003cc8:	e02b      	b.n	8003d22 <HAL_TIM_ConfigClockSource+0x16e>
      TIM_TI2_ConfigInputStage(htim->Instance,
 8003cca:	687b      	ldr	r3, [r7, #4]
 8003ccc:	6818      	ldr	r0, [r3, #0]
 8003cce:	683b      	ldr	r3, [r7, #0]
 8003cd0:	6859      	ldr	r1, [r3, #4]
 8003cd2:	683b      	ldr	r3, [r7, #0]
 8003cd4:	68db      	ldr	r3, [r3, #12]
 8003cd6:	461a      	mov	r2, r3
 8003cd8:	f000 fa6c 	bl	80041b4 <TIM_TI2_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 8003cdc:	687b      	ldr	r3, [r7, #4]
 8003cde:	681b      	ldr	r3, [r3, #0]
 8003ce0:	2160      	movs	r1, #96	; 0x60
 8003ce2:	4618      	mov	r0, r3
 8003ce4:	f000 fa95 	bl	8004212 <TIM_ITRx_SetConfig>
      break;
 8003ce8:	e01b      	b.n	8003d22 <HAL_TIM_ConfigClockSource+0x16e>
      TIM_TI1_ConfigInputStage(htim->Instance,
 8003cea:	687b      	ldr	r3, [r7, #4]
 8003cec:	6818      	ldr	r0, [r3, #0]
 8003cee:	683b      	ldr	r3, [r7, #0]
 8003cf0:	6859      	ldr	r1, [r3, #4]
 8003cf2:	683b      	ldr	r3, [r7, #0]
 8003cf4:	68db      	ldr	r3, [r3, #12]
 8003cf6:	461a      	mov	r2, r3
 8003cf8:	f000 fa2e 	bl	8004158 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 8003cfc:	687b      	ldr	r3, [r7, #4]
 8003cfe:	681b      	ldr	r3, [r3, #0]
 8003d00:	2140      	movs	r1, #64	; 0x40
 8003d02:	4618      	mov	r0, r3
 8003d04:	f000 fa85 	bl	8004212 <TIM_ITRx_SetConfig>
      break;
 8003d08:	e00b      	b.n	8003d22 <HAL_TIM_ConfigClockSource+0x16e>
        TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 8003d0a:	687b      	ldr	r3, [r7, #4]
 8003d0c:	681a      	ldr	r2, [r3, #0]
 8003d0e:	683b      	ldr	r3, [r7, #0]
 8003d10:	681b      	ldr	r3, [r3, #0]
 8003d12:	4619      	mov	r1, r3
 8003d14:	4610      	mov	r0, r2
 8003d16:	f000 fa7c 	bl	8004212 <TIM_ITRx_SetConfig>
        break;
 8003d1a:	e002      	b.n	8003d22 <HAL_TIM_ConfigClockSource+0x16e>
      break;
 8003d1c:	bf00      	nop
 8003d1e:	e000      	b.n	8003d22 <HAL_TIM_ConfigClockSource+0x16e>
      break;
 8003d20:	bf00      	nop
  }
  htim->State = HAL_TIM_STATE_READY;
 8003d22:	687b      	ldr	r3, [r7, #4]
 8003d24:	2201      	movs	r2, #1
 8003d26:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 8003d2a:	687b      	ldr	r3, [r7, #4]
 8003d2c:	2200      	movs	r2, #0
 8003d2e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 8003d32:	2300      	movs	r3, #0
}
 8003d34:	4618      	mov	r0, r3
 8003d36:	3710      	adds	r7, #16
 8003d38:	46bd      	mov	sp, r7
 8003d3a:	bd80      	pop	{r7, pc}

08003d3c <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 8003d3c:	b480      	push	{r7}
 8003d3e:	b083      	sub	sp, #12
 8003d40:	af00      	add	r7, sp, #0
 8003d42:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 8003d44:	bf00      	nop
 8003d46:	370c      	adds	r7, #12
 8003d48:	46bd      	mov	sp, r7
 8003d4a:	bc80      	pop	{r7}
 8003d4c:	4770      	bx	lr

08003d4e <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 8003d4e:	b480      	push	{r7}
 8003d50:	b083      	sub	sp, #12
 8003d52:	af00      	add	r7, sp, #0
 8003d54:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 8003d56:	bf00      	nop
 8003d58:	370c      	adds	r7, #12
 8003d5a:	46bd      	mov	sp, r7
 8003d5c:	bc80      	pop	{r7}
 8003d5e:	4770      	bx	lr

08003d60 <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 8003d60:	b480      	push	{r7}
 8003d62:	b083      	sub	sp, #12
 8003d64:	af00      	add	r7, sp, #0
 8003d66:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 8003d68:	bf00      	nop
 8003d6a:	370c      	adds	r7, #12
 8003d6c:	46bd      	mov	sp, r7
 8003d6e:	bc80      	pop	{r7}
 8003d70:	4770      	bx	lr

08003d72 <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 8003d72:	b480      	push	{r7}
 8003d74:	b083      	sub	sp, #12
 8003d76:	af00      	add	r7, sp, #0
 8003d78:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 8003d7a:	bf00      	nop
 8003d7c:	370c      	adds	r7, #12
 8003d7e:	46bd      	mov	sp, r7
 8003d80:	bc80      	pop	{r7}
 8003d82:	4770      	bx	lr

08003d84 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, TIM_Base_InitTypeDef *Structure)
{
 8003d84:	b480      	push	{r7}
 8003d86:	b085      	sub	sp, #20
 8003d88:	af00      	add	r7, sp, #0
 8003d8a:	6078      	str	r0, [r7, #4]
 8003d8c:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 8003d8e:	687b      	ldr	r3, [r7, #4]
 8003d90:	681b      	ldr	r3, [r3, #0]
 8003d92:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8003d94:	687b      	ldr	r3, [r7, #4]
 8003d96:	4a29      	ldr	r2, [pc, #164]	; (8003e3c <TIM_Base_SetConfig+0xb8>)
 8003d98:	4293      	cmp	r3, r2
 8003d9a:	d00b      	beq.n	8003db4 <TIM_Base_SetConfig+0x30>
 8003d9c:	687b      	ldr	r3, [r7, #4]
 8003d9e:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8003da2:	d007      	beq.n	8003db4 <TIM_Base_SetConfig+0x30>
 8003da4:	687b      	ldr	r3, [r7, #4]
 8003da6:	4a26      	ldr	r2, [pc, #152]	; (8003e40 <TIM_Base_SetConfig+0xbc>)
 8003da8:	4293      	cmp	r3, r2
 8003daa:	d003      	beq.n	8003db4 <TIM_Base_SetConfig+0x30>
 8003dac:	687b      	ldr	r3, [r7, #4]
 8003dae:	4a25      	ldr	r2, [pc, #148]	; (8003e44 <TIM_Base_SetConfig+0xc0>)
 8003db0:	4293      	cmp	r3, r2
 8003db2:	d108      	bne.n	8003dc6 <TIM_Base_SetConfig+0x42>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8003db4:	68fb      	ldr	r3, [r7, #12]
 8003db6:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8003dba:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8003dbc:	683b      	ldr	r3, [r7, #0]
 8003dbe:	685b      	ldr	r3, [r3, #4]
 8003dc0:	68fa      	ldr	r2, [r7, #12]
 8003dc2:	4313      	orrs	r3, r2
 8003dc4:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 8003dc6:	687b      	ldr	r3, [r7, #4]
 8003dc8:	4a1c      	ldr	r2, [pc, #112]	; (8003e3c <TIM_Base_SetConfig+0xb8>)
 8003dca:	4293      	cmp	r3, r2
 8003dcc:	d00b      	beq.n	8003de6 <TIM_Base_SetConfig+0x62>
 8003dce:	687b      	ldr	r3, [r7, #4]
 8003dd0:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8003dd4:	d007      	beq.n	8003de6 <TIM_Base_SetConfig+0x62>
 8003dd6:	687b      	ldr	r3, [r7, #4]
 8003dd8:	4a19      	ldr	r2, [pc, #100]	; (8003e40 <TIM_Base_SetConfig+0xbc>)
 8003dda:	4293      	cmp	r3, r2
 8003ddc:	d003      	beq.n	8003de6 <TIM_Base_SetConfig+0x62>
 8003dde:	687b      	ldr	r3, [r7, #4]
 8003de0:	4a18      	ldr	r2, [pc, #96]	; (8003e44 <TIM_Base_SetConfig+0xc0>)
 8003de2:	4293      	cmp	r3, r2
 8003de4:	d108      	bne.n	8003df8 <TIM_Base_SetConfig+0x74>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 8003de6:	68fb      	ldr	r3, [r7, #12]
 8003de8:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8003dec:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8003dee:	683b      	ldr	r3, [r7, #0]
 8003df0:	68db      	ldr	r3, [r3, #12]
 8003df2:	68fa      	ldr	r2, [r7, #12]
 8003df4:	4313      	orrs	r3, r2
 8003df6:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8003df8:	68fb      	ldr	r3, [r7, #12]
 8003dfa:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 8003dfe:	683b      	ldr	r3, [r7, #0]
 8003e00:	695b      	ldr	r3, [r3, #20]
 8003e02:	4313      	orrs	r3, r2
 8003e04:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 8003e06:	687b      	ldr	r3, [r7, #4]
 8003e08:	68fa      	ldr	r2, [r7, #12]
 8003e0a:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8003e0c:	683b      	ldr	r3, [r7, #0]
 8003e0e:	689a      	ldr	r2, [r3, #8]
 8003e10:	687b      	ldr	r3, [r7, #4]
 8003e12:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8003e14:	683b      	ldr	r3, [r7, #0]
 8003e16:	681a      	ldr	r2, [r3, #0]
 8003e18:	687b      	ldr	r3, [r7, #4]
 8003e1a:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8003e1c:	687b      	ldr	r3, [r7, #4]
 8003e1e:	4a07      	ldr	r2, [pc, #28]	; (8003e3c <TIM_Base_SetConfig+0xb8>)
 8003e20:	4293      	cmp	r3, r2
 8003e22:	d103      	bne.n	8003e2c <TIM_Base_SetConfig+0xa8>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 8003e24:	683b      	ldr	r3, [r7, #0]
 8003e26:	691a      	ldr	r2, [r3, #16]
 8003e28:	687b      	ldr	r3, [r7, #4]
 8003e2a:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8003e2c:	687b      	ldr	r3, [r7, #4]
 8003e2e:	2201      	movs	r2, #1
 8003e30:	615a      	str	r2, [r3, #20]
}
 8003e32:	bf00      	nop
 8003e34:	3714      	adds	r7, #20
 8003e36:	46bd      	mov	sp, r7
 8003e38:	bc80      	pop	{r7}
 8003e3a:	4770      	bx	lr
 8003e3c:	40012c00 	.word	0x40012c00
 8003e40:	40000400 	.word	0x40000400
 8003e44:	40000800 	.word	0x40000800

08003e48 <TIM_OC1_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC1_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 8003e48:	b480      	push	{r7}
 8003e4a:	b087      	sub	sp, #28
 8003e4c:	af00      	add	r7, sp, #0
 8003e4e:	6078      	str	r0, [r7, #4]
 8003e50:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 1: Reset the CC1E Bit */
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8003e52:	687b      	ldr	r3, [r7, #4]
 8003e54:	6a1b      	ldr	r3, [r3, #32]
 8003e56:	f023 0201 	bic.w	r2, r3, #1
 8003e5a:	687b      	ldr	r3, [r7, #4]
 8003e5c:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8003e5e:	687b      	ldr	r3, [r7, #4]
 8003e60:	6a1b      	ldr	r3, [r3, #32]
 8003e62:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8003e64:	687b      	ldr	r3, [r7, #4]
 8003e66:	685b      	ldr	r3, [r3, #4]
 8003e68:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 8003e6a:	687b      	ldr	r3, [r7, #4]
 8003e6c:	699b      	ldr	r3, [r3, #24]
 8003e6e:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~TIM_CCMR1_OC1M;
 8003e70:	68fb      	ldr	r3, [r7, #12]
 8003e72:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8003e76:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC1S;
 8003e78:	68fb      	ldr	r3, [r7, #12]
 8003e7a:	f023 0303 	bic.w	r3, r3, #3
 8003e7e:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8003e80:	683b      	ldr	r3, [r7, #0]
 8003e82:	681b      	ldr	r3, [r3, #0]
 8003e84:	68fa      	ldr	r2, [r7, #12]
 8003e86:	4313      	orrs	r3, r2
 8003e88:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC1P;
 8003e8a:	697b      	ldr	r3, [r7, #20]
 8003e8c:	f023 0302 	bic.w	r3, r3, #2
 8003e90:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= OC_Config->OCPolarity;
 8003e92:	683b      	ldr	r3, [r7, #0]
 8003e94:	689b      	ldr	r3, [r3, #8]
 8003e96:	697a      	ldr	r2, [r7, #20]
 8003e98:	4313      	orrs	r3, r2
 8003e9a:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_1))
 8003e9c:	687b      	ldr	r3, [r7, #4]
 8003e9e:	4a1c      	ldr	r2, [pc, #112]	; (8003f10 <TIM_OC1_SetConfig+0xc8>)
 8003ea0:	4293      	cmp	r3, r2
 8003ea2:	d10c      	bne.n	8003ebe <TIM_OC1_SetConfig+0x76>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC1NP;
 8003ea4:	697b      	ldr	r3, [r7, #20]
 8003ea6:	f023 0308 	bic.w	r3, r3, #8
 8003eaa:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= OC_Config->OCNPolarity;
 8003eac:	683b      	ldr	r3, [r7, #0]
 8003eae:	68db      	ldr	r3, [r3, #12]
 8003eb0:	697a      	ldr	r2, [r7, #20]
 8003eb2:	4313      	orrs	r3, r2
 8003eb4:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC1NE;
 8003eb6:	697b      	ldr	r3, [r7, #20]
 8003eb8:	f023 0304 	bic.w	r3, r3, #4
 8003ebc:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8003ebe:	687b      	ldr	r3, [r7, #4]
 8003ec0:	4a13      	ldr	r2, [pc, #76]	; (8003f10 <TIM_OC1_SetConfig+0xc8>)
 8003ec2:	4293      	cmp	r3, r2
 8003ec4:	d111      	bne.n	8003eea <TIM_OC1_SetConfig+0xa2>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS1;
 8003ec6:	693b      	ldr	r3, [r7, #16]
 8003ec8:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8003ecc:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS1N;
 8003ece:	693b      	ldr	r3, [r7, #16]
 8003ed0:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 8003ed4:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= OC_Config->OCIdleState;
 8003ed6:	683b      	ldr	r3, [r7, #0]
 8003ed8:	695b      	ldr	r3, [r3, #20]
 8003eda:	693a      	ldr	r2, [r7, #16]
 8003edc:	4313      	orrs	r3, r2
 8003ede:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= OC_Config->OCNIdleState;
 8003ee0:	683b      	ldr	r3, [r7, #0]
 8003ee2:	699b      	ldr	r3, [r3, #24]
 8003ee4:	693a      	ldr	r2, [r7, #16]
 8003ee6:	4313      	orrs	r3, r2
 8003ee8:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8003eea:	687b      	ldr	r3, [r7, #4]
 8003eec:	693a      	ldr	r2, [r7, #16]
 8003eee:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 8003ef0:	687b      	ldr	r3, [r7, #4]
 8003ef2:	68fa      	ldr	r2, [r7, #12]
 8003ef4:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR1 = OC_Config->Pulse;
 8003ef6:	683b      	ldr	r3, [r7, #0]
 8003ef8:	685a      	ldr	r2, [r3, #4]
 8003efa:	687b      	ldr	r3, [r7, #4]
 8003efc:	635a      	str	r2, [r3, #52]	; 0x34

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8003efe:	687b      	ldr	r3, [r7, #4]
 8003f00:	697a      	ldr	r2, [r7, #20]
 8003f02:	621a      	str	r2, [r3, #32]
}
 8003f04:	bf00      	nop
 8003f06:	371c      	adds	r7, #28
 8003f08:	46bd      	mov	sp, r7
 8003f0a:	bc80      	pop	{r7}
 8003f0c:	4770      	bx	lr
 8003f0e:	bf00      	nop
 8003f10:	40012c00 	.word	0x40012c00

08003f14 <TIM_OC2_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
void TIM_OC2_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 8003f14:	b480      	push	{r7}
 8003f16:	b087      	sub	sp, #28
 8003f18:	af00      	add	r7, sp, #0
 8003f1a:	6078      	str	r0, [r7, #4]
 8003f1c:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8003f1e:	687b      	ldr	r3, [r7, #4]
 8003f20:	6a1b      	ldr	r3, [r3, #32]
 8003f22:	f023 0210 	bic.w	r2, r3, #16
 8003f26:	687b      	ldr	r3, [r7, #4]
 8003f28:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8003f2a:	687b      	ldr	r3, [r7, #4]
 8003f2c:	6a1b      	ldr	r3, [r3, #32]
 8003f2e:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8003f30:	687b      	ldr	r3, [r7, #4]
 8003f32:	685b      	ldr	r3, [r3, #4]
 8003f34:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 8003f36:	687b      	ldr	r3, [r7, #4]
 8003f38:	699b      	ldr	r3, [r3, #24]
 8003f3a:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR1_OC2M;
 8003f3c:	68fb      	ldr	r3, [r7, #12]
 8003f3e:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8003f42:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC2S;
 8003f44:	68fb      	ldr	r3, [r7, #12]
 8003f46:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8003f4a:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8003f4c:	683b      	ldr	r3, [r7, #0]
 8003f4e:	681b      	ldr	r3, [r3, #0]
 8003f50:	021b      	lsls	r3, r3, #8
 8003f52:	68fa      	ldr	r2, [r7, #12]
 8003f54:	4313      	orrs	r3, r2
 8003f56:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC2P;
 8003f58:	697b      	ldr	r3, [r7, #20]
 8003f5a:	f023 0320 	bic.w	r3, r3, #32
 8003f5e:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 4U);
 8003f60:	683b      	ldr	r3, [r7, #0]
 8003f62:	689b      	ldr	r3, [r3, #8]
 8003f64:	011b      	lsls	r3, r3, #4
 8003f66:	697a      	ldr	r2, [r7, #20]
 8003f68:	4313      	orrs	r3, r2
 8003f6a:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_2))
 8003f6c:	687b      	ldr	r3, [r7, #4]
 8003f6e:	4a1d      	ldr	r2, [pc, #116]	; (8003fe4 <TIM_OC2_SetConfig+0xd0>)
 8003f70:	4293      	cmp	r3, r2
 8003f72:	d10d      	bne.n	8003f90 <TIM_OC2_SetConfig+0x7c>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC2NP;
 8003f74:	697b      	ldr	r3, [r7, #20]
 8003f76:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8003f7a:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 4U);
 8003f7c:	683b      	ldr	r3, [r7, #0]
 8003f7e:	68db      	ldr	r3, [r3, #12]
 8003f80:	011b      	lsls	r3, r3, #4
 8003f82:	697a      	ldr	r2, [r7, #20]
 8003f84:	4313      	orrs	r3, r2
 8003f86:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC2NE;
 8003f88:	697b      	ldr	r3, [r7, #20]
 8003f8a:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8003f8e:	617b      	str	r3, [r7, #20]

  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8003f90:	687b      	ldr	r3, [r7, #4]
 8003f92:	4a14      	ldr	r2, [pc, #80]	; (8003fe4 <TIM_OC2_SetConfig+0xd0>)
 8003f94:	4293      	cmp	r3, r2
 8003f96:	d113      	bne.n	8003fc0 <TIM_OC2_SetConfig+0xac>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS2;
 8003f98:	693b      	ldr	r3, [r7, #16]
 8003f9a:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 8003f9e:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS2N;
 8003fa0:	693b      	ldr	r3, [r7, #16]
 8003fa2:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 8003fa6:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 2U);
 8003fa8:	683b      	ldr	r3, [r7, #0]
 8003faa:	695b      	ldr	r3, [r3, #20]
 8003fac:	009b      	lsls	r3, r3, #2
 8003fae:	693a      	ldr	r2, [r7, #16]
 8003fb0:	4313      	orrs	r3, r2
 8003fb2:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 2U);
 8003fb4:	683b      	ldr	r3, [r7, #0]
 8003fb6:	699b      	ldr	r3, [r3, #24]
 8003fb8:	009b      	lsls	r3, r3, #2
 8003fba:	693a      	ldr	r2, [r7, #16]
 8003fbc:	4313      	orrs	r3, r2
 8003fbe:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8003fc0:	687b      	ldr	r3, [r7, #4]
 8003fc2:	693a      	ldr	r2, [r7, #16]
 8003fc4:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 8003fc6:	687b      	ldr	r3, [r7, #4]
 8003fc8:	68fa      	ldr	r2, [r7, #12]
 8003fca:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR2 = OC_Config->Pulse;
 8003fcc:	683b      	ldr	r3, [r7, #0]
 8003fce:	685a      	ldr	r2, [r3, #4]
 8003fd0:	687b      	ldr	r3, [r7, #4]
 8003fd2:	639a      	str	r2, [r3, #56]	; 0x38

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8003fd4:	687b      	ldr	r3, [r7, #4]
 8003fd6:	697a      	ldr	r2, [r7, #20]
 8003fd8:	621a      	str	r2, [r3, #32]
}
 8003fda:	bf00      	nop
 8003fdc:	371c      	adds	r7, #28
 8003fde:	46bd      	mov	sp, r7
 8003fe0:	bc80      	pop	{r7}
 8003fe2:	4770      	bx	lr
 8003fe4:	40012c00 	.word	0x40012c00

08003fe8 <TIM_OC3_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC3_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 8003fe8:	b480      	push	{r7}
 8003fea:	b087      	sub	sp, #28
 8003fec:	af00      	add	r7, sp, #0
 8003fee:	6078      	str	r0, [r7, #4]
 8003ff0:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 3: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC3E;
 8003ff2:	687b      	ldr	r3, [r7, #4]
 8003ff4:	6a1b      	ldr	r3, [r3, #32]
 8003ff6:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 8003ffa:	687b      	ldr	r3, [r7, #4]
 8003ffc:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8003ffe:	687b      	ldr	r3, [r7, #4]
 8004000:	6a1b      	ldr	r3, [r3, #32]
 8004002:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8004004:	687b      	ldr	r3, [r7, #4]
 8004006:	685b      	ldr	r3, [r3, #4]
 8004008:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 800400a:	687b      	ldr	r3, [r7, #4]
 800400c:	69db      	ldr	r3, [r3, #28]
 800400e:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC3M;
 8004010:	68fb      	ldr	r3, [r7, #12]
 8004012:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8004016:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC3S;
 8004018:	68fb      	ldr	r3, [r7, #12]
 800401a:	f023 0303 	bic.w	r3, r3, #3
 800401e:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8004020:	683b      	ldr	r3, [r7, #0]
 8004022:	681b      	ldr	r3, [r3, #0]
 8004024:	68fa      	ldr	r2, [r7, #12]
 8004026:	4313      	orrs	r3, r2
 8004028:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC3P;
 800402a:	697b      	ldr	r3, [r7, #20]
 800402c:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 8004030:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 8U);
 8004032:	683b      	ldr	r3, [r7, #0]
 8004034:	689b      	ldr	r3, [r3, #8]
 8004036:	021b      	lsls	r3, r3, #8
 8004038:	697a      	ldr	r2, [r7, #20]
 800403a:	4313      	orrs	r3, r2
 800403c:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_3))
 800403e:	687b      	ldr	r3, [r7, #4]
 8004040:	4a1d      	ldr	r2, [pc, #116]	; (80040b8 <TIM_OC3_SetConfig+0xd0>)
 8004042:	4293      	cmp	r3, r2
 8004044:	d10d      	bne.n	8004062 <TIM_OC3_SetConfig+0x7a>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC3NP;
 8004046:	697b      	ldr	r3, [r7, #20]
 8004048:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 800404c:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 8U);
 800404e:	683b      	ldr	r3, [r7, #0]
 8004050:	68db      	ldr	r3, [r3, #12]
 8004052:	021b      	lsls	r3, r3, #8
 8004054:	697a      	ldr	r2, [r7, #20]
 8004056:	4313      	orrs	r3, r2
 8004058:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC3NE;
 800405a:	697b      	ldr	r3, [r7, #20]
 800405c:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 8004060:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8004062:	687b      	ldr	r3, [r7, #4]
 8004064:	4a14      	ldr	r2, [pc, #80]	; (80040b8 <TIM_OC3_SetConfig+0xd0>)
 8004066:	4293      	cmp	r3, r2
 8004068:	d113      	bne.n	8004092 <TIM_OC3_SetConfig+0xaa>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS3;
 800406a:	693b      	ldr	r3, [r7, #16]
 800406c:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 8004070:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS3N;
 8004072:	693b      	ldr	r3, [r7, #16]
 8004074:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 8004078:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 4U);
 800407a:	683b      	ldr	r3, [r7, #0]
 800407c:	695b      	ldr	r3, [r3, #20]
 800407e:	011b      	lsls	r3, r3, #4
 8004080:	693a      	ldr	r2, [r7, #16]
 8004082:	4313      	orrs	r3, r2
 8004084:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 4U);
 8004086:	683b      	ldr	r3, [r7, #0]
 8004088:	699b      	ldr	r3, [r3, #24]
 800408a:	011b      	lsls	r3, r3, #4
 800408c:	693a      	ldr	r2, [r7, #16]
 800408e:	4313      	orrs	r3, r2
 8004090:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8004092:	687b      	ldr	r3, [r7, #4]
 8004094:	693a      	ldr	r2, [r7, #16]
 8004096:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 8004098:	687b      	ldr	r3, [r7, #4]
 800409a:	68fa      	ldr	r2, [r7, #12]
 800409c:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR3 = OC_Config->Pulse;
 800409e:	683b      	ldr	r3, [r7, #0]
 80040a0:	685a      	ldr	r2, [r3, #4]
 80040a2:	687b      	ldr	r3, [r7, #4]
 80040a4:	63da      	str	r2, [r3, #60]	; 0x3c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 80040a6:	687b      	ldr	r3, [r7, #4]
 80040a8:	697a      	ldr	r2, [r7, #20]
 80040aa:	621a      	str	r2, [r3, #32]
}
 80040ac:	bf00      	nop
 80040ae:	371c      	adds	r7, #28
 80040b0:	46bd      	mov	sp, r7
 80040b2:	bc80      	pop	{r7}
 80040b4:	4770      	bx	lr
 80040b6:	bf00      	nop
 80040b8:	40012c00 	.word	0x40012c00

080040bc <TIM_OC4_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC4_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 80040bc:	b480      	push	{r7}
 80040be:	b087      	sub	sp, #28
 80040c0:	af00      	add	r7, sp, #0
 80040c2:	6078      	str	r0, [r7, #4]
 80040c4:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 4: Reset the CC4E Bit */
  TIMx->CCER &= ~TIM_CCER_CC4E;
 80040c6:	687b      	ldr	r3, [r7, #4]
 80040c8:	6a1b      	ldr	r3, [r3, #32]
 80040ca:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 80040ce:	687b      	ldr	r3, [r7, #4]
 80040d0:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 80040d2:	687b      	ldr	r3, [r7, #4]
 80040d4:	6a1b      	ldr	r3, [r3, #32]
 80040d6:	613b      	str	r3, [r7, #16]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 80040d8:	687b      	ldr	r3, [r7, #4]
 80040da:	685b      	ldr	r3, [r3, #4]
 80040dc:	617b      	str	r3, [r7, #20]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 80040de:	687b      	ldr	r3, [r7, #4]
 80040e0:	69db      	ldr	r3, [r3, #28]
 80040e2:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC4M;
 80040e4:	68fb      	ldr	r3, [r7, #12]
 80040e6:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 80040ea:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC4S;
 80040ec:	68fb      	ldr	r3, [r7, #12]
 80040ee:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 80040f2:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 80040f4:	683b      	ldr	r3, [r7, #0]
 80040f6:	681b      	ldr	r3, [r3, #0]
 80040f8:	021b      	lsls	r3, r3, #8
 80040fa:	68fa      	ldr	r2, [r7, #12]
 80040fc:	4313      	orrs	r3, r2
 80040fe:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC4P;
 8004100:	693b      	ldr	r3, [r7, #16]
 8004102:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 8004106:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 12U);
 8004108:	683b      	ldr	r3, [r7, #0]
 800410a:	689b      	ldr	r3, [r3, #8]
 800410c:	031b      	lsls	r3, r3, #12
 800410e:	693a      	ldr	r2, [r7, #16]
 8004110:	4313      	orrs	r3, r2
 8004112:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8004114:	687b      	ldr	r3, [r7, #4]
 8004116:	4a0f      	ldr	r2, [pc, #60]	; (8004154 <TIM_OC4_SetConfig+0x98>)
 8004118:	4293      	cmp	r3, r2
 800411a:	d109      	bne.n	8004130 <TIM_OC4_SetConfig+0x74>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS4;
 800411c:	697b      	ldr	r3, [r7, #20]
 800411e:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 8004122:	617b      	str	r3, [r7, #20]

    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 6U);
 8004124:	683b      	ldr	r3, [r7, #0]
 8004126:	695b      	ldr	r3, [r3, #20]
 8004128:	019b      	lsls	r3, r3, #6
 800412a:	697a      	ldr	r2, [r7, #20]
 800412c:	4313      	orrs	r3, r2
 800412e:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8004130:	687b      	ldr	r3, [r7, #4]
 8004132:	697a      	ldr	r2, [r7, #20]
 8004134:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 8004136:	687b      	ldr	r3, [r7, #4]
 8004138:	68fa      	ldr	r2, [r7, #12]
 800413a:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR4 = OC_Config->Pulse;
 800413c:	683b      	ldr	r3, [r7, #0]
 800413e:	685a      	ldr	r2, [r3, #4]
 8004140:	687b      	ldr	r3, [r7, #4]
 8004142:	641a      	str	r2, [r3, #64]	; 0x40

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8004144:	687b      	ldr	r3, [r7, #4]
 8004146:	693a      	ldr	r2, [r7, #16]
 8004148:	621a      	str	r2, [r3, #32]
}
 800414a:	bf00      	nop
 800414c:	371c      	adds	r7, #28
 800414e:	46bd      	mov	sp, r7
 8004150:	bc80      	pop	{r7}
 8004152:	4770      	bx	lr
 8004154:	40012c00 	.word	0x40012c00

08004158 <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8004158:	b480      	push	{r7}
 800415a:	b087      	sub	sp, #28
 800415c:	af00      	add	r7, sp, #0
 800415e:	60f8      	str	r0, [r7, #12]
 8004160:	60b9      	str	r1, [r7, #8]
 8004162:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 8004164:	68fb      	ldr	r3, [r7, #12]
 8004166:	6a1b      	ldr	r3, [r3, #32]
 8004168:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 800416a:	68fb      	ldr	r3, [r7, #12]
 800416c:	6a1b      	ldr	r3, [r3, #32]
 800416e:	f023 0201 	bic.w	r2, r3, #1
 8004172:	68fb      	ldr	r3, [r7, #12]
 8004174:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8004176:	68fb      	ldr	r3, [r7, #12]
 8004178:	699b      	ldr	r3, [r3, #24]
 800417a:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 800417c:	693b      	ldr	r3, [r7, #16]
 800417e:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 8004182:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 8004184:	687b      	ldr	r3, [r7, #4]
 8004186:	011b      	lsls	r3, r3, #4
 8004188:	693a      	ldr	r2, [r7, #16]
 800418a:	4313      	orrs	r3, r2
 800418c:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 800418e:	697b      	ldr	r3, [r7, #20]
 8004190:	f023 030a 	bic.w	r3, r3, #10
 8004194:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 8004196:	697a      	ldr	r2, [r7, #20]
 8004198:	68bb      	ldr	r3, [r7, #8]
 800419a:	4313      	orrs	r3, r2
 800419c:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 800419e:	68fb      	ldr	r3, [r7, #12]
 80041a0:	693a      	ldr	r2, [r7, #16]
 80041a2:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 80041a4:	68fb      	ldr	r3, [r7, #12]
 80041a6:	697a      	ldr	r2, [r7, #20]
 80041a8:	621a      	str	r2, [r3, #32]
}
 80041aa:	bf00      	nop
 80041ac:	371c      	adds	r7, #28
 80041ae:	46bd      	mov	sp, r7
 80041b0:	bc80      	pop	{r7}
 80041b2:	4770      	bx	lr

080041b4 <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 80041b4:	b480      	push	{r7}
 80041b6:	b087      	sub	sp, #28
 80041b8:	af00      	add	r7, sp, #0
 80041ba:	60f8      	str	r0, [r7, #12]
 80041bc:	60b9      	str	r1, [r7, #8]
 80041be:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 80041c0:	68fb      	ldr	r3, [r7, #12]
 80041c2:	6a1b      	ldr	r3, [r3, #32]
 80041c4:	f023 0210 	bic.w	r2, r3, #16
 80041c8:	68fb      	ldr	r3, [r7, #12]
 80041ca:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 80041cc:	68fb      	ldr	r3, [r7, #12]
 80041ce:	699b      	ldr	r3, [r3, #24]
 80041d0:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 80041d2:	68fb      	ldr	r3, [r7, #12]
 80041d4:	6a1b      	ldr	r3, [r3, #32]
 80041d6:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 80041d8:	697b      	ldr	r3, [r7, #20]
 80041da:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 80041de:	617b      	str	r3, [r7, #20]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 80041e0:	687b      	ldr	r3, [r7, #4]
 80041e2:	031b      	lsls	r3, r3, #12
 80041e4:	697a      	ldr	r2, [r7, #20]
 80041e6:	4313      	orrs	r3, r2
 80041e8:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 80041ea:	693b      	ldr	r3, [r7, #16]
 80041ec:	f023 03a0 	bic.w	r3, r3, #160	; 0xa0
 80041f0:	613b      	str	r3, [r7, #16]
  tmpccer |= (TIM_ICPolarity << 4U);
 80041f2:	68bb      	ldr	r3, [r7, #8]
 80041f4:	011b      	lsls	r3, r3, #4
 80041f6:	693a      	ldr	r2, [r7, #16]
 80041f8:	4313      	orrs	r3, r2
 80041fa:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 80041fc:	68fb      	ldr	r3, [r7, #12]
 80041fe:	697a      	ldr	r2, [r7, #20]
 8004200:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8004202:	68fb      	ldr	r3, [r7, #12]
 8004204:	693a      	ldr	r2, [r7, #16]
 8004206:	621a      	str	r2, [r3, #32]
}
 8004208:	bf00      	nop
 800420a:	371c      	adds	r7, #28
 800420c:	46bd      	mov	sp, r7
 800420e:	bc80      	pop	{r7}
 8004210:	4770      	bx	lr

08004212 <TIM_ITRx_SetConfig>:
  *            @arg TIM_TS_TI2FP2: Filtered Timer Input 2
  *            @arg TIM_TS_ETRF: External Trigger input
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 8004212:	b480      	push	{r7}
 8004214:	b085      	sub	sp, #20
 8004216:	af00      	add	r7, sp, #0
 8004218:	6078      	str	r0, [r7, #4]
 800421a:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 800421c:	687b      	ldr	r3, [r7, #4]
 800421e:	689b      	ldr	r3, [r3, #8]
 8004220:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 8004222:	68fb      	ldr	r3, [r7, #12]
 8004224:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8004228:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 800422a:	683a      	ldr	r2, [r7, #0]
 800422c:	68fb      	ldr	r3, [r7, #12]
 800422e:	4313      	orrs	r3, r2
 8004230:	f043 0307 	orr.w	r3, r3, #7
 8004234:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8004236:	687b      	ldr	r3, [r7, #4]
 8004238:	68fa      	ldr	r2, [r7, #12]
 800423a:	609a      	str	r2, [r3, #8]
}
 800423c:	bf00      	nop
 800423e:	3714      	adds	r7, #20
 8004240:	46bd      	mov	sp, r7
 8004242:	bc80      	pop	{r7}
 8004244:	4770      	bx	lr

08004246 <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 8004246:	b480      	push	{r7}
 8004248:	b087      	sub	sp, #28
 800424a:	af00      	add	r7, sp, #0
 800424c:	60f8      	str	r0, [r7, #12]
 800424e:	60b9      	str	r1, [r7, #8]
 8004250:	607a      	str	r2, [r7, #4]
 8004252:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 8004254:	68fb      	ldr	r3, [r7, #12]
 8004256:	689b      	ldr	r3, [r3, #8]
 8004258:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 800425a:	697b      	ldr	r3, [r7, #20]
 800425c:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 8004260:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 8004262:	683b      	ldr	r3, [r7, #0]
 8004264:	021a      	lsls	r2, r3, #8
 8004266:	687b      	ldr	r3, [r7, #4]
 8004268:	431a      	orrs	r2, r3
 800426a:	68bb      	ldr	r3, [r7, #8]
 800426c:	4313      	orrs	r3, r2
 800426e:	697a      	ldr	r2, [r7, #20]
 8004270:	4313      	orrs	r3, r2
 8004272:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8004274:	68fb      	ldr	r3, [r7, #12]
 8004276:	697a      	ldr	r2, [r7, #20]
 8004278:	609a      	str	r2, [r3, #8]
}
 800427a:	bf00      	nop
 800427c:	371c      	adds	r7, #28
 800427e:	46bd      	mov	sp, r7
 8004280:	bc80      	pop	{r7}
 8004282:	4770      	bx	lr

08004284 <TIM_CCxChannelCmd>:
  * @param  ChannelState specifies the TIM Channel CCxE bit new state.
  *          This parameter can be: TIM_CCx_ENABLE or TIM_CCx_DISABLE.
  * @retval None
  */
void TIM_CCxChannelCmd(TIM_TypeDef *TIMx, uint32_t Channel, uint32_t ChannelState)
{
 8004284:	b480      	push	{r7}
 8004286:	b087      	sub	sp, #28
 8004288:	af00      	add	r7, sp, #0
 800428a:	60f8      	str	r0, [r7, #12]
 800428c:	60b9      	str	r1, [r7, #8]
 800428e:	607a      	str	r2, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_CC1_INSTANCE(TIMx));
  assert_param(IS_TIM_CHANNELS(Channel));

  tmp = TIM_CCER_CC1E << (Channel & 0x1FU); /* 0x1FU = 31 bits max shift */
 8004290:	68bb      	ldr	r3, [r7, #8]
 8004292:	f003 031f 	and.w	r3, r3, #31
 8004296:	2201      	movs	r2, #1
 8004298:	fa02 f303 	lsl.w	r3, r2, r3
 800429c:	617b      	str	r3, [r7, #20]

  /* Reset the CCxE Bit */
  TIMx->CCER &= ~tmp;
 800429e:	68fb      	ldr	r3, [r7, #12]
 80042a0:	6a1a      	ldr	r2, [r3, #32]
 80042a2:	697b      	ldr	r3, [r7, #20]
 80042a4:	43db      	mvns	r3, r3
 80042a6:	401a      	ands	r2, r3
 80042a8:	68fb      	ldr	r3, [r7, #12]
 80042aa:	621a      	str	r2, [r3, #32]

  /* Set or reset the CCxE Bit */
  TIMx->CCER |= (uint32_t)(ChannelState << (Channel & 0x1FU)); /* 0x1FU = 31 bits max shift */
 80042ac:	68fb      	ldr	r3, [r7, #12]
 80042ae:	6a1a      	ldr	r2, [r3, #32]
 80042b0:	68bb      	ldr	r3, [r7, #8]
 80042b2:	f003 031f 	and.w	r3, r3, #31
 80042b6:	6879      	ldr	r1, [r7, #4]
 80042b8:	fa01 f303 	lsl.w	r3, r1, r3
 80042bc:	431a      	orrs	r2, r3
 80042be:	68fb      	ldr	r3, [r7, #12]
 80042c0:	621a      	str	r2, [r3, #32]
}
 80042c2:	bf00      	nop
 80042c4:	371c      	adds	r7, #28
 80042c6:	46bd      	mov	sp, r7
 80042c8:	bc80      	pop	{r7}
 80042ca:	4770      	bx	lr

080042cc <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        TIM_MasterConfigTypeDef *sMasterConfig)
{
 80042cc:	b480      	push	{r7}
 80042ce:	b085      	sub	sp, #20
 80042d0:	af00      	add	r7, sp, #0
 80042d2:	6078      	str	r0, [r7, #4]
 80042d4:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 80042d6:	687b      	ldr	r3, [r7, #4]
 80042d8:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 80042dc:	2b01      	cmp	r3, #1
 80042de:	d101      	bne.n	80042e4 <HAL_TIMEx_MasterConfigSynchronization+0x18>
 80042e0:	2302      	movs	r3, #2
 80042e2:	e046      	b.n	8004372 <HAL_TIMEx_MasterConfigSynchronization+0xa6>
 80042e4:	687b      	ldr	r3, [r7, #4]
 80042e6:	2201      	movs	r2, #1
 80042e8:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 80042ec:	687b      	ldr	r3, [r7, #4]
 80042ee:	2202      	movs	r2, #2
 80042f0:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 80042f4:	687b      	ldr	r3, [r7, #4]
 80042f6:	681b      	ldr	r3, [r3, #0]
 80042f8:	685b      	ldr	r3, [r3, #4]
 80042fa:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 80042fc:	687b      	ldr	r3, [r7, #4]
 80042fe:	681b      	ldr	r3, [r3, #0]
 8004300:	689b      	ldr	r3, [r3, #8]
 8004302:	60bb      	str	r3, [r7, #8]

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 8004304:	68fb      	ldr	r3, [r7, #12]
 8004306:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800430a:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 800430c:	683b      	ldr	r3, [r7, #0]
 800430e:	681b      	ldr	r3, [r3, #0]
 8004310:	68fa      	ldr	r2, [r7, #12]
 8004312:	4313      	orrs	r3, r2
 8004314:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 8004316:	687b      	ldr	r3, [r7, #4]
 8004318:	681b      	ldr	r3, [r3, #0]
 800431a:	68fa      	ldr	r2, [r7, #12]
 800431c:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 800431e:	687b      	ldr	r3, [r7, #4]
 8004320:	681b      	ldr	r3, [r3, #0]
 8004322:	4a16      	ldr	r2, [pc, #88]	; (800437c <HAL_TIMEx_MasterConfigSynchronization+0xb0>)
 8004324:	4293      	cmp	r3, r2
 8004326:	d00e      	beq.n	8004346 <HAL_TIMEx_MasterConfigSynchronization+0x7a>
 8004328:	687b      	ldr	r3, [r7, #4]
 800432a:	681b      	ldr	r3, [r3, #0]
 800432c:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8004330:	d009      	beq.n	8004346 <HAL_TIMEx_MasterConfigSynchronization+0x7a>
 8004332:	687b      	ldr	r3, [r7, #4]
 8004334:	681b      	ldr	r3, [r3, #0]
 8004336:	4a12      	ldr	r2, [pc, #72]	; (8004380 <HAL_TIMEx_MasterConfigSynchronization+0xb4>)
 8004338:	4293      	cmp	r3, r2
 800433a:	d004      	beq.n	8004346 <HAL_TIMEx_MasterConfigSynchronization+0x7a>
 800433c:	687b      	ldr	r3, [r7, #4]
 800433e:	681b      	ldr	r3, [r3, #0]
 8004340:	4a10      	ldr	r2, [pc, #64]	; (8004384 <HAL_TIMEx_MasterConfigSynchronization+0xb8>)
 8004342:	4293      	cmp	r3, r2
 8004344:	d10c      	bne.n	8004360 <HAL_TIMEx_MasterConfigSynchronization+0x94>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 8004346:	68bb      	ldr	r3, [r7, #8]
 8004348:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 800434c:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 800434e:	683b      	ldr	r3, [r7, #0]
 8004350:	685b      	ldr	r3, [r3, #4]
 8004352:	68ba      	ldr	r2, [r7, #8]
 8004354:	4313      	orrs	r3, r2
 8004356:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 8004358:	687b      	ldr	r3, [r7, #4]
 800435a:	681b      	ldr	r3, [r3, #0]
 800435c:	68ba      	ldr	r2, [r7, #8]
 800435e:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 8004360:	687b      	ldr	r3, [r7, #4]
 8004362:	2201      	movs	r2, #1
 8004364:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 8004368:	687b      	ldr	r3, [r7, #4]
 800436a:	2200      	movs	r2, #0
 800436c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 8004370:	2300      	movs	r3, #0
}
 8004372:	4618      	mov	r0, r3
 8004374:	3714      	adds	r7, #20
 8004376:	46bd      	mov	sp, r7
 8004378:	bc80      	pop	{r7}
 800437a:	4770      	bx	lr
 800437c:	40012c00 	.word	0x40012c00
 8004380:	40000400 	.word	0x40000400
 8004384:	40000800 	.word	0x40000800

08004388 <HAL_TIMEx_CommutCallback>:
  * @brief  Hall commutation changed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 8004388:	b480      	push	{r7}
 800438a:	b083      	sub	sp, #12
 800438c:	af00      	add	r7, sp, #0
 800438e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 8004390:	bf00      	nop
 8004392:	370c      	adds	r7, #12
 8004394:	46bd      	mov	sp, r7
 8004396:	bc80      	pop	{r7}
 8004398:	4770      	bx	lr

0800439a <HAL_TIMEx_BreakCallback>:
  * @brief  Hall Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 800439a:	b480      	push	{r7}
 800439c:	b083      	sub	sp, #12
 800439e:	af00      	add	r7, sp, #0
 80043a0:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 80043a2:	bf00      	nop
 80043a4:	370c      	adds	r7, #12
 80043a6:	46bd      	mov	sp, r7
 80043a8:	bc80      	pop	{r7}
 80043aa:	4770      	bx	lr

080043ac <HAL_UART_Init>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 80043ac:	b580      	push	{r7, lr}
 80043ae:	b082      	sub	sp, #8
 80043b0:	af00      	add	r7, sp, #0
 80043b2:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 80043b4:	687b      	ldr	r3, [r7, #4]
 80043b6:	2b00      	cmp	r3, #0
 80043b8:	d101      	bne.n	80043be <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 80043ba:	2301      	movs	r3, #1
 80043bc:	e03f      	b.n	800443e <HAL_UART_Init+0x92>
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
#if defined(USART_CR1_OVER8)
  assert_param(IS_UART_OVERSAMPLING(huart->Init.OverSampling));
#endif /* USART_CR1_OVER8 */

  if (huart->gState == HAL_UART_STATE_RESET)
 80043be:	687b      	ldr	r3, [r7, #4]
 80043c0:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80043c4:	b2db      	uxtb	r3, r3
 80043c6:	2b00      	cmp	r3, #0
 80043c8:	d106      	bne.n	80043d8 <HAL_UART_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 80043ca:	687b      	ldr	r3, [r7, #4]
 80043cc:	2200      	movs	r2, #0
 80043ce:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 80043d2:	6878      	ldr	r0, [r7, #4]
 80043d4:	f7fd ff2c 	bl	8002230 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 80043d8:	687b      	ldr	r3, [r7, #4]
 80043da:	2224      	movs	r2, #36	; 0x24
 80043dc:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Disable the peripheral */
  __HAL_UART_DISABLE(huart);
 80043e0:	687b      	ldr	r3, [r7, #4]
 80043e2:	681b      	ldr	r3, [r3, #0]
 80043e4:	68da      	ldr	r2, [r3, #12]
 80043e6:	687b      	ldr	r3, [r7, #4]
 80043e8:	681b      	ldr	r3, [r3, #0]
 80043ea:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 80043ee:	60da      	str	r2, [r3, #12]

  /* Set the UART Communication parameters */
  UART_SetConfig(huart);
 80043f0:	6878      	ldr	r0, [r7, #4]
 80043f2:	f000 fc85 	bl	8004d00 <UART_SetConfig>

  /* In asynchronous mode, the following bits must be kept cleared:
     - LINEN and CLKEN bits in the USART_CR2 register,
     - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 80043f6:	687b      	ldr	r3, [r7, #4]
 80043f8:	681b      	ldr	r3, [r3, #0]
 80043fa:	691a      	ldr	r2, [r3, #16]
 80043fc:	687b      	ldr	r3, [r7, #4]
 80043fe:	681b      	ldr	r3, [r3, #0]
 8004400:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 8004404:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8004406:	687b      	ldr	r3, [r7, #4]
 8004408:	681b      	ldr	r3, [r3, #0]
 800440a:	695a      	ldr	r2, [r3, #20]
 800440c:	687b      	ldr	r3, [r7, #4]
 800440e:	681b      	ldr	r3, [r3, #0]
 8004410:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 8004414:	615a      	str	r2, [r3, #20]

  /* Enable the peripheral */
  __HAL_UART_ENABLE(huart);
 8004416:	687b      	ldr	r3, [r7, #4]
 8004418:	681b      	ldr	r3, [r3, #0]
 800441a:	68da      	ldr	r2, [r3, #12]
 800441c:	687b      	ldr	r3, [r7, #4]
 800441e:	681b      	ldr	r3, [r3, #0]
 8004420:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 8004424:	60da      	str	r2, [r3, #12]

  /* Initialize the UART state */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8004426:	687b      	ldr	r3, [r7, #4]
 8004428:	2200      	movs	r2, #0
 800442a:	641a      	str	r2, [r3, #64]	; 0x40
  huart->gState = HAL_UART_STATE_READY;
 800442c:	687b      	ldr	r3, [r7, #4]
 800442e:	2220      	movs	r2, #32
 8004430:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
  huart->RxState = HAL_UART_STATE_READY;
 8004434:	687b      	ldr	r3, [r7, #4]
 8004436:	2220      	movs	r2, #32
 8004438:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

  return HAL_OK;
 800443c:	2300      	movs	r3, #0
}
 800443e:	4618      	mov	r0, r3
 8004440:	3708      	adds	r7, #8
 8004442:	46bd      	mov	sp, r7
 8004444:	bd80      	pop	{r7, pc}

08004446 <HAL_UART_Transmit>:
  * @param  Size  Amount of data elements (u8 or u16) to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8004446:	b580      	push	{r7, lr}
 8004448:	b08a      	sub	sp, #40	; 0x28
 800444a:	af02      	add	r7, sp, #8
 800444c:	60f8      	str	r0, [r7, #12]
 800444e:	60b9      	str	r1, [r7, #8]
 8004450:	603b      	str	r3, [r7, #0]
 8004452:	4613      	mov	r3, r2
 8004454:	80fb      	strh	r3, [r7, #6]
  uint8_t  *pdata8bits;
  uint16_t *pdata16bits;
  uint32_t tickstart = 0U;
 8004456:	2300      	movs	r3, #0
 8004458:	617b      	str	r3, [r7, #20]

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 800445a:	68fb      	ldr	r3, [r7, #12]
 800445c:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8004460:	b2db      	uxtb	r3, r3
 8004462:	2b20      	cmp	r3, #32
 8004464:	d17c      	bne.n	8004560 <HAL_UART_Transmit+0x11a>
  {
    if ((pData == NULL) || (Size == 0U))
 8004466:	68bb      	ldr	r3, [r7, #8]
 8004468:	2b00      	cmp	r3, #0
 800446a:	d002      	beq.n	8004472 <HAL_UART_Transmit+0x2c>
 800446c:	88fb      	ldrh	r3, [r7, #6]
 800446e:	2b00      	cmp	r3, #0
 8004470:	d101      	bne.n	8004476 <HAL_UART_Transmit+0x30>
    {
      return  HAL_ERROR;
 8004472:	2301      	movs	r3, #1
 8004474:	e075      	b.n	8004562 <HAL_UART_Transmit+0x11c>
    }

    /* Process Locked */
    __HAL_LOCK(huart);
 8004476:	68fb      	ldr	r3, [r7, #12]
 8004478:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 800447c:	2b01      	cmp	r3, #1
 800447e:	d101      	bne.n	8004484 <HAL_UART_Transmit+0x3e>
 8004480:	2302      	movs	r3, #2
 8004482:	e06e      	b.n	8004562 <HAL_UART_Transmit+0x11c>
 8004484:	68fb      	ldr	r3, [r7, #12]
 8004486:	2201      	movs	r2, #1
 8004488:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 800448c:	68fb      	ldr	r3, [r7, #12]
 800448e:	2200      	movs	r2, #0
 8004490:	641a      	str	r2, [r3, #64]	; 0x40
    huart->gState = HAL_UART_STATE_BUSY_TX;
 8004492:	68fb      	ldr	r3, [r7, #12]
 8004494:	2221      	movs	r2, #33	; 0x21
 8004496:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 800449a:	f7fd ff9b 	bl	80023d4 <HAL_GetTick>
 800449e:	6178      	str	r0, [r7, #20]

    huart->TxXferSize = Size;
 80044a0:	68fb      	ldr	r3, [r7, #12]
 80044a2:	88fa      	ldrh	r2, [r7, #6]
 80044a4:	849a      	strh	r2, [r3, #36]	; 0x24
    huart->TxXferCount = Size;
 80044a6:	68fb      	ldr	r3, [r7, #12]
 80044a8:	88fa      	ldrh	r2, [r7, #6]
 80044aa:	84da      	strh	r2, [r3, #38]	; 0x26

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 80044ac:	68fb      	ldr	r3, [r7, #12]
 80044ae:	689b      	ldr	r3, [r3, #8]
 80044b0:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80044b4:	d108      	bne.n	80044c8 <HAL_UART_Transmit+0x82>
 80044b6:	68fb      	ldr	r3, [r7, #12]
 80044b8:	691b      	ldr	r3, [r3, #16]
 80044ba:	2b00      	cmp	r3, #0
 80044bc:	d104      	bne.n	80044c8 <HAL_UART_Transmit+0x82>
    {
      pdata8bits  = NULL;
 80044be:	2300      	movs	r3, #0
 80044c0:	61fb      	str	r3, [r7, #28]
      pdata16bits = (uint16_t *) pData;
 80044c2:	68bb      	ldr	r3, [r7, #8]
 80044c4:	61bb      	str	r3, [r7, #24]
 80044c6:	e003      	b.n	80044d0 <HAL_UART_Transmit+0x8a>
    }
    else
    {
      pdata8bits  = pData;
 80044c8:	68bb      	ldr	r3, [r7, #8]
 80044ca:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 80044cc:	2300      	movs	r3, #0
 80044ce:	61bb      	str	r3, [r7, #24]
    }

    /* Process Unlocked */
    __HAL_UNLOCK(huart);
 80044d0:	68fb      	ldr	r3, [r7, #12]
 80044d2:	2200      	movs	r2, #0
 80044d4:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    while (huart->TxXferCount > 0U)
 80044d8:	e02a      	b.n	8004530 <HAL_UART_Transmit+0xea>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 80044da:	683b      	ldr	r3, [r7, #0]
 80044dc:	9300      	str	r3, [sp, #0]
 80044de:	697b      	ldr	r3, [r7, #20]
 80044e0:	2200      	movs	r2, #0
 80044e2:	2180      	movs	r1, #128	; 0x80
 80044e4:	68f8      	ldr	r0, [r7, #12]
 80044e6:	f000 fa38 	bl	800495a <UART_WaitOnFlagUntilTimeout>
 80044ea:	4603      	mov	r3, r0
 80044ec:	2b00      	cmp	r3, #0
 80044ee:	d001      	beq.n	80044f4 <HAL_UART_Transmit+0xae>
      {
        return HAL_TIMEOUT;
 80044f0:	2303      	movs	r3, #3
 80044f2:	e036      	b.n	8004562 <HAL_UART_Transmit+0x11c>
      }
      if (pdata8bits == NULL)
 80044f4:	69fb      	ldr	r3, [r7, #28]
 80044f6:	2b00      	cmp	r3, #0
 80044f8:	d10b      	bne.n	8004512 <HAL_UART_Transmit+0xcc>
      {
        huart->Instance->DR = (uint16_t)(*pdata16bits & 0x01FFU);
 80044fa:	69bb      	ldr	r3, [r7, #24]
 80044fc:	881b      	ldrh	r3, [r3, #0]
 80044fe:	461a      	mov	r2, r3
 8004500:	68fb      	ldr	r3, [r7, #12]
 8004502:	681b      	ldr	r3, [r3, #0]
 8004504:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8004508:	605a      	str	r2, [r3, #4]
        pdata16bits++;
 800450a:	69bb      	ldr	r3, [r7, #24]
 800450c:	3302      	adds	r3, #2
 800450e:	61bb      	str	r3, [r7, #24]
 8004510:	e007      	b.n	8004522 <HAL_UART_Transmit+0xdc>
      }
      else
      {
        huart->Instance->DR = (uint8_t)(*pdata8bits & 0xFFU);
 8004512:	69fb      	ldr	r3, [r7, #28]
 8004514:	781a      	ldrb	r2, [r3, #0]
 8004516:	68fb      	ldr	r3, [r7, #12]
 8004518:	681b      	ldr	r3, [r3, #0]
 800451a:	605a      	str	r2, [r3, #4]
        pdata8bits++;
 800451c:	69fb      	ldr	r3, [r7, #28]
 800451e:	3301      	adds	r3, #1
 8004520:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 8004522:	68fb      	ldr	r3, [r7, #12]
 8004524:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 8004526:	b29b      	uxth	r3, r3
 8004528:	3b01      	subs	r3, #1
 800452a:	b29a      	uxth	r2, r3
 800452c:	68fb      	ldr	r3, [r7, #12]
 800452e:	84da      	strh	r2, [r3, #38]	; 0x26
    while (huart->TxXferCount > 0U)
 8004530:	68fb      	ldr	r3, [r7, #12]
 8004532:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 8004534:	b29b      	uxth	r3, r3
 8004536:	2b00      	cmp	r3, #0
 8004538:	d1cf      	bne.n	80044da <HAL_UART_Transmit+0x94>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 800453a:	683b      	ldr	r3, [r7, #0]
 800453c:	9300      	str	r3, [sp, #0]
 800453e:	697b      	ldr	r3, [r7, #20]
 8004540:	2200      	movs	r2, #0
 8004542:	2140      	movs	r1, #64	; 0x40
 8004544:	68f8      	ldr	r0, [r7, #12]
 8004546:	f000 fa08 	bl	800495a <UART_WaitOnFlagUntilTimeout>
 800454a:	4603      	mov	r3, r0
 800454c:	2b00      	cmp	r3, #0
 800454e:	d001      	beq.n	8004554 <HAL_UART_Transmit+0x10e>
    {
      return HAL_TIMEOUT;
 8004550:	2303      	movs	r3, #3
 8004552:	e006      	b.n	8004562 <HAL_UART_Transmit+0x11c>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 8004554:	68fb      	ldr	r3, [r7, #12]
 8004556:	2220      	movs	r2, #32
 8004558:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

    return HAL_OK;
 800455c:	2300      	movs	r3, #0
 800455e:	e000      	b.n	8004562 <HAL_UART_Transmit+0x11c>
  }
  else
  {
    return HAL_BUSY;
 8004560:	2302      	movs	r3, #2
  }
}
 8004562:	4618      	mov	r0, r3
 8004564:	3720      	adds	r7, #32
 8004566:	46bd      	mov	sp, r7
 8004568:	bd80      	pop	{r7, pc}

0800456a <HAL_UART_Receive_IT>:
  * @param  pData Pointer to data buffer (u8 or u16 data elements).
  * @param  Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Receive_IT(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 800456a:	b580      	push	{r7, lr}
 800456c:	b084      	sub	sp, #16
 800456e:	af00      	add	r7, sp, #0
 8004570:	60f8      	str	r0, [r7, #12]
 8004572:	60b9      	str	r1, [r7, #8]
 8004574:	4613      	mov	r3, r2
 8004576:	80fb      	strh	r3, [r7, #6]
  /* Check that a Rx process is not already ongoing */
  if (huart->RxState == HAL_UART_STATE_READY)
 8004578:	68fb      	ldr	r3, [r7, #12]
 800457a:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 800457e:	b2db      	uxtb	r3, r3
 8004580:	2b20      	cmp	r3, #32
 8004582:	d11d      	bne.n	80045c0 <HAL_UART_Receive_IT+0x56>
  {
    if ((pData == NULL) || (Size == 0U))
 8004584:	68bb      	ldr	r3, [r7, #8]
 8004586:	2b00      	cmp	r3, #0
 8004588:	d002      	beq.n	8004590 <HAL_UART_Receive_IT+0x26>
 800458a:	88fb      	ldrh	r3, [r7, #6]
 800458c:	2b00      	cmp	r3, #0
 800458e:	d101      	bne.n	8004594 <HAL_UART_Receive_IT+0x2a>
    {
      return HAL_ERROR;
 8004590:	2301      	movs	r3, #1
 8004592:	e016      	b.n	80045c2 <HAL_UART_Receive_IT+0x58>
    }

    /* Process Locked */
    __HAL_LOCK(huart);
 8004594:	68fb      	ldr	r3, [r7, #12]
 8004596:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 800459a:	2b01      	cmp	r3, #1
 800459c:	d101      	bne.n	80045a2 <HAL_UART_Receive_IT+0x38>
 800459e:	2302      	movs	r3, #2
 80045a0:	e00f      	b.n	80045c2 <HAL_UART_Receive_IT+0x58>
 80045a2:	68fb      	ldr	r3, [r7, #12]
 80045a4:	2201      	movs	r2, #1
 80045a6:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Set Reception type to Standard reception */
    huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80045aa:	68fb      	ldr	r3, [r7, #12]
 80045ac:	2200      	movs	r2, #0
 80045ae:	631a      	str	r2, [r3, #48]	; 0x30

    return(UART_Start_Receive_IT(huart, pData, Size));
 80045b0:	88fb      	ldrh	r3, [r7, #6]
 80045b2:	461a      	mov	r2, r3
 80045b4:	68b9      	ldr	r1, [r7, #8]
 80045b6:	68f8      	ldr	r0, [r7, #12]
 80045b8:	f000 fa19 	bl	80049ee <UART_Start_Receive_IT>
 80045bc:	4603      	mov	r3, r0
 80045be:	e000      	b.n	80045c2 <HAL_UART_Receive_IT+0x58>
  }
  else
  {
    return HAL_BUSY;
 80045c0:	2302      	movs	r3, #2
  }
}
 80045c2:	4618      	mov	r0, r3
 80045c4:	3710      	adds	r7, #16
 80045c6:	46bd      	mov	sp, r7
 80045c8:	bd80      	pop	{r7, pc}
	...

080045cc <HAL_UART_IRQHandler>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
void HAL_UART_IRQHandler(UART_HandleTypeDef *huart)
{
 80045cc:	b580      	push	{r7, lr}
 80045ce:	b08a      	sub	sp, #40	; 0x28
 80045d0:	af00      	add	r7, sp, #0
 80045d2:	6078      	str	r0, [r7, #4]
  uint32_t isrflags   = READ_REG(huart->Instance->SR);
 80045d4:	687b      	ldr	r3, [r7, #4]
 80045d6:	681b      	ldr	r3, [r3, #0]
 80045d8:	681b      	ldr	r3, [r3, #0]
 80045da:	627b      	str	r3, [r7, #36]	; 0x24
  uint32_t cr1its     = READ_REG(huart->Instance->CR1);
 80045dc:	687b      	ldr	r3, [r7, #4]
 80045de:	681b      	ldr	r3, [r3, #0]
 80045e0:	68db      	ldr	r3, [r3, #12]
 80045e2:	623b      	str	r3, [r7, #32]
  uint32_t cr3its     = READ_REG(huart->Instance->CR3);
 80045e4:	687b      	ldr	r3, [r7, #4]
 80045e6:	681b      	ldr	r3, [r3, #0]
 80045e8:	695b      	ldr	r3, [r3, #20]
 80045ea:	61fb      	str	r3, [r7, #28]
  uint32_t errorflags = 0x00U;
 80045ec:	2300      	movs	r3, #0
 80045ee:	61bb      	str	r3, [r7, #24]
  uint32_t dmarequest = 0x00U;
 80045f0:	2300      	movs	r3, #0
 80045f2:	617b      	str	r3, [r7, #20]

  /* If no error occurs */
  errorflags = (isrflags & (uint32_t)(USART_SR_PE | USART_SR_FE | USART_SR_ORE | USART_SR_NE));
 80045f4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80045f6:	f003 030f 	and.w	r3, r3, #15
 80045fa:	61bb      	str	r3, [r7, #24]
  if (errorflags == RESET)
 80045fc:	69bb      	ldr	r3, [r7, #24]
 80045fe:	2b00      	cmp	r3, #0
 8004600:	d10d      	bne.n	800461e <HAL_UART_IRQHandler+0x52>
  {
    /* UART in mode Receiver -------------------------------------------------*/
    if (((isrflags & USART_SR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 8004602:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004604:	f003 0320 	and.w	r3, r3, #32
 8004608:	2b00      	cmp	r3, #0
 800460a:	d008      	beq.n	800461e <HAL_UART_IRQHandler+0x52>
 800460c:	6a3b      	ldr	r3, [r7, #32]
 800460e:	f003 0320 	and.w	r3, r3, #32
 8004612:	2b00      	cmp	r3, #0
 8004614:	d003      	beq.n	800461e <HAL_UART_IRQHandler+0x52>
    {
      UART_Receive_IT(huart);
 8004616:	6878      	ldr	r0, [r7, #4]
 8004618:	f000 fac9 	bl	8004bae <UART_Receive_IT>
      return;
 800461c:	e17b      	b.n	8004916 <HAL_UART_IRQHandler+0x34a>
    }
  }

  /* If some errors occur */
  if ((errorflags != RESET) && (((cr3its & USART_CR3_EIE) != RESET) || ((cr1its & (USART_CR1_RXNEIE | USART_CR1_PEIE)) != RESET)))
 800461e:	69bb      	ldr	r3, [r7, #24]
 8004620:	2b00      	cmp	r3, #0
 8004622:	f000 80b1 	beq.w	8004788 <HAL_UART_IRQHandler+0x1bc>
 8004626:	69fb      	ldr	r3, [r7, #28]
 8004628:	f003 0301 	and.w	r3, r3, #1
 800462c:	2b00      	cmp	r3, #0
 800462e:	d105      	bne.n	800463c <HAL_UART_IRQHandler+0x70>
 8004630:	6a3b      	ldr	r3, [r7, #32]
 8004632:	f403 7390 	and.w	r3, r3, #288	; 0x120
 8004636:	2b00      	cmp	r3, #0
 8004638:	f000 80a6 	beq.w	8004788 <HAL_UART_IRQHandler+0x1bc>
  {
    /* UART parity error interrupt occurred ----------------------------------*/
    if (((isrflags & USART_SR_PE) != RESET) && ((cr1its & USART_CR1_PEIE) != RESET))
 800463c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800463e:	f003 0301 	and.w	r3, r3, #1
 8004642:	2b00      	cmp	r3, #0
 8004644:	d00a      	beq.n	800465c <HAL_UART_IRQHandler+0x90>
 8004646:	6a3b      	ldr	r3, [r7, #32]
 8004648:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800464c:	2b00      	cmp	r3, #0
 800464e:	d005      	beq.n	800465c <HAL_UART_IRQHandler+0x90>
    {
      huart->ErrorCode |= HAL_UART_ERROR_PE;
 8004650:	687b      	ldr	r3, [r7, #4]
 8004652:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004654:	f043 0201 	orr.w	r2, r3, #1
 8004658:	687b      	ldr	r3, [r7, #4]
 800465a:	641a      	str	r2, [r3, #64]	; 0x40
    }

    /* UART noise error interrupt occurred -----------------------------------*/
    if (((isrflags & USART_SR_NE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 800465c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800465e:	f003 0304 	and.w	r3, r3, #4
 8004662:	2b00      	cmp	r3, #0
 8004664:	d00a      	beq.n	800467c <HAL_UART_IRQHandler+0xb0>
 8004666:	69fb      	ldr	r3, [r7, #28]
 8004668:	f003 0301 	and.w	r3, r3, #1
 800466c:	2b00      	cmp	r3, #0
 800466e:	d005      	beq.n	800467c <HAL_UART_IRQHandler+0xb0>
    {
      huart->ErrorCode |= HAL_UART_ERROR_NE;
 8004670:	687b      	ldr	r3, [r7, #4]
 8004672:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004674:	f043 0202 	orr.w	r2, r3, #2
 8004678:	687b      	ldr	r3, [r7, #4]
 800467a:	641a      	str	r2, [r3, #64]	; 0x40
    }

    /* UART frame error interrupt occurred -----------------------------------*/
    if (((isrflags & USART_SR_FE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 800467c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800467e:	f003 0302 	and.w	r3, r3, #2
 8004682:	2b00      	cmp	r3, #0
 8004684:	d00a      	beq.n	800469c <HAL_UART_IRQHandler+0xd0>
 8004686:	69fb      	ldr	r3, [r7, #28]
 8004688:	f003 0301 	and.w	r3, r3, #1
 800468c:	2b00      	cmp	r3, #0
 800468e:	d005      	beq.n	800469c <HAL_UART_IRQHandler+0xd0>
    {
      huart->ErrorCode |= HAL_UART_ERROR_FE;
 8004690:	687b      	ldr	r3, [r7, #4]
 8004692:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004694:	f043 0204 	orr.w	r2, r3, #4
 8004698:	687b      	ldr	r3, [r7, #4]
 800469a:	641a      	str	r2, [r3, #64]	; 0x40
    }

    /* UART Over-Run interrupt occurred --------------------------------------*/
    if (((isrflags & USART_SR_ORE) != RESET) && (((cr1its & USART_CR1_RXNEIE) != RESET) || ((cr3its & USART_CR3_EIE) != RESET)))
 800469c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800469e:	f003 0308 	and.w	r3, r3, #8
 80046a2:	2b00      	cmp	r3, #0
 80046a4:	d00f      	beq.n	80046c6 <HAL_UART_IRQHandler+0xfa>
 80046a6:	6a3b      	ldr	r3, [r7, #32]
 80046a8:	f003 0320 	and.w	r3, r3, #32
 80046ac:	2b00      	cmp	r3, #0
 80046ae:	d104      	bne.n	80046ba <HAL_UART_IRQHandler+0xee>
 80046b0:	69fb      	ldr	r3, [r7, #28]
 80046b2:	f003 0301 	and.w	r3, r3, #1
 80046b6:	2b00      	cmp	r3, #0
 80046b8:	d005      	beq.n	80046c6 <HAL_UART_IRQHandler+0xfa>
    {
      huart->ErrorCode |= HAL_UART_ERROR_ORE;
 80046ba:	687b      	ldr	r3, [r7, #4]
 80046bc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80046be:	f043 0208 	orr.w	r2, r3, #8
 80046c2:	687b      	ldr	r3, [r7, #4]
 80046c4:	641a      	str	r2, [r3, #64]	; 0x40
    }

    /* Call UART Error Call back function if need be --------------------------*/
    if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 80046c6:	687b      	ldr	r3, [r7, #4]
 80046c8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80046ca:	2b00      	cmp	r3, #0
 80046cc:	f000 811e 	beq.w	800490c <HAL_UART_IRQHandler+0x340>
    {
      /* UART in mode Receiver -----------------------------------------------*/
      if (((isrflags & USART_SR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 80046d0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80046d2:	f003 0320 	and.w	r3, r3, #32
 80046d6:	2b00      	cmp	r3, #0
 80046d8:	d007      	beq.n	80046ea <HAL_UART_IRQHandler+0x11e>
 80046da:	6a3b      	ldr	r3, [r7, #32]
 80046dc:	f003 0320 	and.w	r3, r3, #32
 80046e0:	2b00      	cmp	r3, #0
 80046e2:	d002      	beq.n	80046ea <HAL_UART_IRQHandler+0x11e>
      {
        UART_Receive_IT(huart);
 80046e4:	6878      	ldr	r0, [r7, #4]
 80046e6:	f000 fa62 	bl	8004bae <UART_Receive_IT>
      }

      /* If Overrun error occurs, or if any error occurs in DMA mode reception,
         consider error as blocking */
      dmarequest = HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR);
 80046ea:	687b      	ldr	r3, [r7, #4]
 80046ec:	681b      	ldr	r3, [r3, #0]
 80046ee:	695b      	ldr	r3, [r3, #20]
 80046f0:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80046f4:	2b00      	cmp	r3, #0
 80046f6:	bf14      	ite	ne
 80046f8:	2301      	movne	r3, #1
 80046fa:	2300      	moveq	r3, #0
 80046fc:	b2db      	uxtb	r3, r3
 80046fe:	617b      	str	r3, [r7, #20]
      if (((huart->ErrorCode & HAL_UART_ERROR_ORE) != RESET) || dmarequest)
 8004700:	687b      	ldr	r3, [r7, #4]
 8004702:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004704:	f003 0308 	and.w	r3, r3, #8
 8004708:	2b00      	cmp	r3, #0
 800470a:	d102      	bne.n	8004712 <HAL_UART_IRQHandler+0x146>
 800470c:	697b      	ldr	r3, [r7, #20]
 800470e:	2b00      	cmp	r3, #0
 8004710:	d031      	beq.n	8004776 <HAL_UART_IRQHandler+0x1aa>
      {
        /* Blocking error : transfer is aborted
           Set the UART state ready to be able to start again the process,
           Disable Rx Interrupts, and disable Rx DMA request, if ongoing */
        UART_EndRxTransfer(huart);
 8004712:	6878      	ldr	r0, [r7, #4]
 8004714:	f000 f9a4 	bl	8004a60 <UART_EndRxTransfer>

        /* Disable the UART DMA Rx request if enabled */
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8004718:	687b      	ldr	r3, [r7, #4]
 800471a:	681b      	ldr	r3, [r3, #0]
 800471c:	695b      	ldr	r3, [r3, #20]
 800471e:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8004722:	2b00      	cmp	r3, #0
 8004724:	d023      	beq.n	800476e <HAL_UART_IRQHandler+0x1a2>
        {
          CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8004726:	687b      	ldr	r3, [r7, #4]
 8004728:	681b      	ldr	r3, [r3, #0]
 800472a:	695a      	ldr	r2, [r3, #20]
 800472c:	687b      	ldr	r3, [r7, #4]
 800472e:	681b      	ldr	r3, [r3, #0]
 8004730:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8004734:	615a      	str	r2, [r3, #20]

          /* Abort the UART DMA Rx channel */
          if (huart->hdmarx != NULL)
 8004736:	687b      	ldr	r3, [r7, #4]
 8004738:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800473a:	2b00      	cmp	r3, #0
 800473c:	d013      	beq.n	8004766 <HAL_UART_IRQHandler+0x19a>
          {
            /* Set the UART DMA Abort callback :
               will lead to call HAL_UART_ErrorCallback() at end of DMA abort procedure */
            huart->hdmarx->XferAbortCallback = UART_DMAAbortOnError;
 800473e:	687b      	ldr	r3, [r7, #4]
 8004740:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004742:	4a76      	ldr	r2, [pc, #472]	; (800491c <HAL_UART_IRQHandler+0x350>)
 8004744:	635a      	str	r2, [r3, #52]	; 0x34
            if (HAL_DMA_Abort_IT(huart->hdmarx) != HAL_OK)
 8004746:	687b      	ldr	r3, [r7, #4]
 8004748:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800474a:	4618      	mov	r0, r3
 800474c:	f7fd ff94 	bl	8002678 <HAL_DMA_Abort_IT>
 8004750:	4603      	mov	r3, r0
 8004752:	2b00      	cmp	r3, #0
 8004754:	d016      	beq.n	8004784 <HAL_UART_IRQHandler+0x1b8>
            {
              /* Call Directly XferAbortCallback function in case of error */
              huart->hdmarx->XferAbortCallback(huart->hdmarx);
 8004756:	687b      	ldr	r3, [r7, #4]
 8004758:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800475a:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800475c:	687a      	ldr	r2, [r7, #4]
 800475e:	6b92      	ldr	r2, [r2, #56]	; 0x38
 8004760:	4610      	mov	r0, r2
 8004762:	4798      	blx	r3
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8004764:	e00e      	b.n	8004784 <HAL_UART_IRQHandler+0x1b8>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
            /*Call registered error callback*/
            huart->ErrorCallback(huart);
#else
            /*Call legacy weak error callback*/
            HAL_UART_ErrorCallback(huart);
 8004766:	6878      	ldr	r0, [r7, #4]
 8004768:	f000 f8e3 	bl	8004932 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800476c:	e00a      	b.n	8004784 <HAL_UART_IRQHandler+0x1b8>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
#else
          /*Call legacy weak error callback*/
          HAL_UART_ErrorCallback(huart);
 800476e:	6878      	ldr	r0, [r7, #4]
 8004770:	f000 f8df 	bl	8004932 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8004774:	e006      	b.n	8004784 <HAL_UART_IRQHandler+0x1b8>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered error callback*/
        huart->ErrorCallback(huart);
#else
        /*Call legacy weak error callback*/
        HAL_UART_ErrorCallback(huart);
 8004776:	6878      	ldr	r0, [r7, #4]
 8004778:	f000 f8db 	bl	8004932 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */

        huart->ErrorCode = HAL_UART_ERROR_NONE;
 800477c:	687b      	ldr	r3, [r7, #4]
 800477e:	2200      	movs	r2, #0
 8004780:	641a      	str	r2, [r3, #64]	; 0x40
      }
    }
    return;
 8004782:	e0c3      	b.n	800490c <HAL_UART_IRQHandler+0x340>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8004784:	bf00      	nop
    return;
 8004786:	e0c1      	b.n	800490c <HAL_UART_IRQHandler+0x340>
  } /* End if some error occurs */

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : */
  if (  (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8004788:	687b      	ldr	r3, [r7, #4]
 800478a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800478c:	2b01      	cmp	r3, #1
 800478e:	f040 80a1 	bne.w	80048d4 <HAL_UART_IRQHandler+0x308>
      &&((isrflags & USART_SR_IDLE) != 0U)
 8004792:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004794:	f003 0310 	and.w	r3, r3, #16
 8004798:	2b00      	cmp	r3, #0
 800479a:	f000 809b 	beq.w	80048d4 <HAL_UART_IRQHandler+0x308>
      &&((cr1its & USART_SR_IDLE) != 0U))
 800479e:	6a3b      	ldr	r3, [r7, #32]
 80047a0:	f003 0310 	and.w	r3, r3, #16
 80047a4:	2b00      	cmp	r3, #0
 80047a6:	f000 8095 	beq.w	80048d4 <HAL_UART_IRQHandler+0x308>
  {
    __HAL_UART_CLEAR_IDLEFLAG(huart);
 80047aa:	2300      	movs	r3, #0
 80047ac:	60fb      	str	r3, [r7, #12]
 80047ae:	687b      	ldr	r3, [r7, #4]
 80047b0:	681b      	ldr	r3, [r3, #0]
 80047b2:	681b      	ldr	r3, [r3, #0]
 80047b4:	60fb      	str	r3, [r7, #12]
 80047b6:	687b      	ldr	r3, [r7, #4]
 80047b8:	681b      	ldr	r3, [r3, #0]
 80047ba:	685b      	ldr	r3, [r3, #4]
 80047bc:	60fb      	str	r3, [r7, #12]
 80047be:	68fb      	ldr	r3, [r7, #12]

    /* Check if DMA mode is enabled in UART */
    if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80047c0:	687b      	ldr	r3, [r7, #4]
 80047c2:	681b      	ldr	r3, [r3, #0]
 80047c4:	695b      	ldr	r3, [r3, #20]
 80047c6:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80047ca:	2b00      	cmp	r3, #0
 80047cc:	d04e      	beq.n	800486c <HAL_UART_IRQHandler+0x2a0>
    {
      /* DMA mode enabled */
      /* Check received length : If all expected data are received, do nothing,
         (DMA cplt callback will be called).
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_remaining_rx_data = (uint16_t) __HAL_DMA_GET_COUNTER(huart->hdmarx);
 80047ce:	687b      	ldr	r3, [r7, #4]
 80047d0:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80047d2:	681b      	ldr	r3, [r3, #0]
 80047d4:	685b      	ldr	r3, [r3, #4]
 80047d6:	823b      	strh	r3, [r7, #16]
      if (  (nb_remaining_rx_data > 0U)
 80047d8:	8a3b      	ldrh	r3, [r7, #16]
 80047da:	2b00      	cmp	r3, #0
 80047dc:	f000 8098 	beq.w	8004910 <HAL_UART_IRQHandler+0x344>
          &&(nb_remaining_rx_data < huart->RxXferSize))
 80047e0:	687b      	ldr	r3, [r7, #4]
 80047e2:	8d9b      	ldrh	r3, [r3, #44]	; 0x2c
 80047e4:	8a3a      	ldrh	r2, [r7, #16]
 80047e6:	429a      	cmp	r2, r3
 80047e8:	f080 8092 	bcs.w	8004910 <HAL_UART_IRQHandler+0x344>
      {
        /* Reception is not complete */
        huart->RxXferCount = nb_remaining_rx_data;
 80047ec:	687b      	ldr	r3, [r7, #4]
 80047ee:	8a3a      	ldrh	r2, [r7, #16]
 80047f0:	85da      	strh	r2, [r3, #46]	; 0x2e

        /* In Normal mode, end DMA xfer and HAL UART Rx process*/
        if (huart->hdmarx->Init.Mode != DMA_CIRCULAR)
 80047f2:	687b      	ldr	r3, [r7, #4]
 80047f4:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80047f6:	699b      	ldr	r3, [r3, #24]
 80047f8:	2b20      	cmp	r3, #32
 80047fa:	d02b      	beq.n	8004854 <HAL_UART_IRQHandler+0x288>
        {
          /* Disable PE and ERR (Frame error, noise error, overrun error) interrupts */
          CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 80047fc:	687b      	ldr	r3, [r7, #4]
 80047fe:	681b      	ldr	r3, [r3, #0]
 8004800:	68da      	ldr	r2, [r3, #12]
 8004802:	687b      	ldr	r3, [r7, #4]
 8004804:	681b      	ldr	r3, [r3, #0]
 8004806:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 800480a:	60da      	str	r2, [r3, #12]
          CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800480c:	687b      	ldr	r3, [r7, #4]
 800480e:	681b      	ldr	r3, [r3, #0]
 8004810:	695a      	ldr	r2, [r3, #20]
 8004812:	687b      	ldr	r3, [r7, #4]
 8004814:	681b      	ldr	r3, [r3, #0]
 8004816:	f022 0201 	bic.w	r2, r2, #1
 800481a:	615a      	str	r2, [r3, #20]

          /* Disable the DMA transfer for the receiver request by resetting the DMAR bit
             in the UART CR3 register */
          CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 800481c:	687b      	ldr	r3, [r7, #4]
 800481e:	681b      	ldr	r3, [r3, #0]
 8004820:	695a      	ldr	r2, [r3, #20]
 8004822:	687b      	ldr	r3, [r7, #4]
 8004824:	681b      	ldr	r3, [r3, #0]
 8004826:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 800482a:	615a      	str	r2, [r3, #20]

          /* At end of Rx process, restore huart->RxState to Ready */
          huart->RxState = HAL_UART_STATE_READY;
 800482c:	687b      	ldr	r3, [r7, #4]
 800482e:	2220      	movs	r2, #32
 8004830:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
          huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8004834:	687b      	ldr	r3, [r7, #4]
 8004836:	2200      	movs	r2, #0
 8004838:	631a      	str	r2, [r3, #48]	; 0x30

          CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800483a:	687b      	ldr	r3, [r7, #4]
 800483c:	681b      	ldr	r3, [r3, #0]
 800483e:	68da      	ldr	r2, [r3, #12]
 8004840:	687b      	ldr	r3, [r7, #4]
 8004842:	681b      	ldr	r3, [r3, #0]
 8004844:	f022 0210 	bic.w	r2, r2, #16
 8004848:	60da      	str	r2, [r3, #12]

          /* Last bytes received, so no need as the abort is immediate */
          (void)HAL_DMA_Abort(huart->hdmarx);
 800484a:	687b      	ldr	r3, [r7, #4]
 800484c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800484e:	4618      	mov	r0, r3
 8004850:	f7fd fed7 	bl	8002602 <HAL_DMA_Abort>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
 8004854:	687b      	ldr	r3, [r7, #4]
 8004856:	8d9a      	ldrh	r2, [r3, #44]	; 0x2c
 8004858:	687b      	ldr	r3, [r7, #4]
 800485a:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 800485c:	b29b      	uxth	r3, r3
 800485e:	1ad3      	subs	r3, r2, r3
 8004860:	b29b      	uxth	r3, r3
 8004862:	4619      	mov	r1, r3
 8004864:	6878      	ldr	r0, [r7, #4]
 8004866:	f000 f86d 	bl	8004944 <HAL_UARTEx_RxEventCallback>
#endif
      }
      return;
 800486a:	e051      	b.n	8004910 <HAL_UART_IRQHandler+0x344>
    else
    {
      /* DMA mode not enabled */
      /* Check received length : If all expected data are received, do nothing.
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_rx_data = huart->RxXferSize - huart->RxXferCount;
 800486c:	687b      	ldr	r3, [r7, #4]
 800486e:	8d9a      	ldrh	r2, [r3, #44]	; 0x2c
 8004870:	687b      	ldr	r3, [r7, #4]
 8004872:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 8004874:	b29b      	uxth	r3, r3
 8004876:	1ad3      	subs	r3, r2, r3
 8004878:	827b      	strh	r3, [r7, #18]
      if (  (huart->RxXferCount > 0U)
 800487a:	687b      	ldr	r3, [r7, #4]
 800487c:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 800487e:	b29b      	uxth	r3, r3
 8004880:	2b00      	cmp	r3, #0
 8004882:	d047      	beq.n	8004914 <HAL_UART_IRQHandler+0x348>
          &&(nb_rx_data > 0U) )
 8004884:	8a7b      	ldrh	r3, [r7, #18]
 8004886:	2b00      	cmp	r3, #0
 8004888:	d044      	beq.n	8004914 <HAL_UART_IRQHandler+0x348>
      {
        /* Disable the UART Parity Error Interrupt and RXNE interrupts */
        CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 800488a:	687b      	ldr	r3, [r7, #4]
 800488c:	681b      	ldr	r3, [r3, #0]
 800488e:	68da      	ldr	r2, [r3, #12]
 8004890:	687b      	ldr	r3, [r7, #4]
 8004892:	681b      	ldr	r3, [r3, #0]
 8004894:	f422 7290 	bic.w	r2, r2, #288	; 0x120
 8004898:	60da      	str	r2, [r3, #12]

        /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
        CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800489a:	687b      	ldr	r3, [r7, #4]
 800489c:	681b      	ldr	r3, [r3, #0]
 800489e:	695a      	ldr	r2, [r3, #20]
 80048a0:	687b      	ldr	r3, [r7, #4]
 80048a2:	681b      	ldr	r3, [r3, #0]
 80048a4:	f022 0201 	bic.w	r2, r2, #1
 80048a8:	615a      	str	r2, [r3, #20]

        /* Rx process is completed, restore huart->RxState to Ready */
        huart->RxState = HAL_UART_STATE_READY;
 80048aa:	687b      	ldr	r3, [r7, #4]
 80048ac:	2220      	movs	r2, #32
 80048ae:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80048b2:	687b      	ldr	r3, [r7, #4]
 80048b4:	2200      	movs	r2, #0
 80048b6:	631a      	str	r2, [r3, #48]	; 0x30

        CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 80048b8:	687b      	ldr	r3, [r7, #4]
 80048ba:	681b      	ldr	r3, [r3, #0]
 80048bc:	68da      	ldr	r2, [r3, #12]
 80048be:	687b      	ldr	r3, [r7, #4]
 80048c0:	681b      	ldr	r3, [r3, #0]
 80048c2:	f022 0210 	bic.w	r2, r2, #16
 80048c6:	60da      	str	r2, [r3, #12]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxEventCallback(huart, nb_rx_data);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, nb_rx_data);
 80048c8:	8a7b      	ldrh	r3, [r7, #18]
 80048ca:	4619      	mov	r1, r3
 80048cc:	6878      	ldr	r0, [r7, #4]
 80048ce:	f000 f839 	bl	8004944 <HAL_UARTEx_RxEventCallback>
#endif
      }
      return;
 80048d2:	e01f      	b.n	8004914 <HAL_UART_IRQHandler+0x348>
    }
  }

  /* UART in mode Transmitter ------------------------------------------------*/
  if (((isrflags & USART_SR_TXE) != RESET) && ((cr1its & USART_CR1_TXEIE) != RESET))
 80048d4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80048d6:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80048da:	2b00      	cmp	r3, #0
 80048dc:	d008      	beq.n	80048f0 <HAL_UART_IRQHandler+0x324>
 80048de:	6a3b      	ldr	r3, [r7, #32]
 80048e0:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80048e4:	2b00      	cmp	r3, #0
 80048e6:	d003      	beq.n	80048f0 <HAL_UART_IRQHandler+0x324>
  {
    UART_Transmit_IT(huart);
 80048e8:	6878      	ldr	r0, [r7, #4]
 80048ea:	f000 f8f9 	bl	8004ae0 <UART_Transmit_IT>
    return;
 80048ee:	e012      	b.n	8004916 <HAL_UART_IRQHandler+0x34a>
  }

  /* UART in mode Transmitter end --------------------------------------------*/
  if (((isrflags & USART_SR_TC) != RESET) && ((cr1its & USART_CR1_TCIE) != RESET))
 80048f0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80048f2:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80048f6:	2b00      	cmp	r3, #0
 80048f8:	d00d      	beq.n	8004916 <HAL_UART_IRQHandler+0x34a>
 80048fa:	6a3b      	ldr	r3, [r7, #32]
 80048fc:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8004900:	2b00      	cmp	r3, #0
 8004902:	d008      	beq.n	8004916 <HAL_UART_IRQHandler+0x34a>
  {
    UART_EndTransmit_IT(huart);
 8004904:	6878      	ldr	r0, [r7, #4]
 8004906:	f000 f93a 	bl	8004b7e <UART_EndTransmit_IT>
    return;
 800490a:	e004      	b.n	8004916 <HAL_UART_IRQHandler+0x34a>
    return;
 800490c:	bf00      	nop
 800490e:	e002      	b.n	8004916 <HAL_UART_IRQHandler+0x34a>
      return;
 8004910:	bf00      	nop
 8004912:	e000      	b.n	8004916 <HAL_UART_IRQHandler+0x34a>
      return;
 8004914:	bf00      	nop
  }
}
 8004916:	3728      	adds	r7, #40	; 0x28
 8004918:	46bd      	mov	sp, r7
 800491a:	bd80      	pop	{r7, pc}
 800491c:	08004ab9 	.word	0x08004ab9

08004920 <HAL_UART_TxCpltCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_TxCpltCallback(UART_HandleTypeDef *huart)
{
 8004920:	b480      	push	{r7}
 8004922:	b083      	sub	sp, #12
 8004924:	af00      	add	r7, sp, #0
 8004926:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_TxCpltCallback could be implemented in the user file
   */
}
 8004928:	bf00      	nop
 800492a:	370c      	adds	r7, #12
 800492c:	46bd      	mov	sp, r7
 800492e:	bc80      	pop	{r7}
 8004930:	4770      	bx	lr

08004932 <HAL_UART_ErrorCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_ErrorCallback(UART_HandleTypeDef *huart)
{
 8004932:	b480      	push	{r7}
 8004934:	b083      	sub	sp, #12
 8004936:	af00      	add	r7, sp, #0
 8004938:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_ErrorCallback could be implemented in the user file
   */
}
 800493a:	bf00      	nop
 800493c:	370c      	adds	r7, #12
 800493e:	46bd      	mov	sp, r7
 8004940:	bc80      	pop	{r7}
 8004942:	4770      	bx	lr

08004944 <HAL_UARTEx_RxEventCallback>:
  * @param  Size  Number of data available in application reception buffer (indicates a position in
  *               reception buffer until which, data are available)
  * @retval None
  */
__weak void HAL_UARTEx_RxEventCallback(UART_HandleTypeDef *huart, uint16_t Size)
{
 8004944:	b480      	push	{r7}
 8004946:	b083      	sub	sp, #12
 8004948:	af00      	add	r7, sp, #0
 800494a:	6078      	str	r0, [r7, #4]
 800494c:	460b      	mov	r3, r1
 800494e:	807b      	strh	r3, [r7, #2]
  UNUSED(Size);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_RxEventCallback can be implemented in the user file.
   */
}
 8004950:	bf00      	nop
 8004952:	370c      	adds	r7, #12
 8004954:	46bd      	mov	sp, r7
 8004956:	bc80      	pop	{r7}
 8004958:	4770      	bx	lr

0800495a <UART_WaitOnFlagUntilTimeout>:
  * @param  Tickstart Tick start value
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status, uint32_t Tickstart, uint32_t Timeout)
{
 800495a:	b580      	push	{r7, lr}
 800495c:	b084      	sub	sp, #16
 800495e:	af00      	add	r7, sp, #0
 8004960:	60f8      	str	r0, [r7, #12]
 8004962:	60b9      	str	r1, [r7, #8]
 8004964:	603b      	str	r3, [r7, #0]
 8004966:	4613      	mov	r3, r2
 8004968:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 800496a:	e02c      	b.n	80049c6 <UART_WaitOnFlagUntilTimeout+0x6c>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 800496c:	69bb      	ldr	r3, [r7, #24]
 800496e:	f1b3 3fff 	cmp.w	r3, #4294967295
 8004972:	d028      	beq.n	80049c6 <UART_WaitOnFlagUntilTimeout+0x6c>
    {
      if ((Timeout == 0U) || ((HAL_GetTick() - Tickstart) > Timeout))
 8004974:	69bb      	ldr	r3, [r7, #24]
 8004976:	2b00      	cmp	r3, #0
 8004978:	d007      	beq.n	800498a <UART_WaitOnFlagUntilTimeout+0x30>
 800497a:	f7fd fd2b 	bl	80023d4 <HAL_GetTick>
 800497e:	4602      	mov	r2, r0
 8004980:	683b      	ldr	r3, [r7, #0]
 8004982:	1ad3      	subs	r3, r2, r3
 8004984:	69ba      	ldr	r2, [r7, #24]
 8004986:	429a      	cmp	r2, r3
 8004988:	d21d      	bcs.n	80049c6 <UART_WaitOnFlagUntilTimeout+0x6c>
      {
        /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts for the interrupt process */
        CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 800498a:	68fb      	ldr	r3, [r7, #12]
 800498c:	681b      	ldr	r3, [r3, #0]
 800498e:	68da      	ldr	r2, [r3, #12]
 8004990:	68fb      	ldr	r3, [r7, #12]
 8004992:	681b      	ldr	r3, [r3, #0]
 8004994:	f422 72d0 	bic.w	r2, r2, #416	; 0x1a0
 8004998:	60da      	str	r2, [r3, #12]
        CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800499a:	68fb      	ldr	r3, [r7, #12]
 800499c:	681b      	ldr	r3, [r3, #0]
 800499e:	695a      	ldr	r2, [r3, #20]
 80049a0:	68fb      	ldr	r3, [r7, #12]
 80049a2:	681b      	ldr	r3, [r3, #0]
 80049a4:	f022 0201 	bic.w	r2, r2, #1
 80049a8:	615a      	str	r2, [r3, #20]

        huart->gState  = HAL_UART_STATE_READY;
 80049aa:	68fb      	ldr	r3, [r7, #12]
 80049ac:	2220      	movs	r2, #32
 80049ae:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        huart->RxState = HAL_UART_STATE_READY;
 80049b2:	68fb      	ldr	r3, [r7, #12]
 80049b4:	2220      	movs	r2, #32
 80049b6:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

        /* Process Unlocked */
        __HAL_UNLOCK(huart);
 80049ba:	68fb      	ldr	r3, [r7, #12]
 80049bc:	2200      	movs	r2, #0
 80049be:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_TIMEOUT;
 80049c2:	2303      	movs	r3, #3
 80049c4:	e00f      	b.n	80049e6 <UART_WaitOnFlagUntilTimeout+0x8c>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 80049c6:	68fb      	ldr	r3, [r7, #12]
 80049c8:	681b      	ldr	r3, [r3, #0]
 80049ca:	681a      	ldr	r2, [r3, #0]
 80049cc:	68bb      	ldr	r3, [r7, #8]
 80049ce:	4013      	ands	r3, r2
 80049d0:	68ba      	ldr	r2, [r7, #8]
 80049d2:	429a      	cmp	r2, r3
 80049d4:	bf0c      	ite	eq
 80049d6:	2301      	moveq	r3, #1
 80049d8:	2300      	movne	r3, #0
 80049da:	b2db      	uxtb	r3, r3
 80049dc:	461a      	mov	r2, r3
 80049de:	79fb      	ldrb	r3, [r7, #7]
 80049e0:	429a      	cmp	r2, r3
 80049e2:	d0c3      	beq.n	800496c <UART_WaitOnFlagUntilTimeout+0x12>
      }
    }
  }
  return HAL_OK;
 80049e4:	2300      	movs	r3, #0
}
 80049e6:	4618      	mov	r0, r3
 80049e8:	3710      	adds	r7, #16
 80049ea:	46bd      	mov	sp, r7
 80049ec:	bd80      	pop	{r7, pc}

080049ee <UART_Start_Receive_IT>:
  * @param  pData Pointer to data buffer (u8 or u16 data elements).
  * @param  Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_Start_Receive_IT(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 80049ee:	b480      	push	{r7}
 80049f0:	b085      	sub	sp, #20
 80049f2:	af00      	add	r7, sp, #0
 80049f4:	60f8      	str	r0, [r7, #12]
 80049f6:	60b9      	str	r1, [r7, #8]
 80049f8:	4613      	mov	r3, r2
 80049fa:	80fb      	strh	r3, [r7, #6]
  huart->pRxBuffPtr = pData;
 80049fc:	68fb      	ldr	r3, [r7, #12]
 80049fe:	68ba      	ldr	r2, [r7, #8]
 8004a00:	629a      	str	r2, [r3, #40]	; 0x28
  huart->RxXferSize = Size;
 8004a02:	68fb      	ldr	r3, [r7, #12]
 8004a04:	88fa      	ldrh	r2, [r7, #6]
 8004a06:	859a      	strh	r2, [r3, #44]	; 0x2c
  huart->RxXferCount = Size;
 8004a08:	68fb      	ldr	r3, [r7, #12]
 8004a0a:	88fa      	ldrh	r2, [r7, #6]
 8004a0c:	85da      	strh	r2, [r3, #46]	; 0x2e

  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8004a0e:	68fb      	ldr	r3, [r7, #12]
 8004a10:	2200      	movs	r2, #0
 8004a12:	641a      	str	r2, [r3, #64]	; 0x40
  huart->RxState = HAL_UART_STATE_BUSY_RX;
 8004a14:	68fb      	ldr	r3, [r7, #12]
 8004a16:	2222      	movs	r2, #34	; 0x22
 8004a18:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 8004a1c:	68fb      	ldr	r3, [r7, #12]
 8004a1e:	2200      	movs	r2, #0
 8004a20:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Enable the UART Parity Error Interrupt */
  __HAL_UART_ENABLE_IT(huart, UART_IT_PE);
 8004a24:	68fb      	ldr	r3, [r7, #12]
 8004a26:	681b      	ldr	r3, [r3, #0]
 8004a28:	68da      	ldr	r2, [r3, #12]
 8004a2a:	68fb      	ldr	r3, [r7, #12]
 8004a2c:	681b      	ldr	r3, [r3, #0]
 8004a2e:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8004a32:	60da      	str	r2, [r3, #12]

  /* Enable the UART Error Interrupt: (Frame error, noise error, overrun error) */
  __HAL_UART_ENABLE_IT(huart, UART_IT_ERR);
 8004a34:	68fb      	ldr	r3, [r7, #12]
 8004a36:	681b      	ldr	r3, [r3, #0]
 8004a38:	695a      	ldr	r2, [r3, #20]
 8004a3a:	68fb      	ldr	r3, [r7, #12]
 8004a3c:	681b      	ldr	r3, [r3, #0]
 8004a3e:	f042 0201 	orr.w	r2, r2, #1
 8004a42:	615a      	str	r2, [r3, #20]

  /* Enable the UART Data Register not empty Interrupt */
  __HAL_UART_ENABLE_IT(huart, UART_IT_RXNE);
 8004a44:	68fb      	ldr	r3, [r7, #12]
 8004a46:	681b      	ldr	r3, [r3, #0]
 8004a48:	68da      	ldr	r2, [r3, #12]
 8004a4a:	68fb      	ldr	r3, [r7, #12]
 8004a4c:	681b      	ldr	r3, [r3, #0]
 8004a4e:	f042 0220 	orr.w	r2, r2, #32
 8004a52:	60da      	str	r2, [r3, #12]

  return HAL_OK;
 8004a54:	2300      	movs	r3, #0
}
 8004a56:	4618      	mov	r0, r3
 8004a58:	3714      	adds	r7, #20
 8004a5a:	46bd      	mov	sp, r7
 8004a5c:	bc80      	pop	{r7}
 8004a5e:	4770      	bx	lr

08004a60 <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 8004a60:	b480      	push	{r7}
 8004a62:	b083      	sub	sp, #12
 8004a64:	af00      	add	r7, sp, #0
 8004a66:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8004a68:	687b      	ldr	r3, [r7, #4]
 8004a6a:	681b      	ldr	r3, [r3, #0]
 8004a6c:	68da      	ldr	r2, [r3, #12]
 8004a6e:	687b      	ldr	r3, [r7, #4]
 8004a70:	681b      	ldr	r3, [r3, #0]
 8004a72:	f422 7290 	bic.w	r2, r2, #288	; 0x120
 8004a76:	60da      	str	r2, [r3, #12]
  CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8004a78:	687b      	ldr	r3, [r7, #4]
 8004a7a:	681b      	ldr	r3, [r3, #0]
 8004a7c:	695a      	ldr	r2, [r3, #20]
 8004a7e:	687b      	ldr	r3, [r7, #4]
 8004a80:	681b      	ldr	r3, [r3, #0]
 8004a82:	f022 0201 	bic.w	r2, r2, #1
 8004a86:	615a      	str	r2, [r3, #20]

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8004a88:	687b      	ldr	r3, [r7, #4]
 8004a8a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004a8c:	2b01      	cmp	r3, #1
 8004a8e:	d107      	bne.n	8004aa0 <UART_EndRxTransfer+0x40>
  {
    CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8004a90:	687b      	ldr	r3, [r7, #4]
 8004a92:	681b      	ldr	r3, [r3, #0]
 8004a94:	68da      	ldr	r2, [r3, #12]
 8004a96:	687b      	ldr	r3, [r7, #4]
 8004a98:	681b      	ldr	r3, [r3, #0]
 8004a9a:	f022 0210 	bic.w	r2, r2, #16
 8004a9e:	60da      	str	r2, [r3, #12]
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 8004aa0:	687b      	ldr	r3, [r7, #4]
 8004aa2:	2220      	movs	r2, #32
 8004aa4:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8004aa8:	687b      	ldr	r3, [r7, #4]
 8004aaa:	2200      	movs	r2, #0
 8004aac:	631a      	str	r2, [r3, #48]	; 0x30
}
 8004aae:	bf00      	nop
 8004ab0:	370c      	adds	r7, #12
 8004ab2:	46bd      	mov	sp, r7
 8004ab4:	bc80      	pop	{r7}
 8004ab6:	4770      	bx	lr

08004ab8 <UART_DMAAbortOnError>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void UART_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 8004ab8:	b580      	push	{r7, lr}
 8004aba:	b084      	sub	sp, #16
 8004abc:	af00      	add	r7, sp, #0
 8004abe:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8004ac0:	687b      	ldr	r3, [r7, #4]
 8004ac2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004ac4:	60fb      	str	r3, [r7, #12]
  huart->RxXferCount = 0x00U;
 8004ac6:	68fb      	ldr	r3, [r7, #12]
 8004ac8:	2200      	movs	r2, #0
 8004aca:	85da      	strh	r2, [r3, #46]	; 0x2e
  huart->TxXferCount = 0x00U;
 8004acc:	68fb      	ldr	r3, [r7, #12]
 8004ace:	2200      	movs	r2, #0
 8004ad0:	84da      	strh	r2, [r3, #38]	; 0x26
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 8004ad2:	68f8      	ldr	r0, [r7, #12]
 8004ad4:	f7ff ff2d 	bl	8004932 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 8004ad8:	bf00      	nop
 8004ada:	3710      	adds	r7, #16
 8004adc:	46bd      	mov	sp, r7
 8004ade:	bd80      	pop	{r7, pc}

08004ae0 <UART_Transmit_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_Transmit_IT(UART_HandleTypeDef *huart)
{
 8004ae0:	b480      	push	{r7}
 8004ae2:	b085      	sub	sp, #20
 8004ae4:	af00      	add	r7, sp, #0
 8004ae6:	6078      	str	r0, [r7, #4]
  uint16_t *tmp;

  /* Check that a Tx process is ongoing */
  if (huart->gState == HAL_UART_STATE_BUSY_TX)
 8004ae8:	687b      	ldr	r3, [r7, #4]
 8004aea:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8004aee:	b2db      	uxtb	r3, r3
 8004af0:	2b21      	cmp	r3, #33	; 0x21
 8004af2:	d13e      	bne.n	8004b72 <UART_Transmit_IT+0x92>
  {
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8004af4:	687b      	ldr	r3, [r7, #4]
 8004af6:	689b      	ldr	r3, [r3, #8]
 8004af8:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8004afc:	d114      	bne.n	8004b28 <UART_Transmit_IT+0x48>
 8004afe:	687b      	ldr	r3, [r7, #4]
 8004b00:	691b      	ldr	r3, [r3, #16]
 8004b02:	2b00      	cmp	r3, #0
 8004b04:	d110      	bne.n	8004b28 <UART_Transmit_IT+0x48>
    {
      tmp = (uint16_t *) huart->pTxBuffPtr;
 8004b06:	687b      	ldr	r3, [r7, #4]
 8004b08:	6a1b      	ldr	r3, [r3, #32]
 8004b0a:	60fb      	str	r3, [r7, #12]
      huart->Instance->DR = (uint16_t)(*tmp & (uint16_t)0x01FF);
 8004b0c:	68fb      	ldr	r3, [r7, #12]
 8004b0e:	881b      	ldrh	r3, [r3, #0]
 8004b10:	461a      	mov	r2, r3
 8004b12:	687b      	ldr	r3, [r7, #4]
 8004b14:	681b      	ldr	r3, [r3, #0]
 8004b16:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8004b1a:	605a      	str	r2, [r3, #4]
      huart->pTxBuffPtr += 2U;
 8004b1c:	687b      	ldr	r3, [r7, #4]
 8004b1e:	6a1b      	ldr	r3, [r3, #32]
 8004b20:	1c9a      	adds	r2, r3, #2
 8004b22:	687b      	ldr	r3, [r7, #4]
 8004b24:	621a      	str	r2, [r3, #32]
 8004b26:	e008      	b.n	8004b3a <UART_Transmit_IT+0x5a>
    }
    else
    {
      huart->Instance->DR = (uint8_t)(*huart->pTxBuffPtr++ & (uint8_t)0x00FF);
 8004b28:	687b      	ldr	r3, [r7, #4]
 8004b2a:	6a1b      	ldr	r3, [r3, #32]
 8004b2c:	1c59      	adds	r1, r3, #1
 8004b2e:	687a      	ldr	r2, [r7, #4]
 8004b30:	6211      	str	r1, [r2, #32]
 8004b32:	781a      	ldrb	r2, [r3, #0]
 8004b34:	687b      	ldr	r3, [r7, #4]
 8004b36:	681b      	ldr	r3, [r3, #0]
 8004b38:	605a      	str	r2, [r3, #4]
    }

    if (--huart->TxXferCount == 0U)
 8004b3a:	687b      	ldr	r3, [r7, #4]
 8004b3c:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 8004b3e:	b29b      	uxth	r3, r3
 8004b40:	3b01      	subs	r3, #1
 8004b42:	b29b      	uxth	r3, r3
 8004b44:	687a      	ldr	r2, [r7, #4]
 8004b46:	4619      	mov	r1, r3
 8004b48:	84d1      	strh	r1, [r2, #38]	; 0x26
 8004b4a:	2b00      	cmp	r3, #0
 8004b4c:	d10f      	bne.n	8004b6e <UART_Transmit_IT+0x8e>
    {
      /* Disable the UART Transmit Complete Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_TXE);
 8004b4e:	687b      	ldr	r3, [r7, #4]
 8004b50:	681b      	ldr	r3, [r3, #0]
 8004b52:	68da      	ldr	r2, [r3, #12]
 8004b54:	687b      	ldr	r3, [r7, #4]
 8004b56:	681b      	ldr	r3, [r3, #0]
 8004b58:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 8004b5c:	60da      	str	r2, [r3, #12]

      /* Enable the UART Transmit Complete Interrupt */
      __HAL_UART_ENABLE_IT(huart, UART_IT_TC);
 8004b5e:	687b      	ldr	r3, [r7, #4]
 8004b60:	681b      	ldr	r3, [r3, #0]
 8004b62:	68da      	ldr	r2, [r3, #12]
 8004b64:	687b      	ldr	r3, [r7, #4]
 8004b66:	681b      	ldr	r3, [r3, #0]
 8004b68:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8004b6c:	60da      	str	r2, [r3, #12]
    }
    return HAL_OK;
 8004b6e:	2300      	movs	r3, #0
 8004b70:	e000      	b.n	8004b74 <UART_Transmit_IT+0x94>
  }
  else
  {
    return HAL_BUSY;
 8004b72:	2302      	movs	r3, #2
  }
}
 8004b74:	4618      	mov	r0, r3
 8004b76:	3714      	adds	r7, #20
 8004b78:	46bd      	mov	sp, r7
 8004b7a:	bc80      	pop	{r7}
 8004b7c:	4770      	bx	lr

08004b7e <UART_EndTransmit_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_EndTransmit_IT(UART_HandleTypeDef *huart)
{
 8004b7e:	b580      	push	{r7, lr}
 8004b80:	b082      	sub	sp, #8
 8004b82:	af00      	add	r7, sp, #0
 8004b84:	6078      	str	r0, [r7, #4]
  /* Disable the UART Transmit Complete Interrupt */
  __HAL_UART_DISABLE_IT(huart, UART_IT_TC);
 8004b86:	687b      	ldr	r3, [r7, #4]
 8004b88:	681b      	ldr	r3, [r3, #0]
 8004b8a:	68da      	ldr	r2, [r3, #12]
 8004b8c:	687b      	ldr	r3, [r7, #4]
 8004b8e:	681b      	ldr	r3, [r3, #0]
 8004b90:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8004b94:	60da      	str	r2, [r3, #12]

  /* Tx process is ended, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 8004b96:	687b      	ldr	r3, [r7, #4]
 8004b98:	2220      	movs	r2, #32
 8004b9a:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx complete callback*/
  huart->TxCpltCallback(huart);
#else
  /*Call legacy weak Tx complete callback*/
  HAL_UART_TxCpltCallback(huart);
 8004b9e:	6878      	ldr	r0, [r7, #4]
 8004ba0:	f7ff febe 	bl	8004920 <HAL_UART_TxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */

  return HAL_OK;
 8004ba4:	2300      	movs	r3, #0
}
 8004ba6:	4618      	mov	r0, r3
 8004ba8:	3708      	adds	r7, #8
 8004baa:	46bd      	mov	sp, r7
 8004bac:	bd80      	pop	{r7, pc}

08004bae <UART_Receive_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_Receive_IT(UART_HandleTypeDef *huart)
{
 8004bae:	b580      	push	{r7, lr}
 8004bb0:	b086      	sub	sp, #24
 8004bb2:	af00      	add	r7, sp, #0
 8004bb4:	6078      	str	r0, [r7, #4]
  uint8_t  *pdata8bits;
  uint16_t *pdata16bits;

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 8004bb6:	687b      	ldr	r3, [r7, #4]
 8004bb8:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 8004bbc:	b2db      	uxtb	r3, r3
 8004bbe:	2b22      	cmp	r3, #34	; 0x22
 8004bc0:	f040 8099 	bne.w	8004cf6 <UART_Receive_IT+0x148>
  {
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8004bc4:	687b      	ldr	r3, [r7, #4]
 8004bc6:	689b      	ldr	r3, [r3, #8]
 8004bc8:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8004bcc:	d117      	bne.n	8004bfe <UART_Receive_IT+0x50>
 8004bce:	687b      	ldr	r3, [r7, #4]
 8004bd0:	691b      	ldr	r3, [r3, #16]
 8004bd2:	2b00      	cmp	r3, #0
 8004bd4:	d113      	bne.n	8004bfe <UART_Receive_IT+0x50>
    {
      pdata8bits  = NULL;
 8004bd6:	2300      	movs	r3, #0
 8004bd8:	617b      	str	r3, [r7, #20]
      pdata16bits = (uint16_t *) huart->pRxBuffPtr;
 8004bda:	687b      	ldr	r3, [r7, #4]
 8004bdc:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004bde:	613b      	str	r3, [r7, #16]
      *pdata16bits = (uint16_t)(huart->Instance->DR & (uint16_t)0x01FF);
 8004be0:	687b      	ldr	r3, [r7, #4]
 8004be2:	681b      	ldr	r3, [r3, #0]
 8004be4:	685b      	ldr	r3, [r3, #4]
 8004be6:	b29b      	uxth	r3, r3
 8004be8:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8004bec:	b29a      	uxth	r2, r3
 8004bee:	693b      	ldr	r3, [r7, #16]
 8004bf0:	801a      	strh	r2, [r3, #0]
      huart->pRxBuffPtr += 2U;
 8004bf2:	687b      	ldr	r3, [r7, #4]
 8004bf4:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004bf6:	1c9a      	adds	r2, r3, #2
 8004bf8:	687b      	ldr	r3, [r7, #4]
 8004bfa:	629a      	str	r2, [r3, #40]	; 0x28
 8004bfc:	e026      	b.n	8004c4c <UART_Receive_IT+0x9e>
    }
    else
    {
      pdata8bits = (uint8_t *) huart->pRxBuffPtr;
 8004bfe:	687b      	ldr	r3, [r7, #4]
 8004c00:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004c02:	617b      	str	r3, [r7, #20]
      pdata16bits  = NULL;
 8004c04:	2300      	movs	r3, #0
 8004c06:	613b      	str	r3, [r7, #16]

      if ((huart->Init.WordLength == UART_WORDLENGTH_9B) || ((huart->Init.WordLength == UART_WORDLENGTH_8B) && (huart->Init.Parity == UART_PARITY_NONE)))
 8004c08:	687b      	ldr	r3, [r7, #4]
 8004c0a:	689b      	ldr	r3, [r3, #8]
 8004c0c:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8004c10:	d007      	beq.n	8004c22 <UART_Receive_IT+0x74>
 8004c12:	687b      	ldr	r3, [r7, #4]
 8004c14:	689b      	ldr	r3, [r3, #8]
 8004c16:	2b00      	cmp	r3, #0
 8004c18:	d10a      	bne.n	8004c30 <UART_Receive_IT+0x82>
 8004c1a:	687b      	ldr	r3, [r7, #4]
 8004c1c:	691b      	ldr	r3, [r3, #16]
 8004c1e:	2b00      	cmp	r3, #0
 8004c20:	d106      	bne.n	8004c30 <UART_Receive_IT+0x82>
      {
        *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x00FF);
 8004c22:	687b      	ldr	r3, [r7, #4]
 8004c24:	681b      	ldr	r3, [r3, #0]
 8004c26:	685b      	ldr	r3, [r3, #4]
 8004c28:	b2da      	uxtb	r2, r3
 8004c2a:	697b      	ldr	r3, [r7, #20]
 8004c2c:	701a      	strb	r2, [r3, #0]
 8004c2e:	e008      	b.n	8004c42 <UART_Receive_IT+0x94>
      }
      else
      {
        *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x007F);
 8004c30:	687b      	ldr	r3, [r7, #4]
 8004c32:	681b      	ldr	r3, [r3, #0]
 8004c34:	685b      	ldr	r3, [r3, #4]
 8004c36:	b2db      	uxtb	r3, r3
 8004c38:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8004c3c:	b2da      	uxtb	r2, r3
 8004c3e:	697b      	ldr	r3, [r7, #20]
 8004c40:	701a      	strb	r2, [r3, #0]
      }
      huart->pRxBuffPtr += 1U;
 8004c42:	687b      	ldr	r3, [r7, #4]
 8004c44:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004c46:	1c5a      	adds	r2, r3, #1
 8004c48:	687b      	ldr	r3, [r7, #4]
 8004c4a:	629a      	str	r2, [r3, #40]	; 0x28
    }

    if (--huart->RxXferCount == 0U)
 8004c4c:	687b      	ldr	r3, [r7, #4]
 8004c4e:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 8004c50:	b29b      	uxth	r3, r3
 8004c52:	3b01      	subs	r3, #1
 8004c54:	b29b      	uxth	r3, r3
 8004c56:	687a      	ldr	r2, [r7, #4]
 8004c58:	4619      	mov	r1, r3
 8004c5a:	85d1      	strh	r1, [r2, #46]	; 0x2e
 8004c5c:	2b00      	cmp	r3, #0
 8004c5e:	d148      	bne.n	8004cf2 <UART_Receive_IT+0x144>
    {
      /* Disable the UART Data Register not empty Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_RXNE);
 8004c60:	687b      	ldr	r3, [r7, #4]
 8004c62:	681b      	ldr	r3, [r3, #0]
 8004c64:	68da      	ldr	r2, [r3, #12]
 8004c66:	687b      	ldr	r3, [r7, #4]
 8004c68:	681b      	ldr	r3, [r3, #0]
 8004c6a:	f022 0220 	bic.w	r2, r2, #32
 8004c6e:	60da      	str	r2, [r3, #12]

      /* Disable the UART Parity Error Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_PE);
 8004c70:	687b      	ldr	r3, [r7, #4]
 8004c72:	681b      	ldr	r3, [r3, #0]
 8004c74:	68da      	ldr	r2, [r3, #12]
 8004c76:	687b      	ldr	r3, [r7, #4]
 8004c78:	681b      	ldr	r3, [r3, #0]
 8004c7a:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 8004c7e:	60da      	str	r2, [r3, #12]

      /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
      __HAL_UART_DISABLE_IT(huart, UART_IT_ERR);
 8004c80:	687b      	ldr	r3, [r7, #4]
 8004c82:	681b      	ldr	r3, [r3, #0]
 8004c84:	695a      	ldr	r2, [r3, #20]
 8004c86:	687b      	ldr	r3, [r7, #4]
 8004c88:	681b      	ldr	r3, [r3, #0]
 8004c8a:	f022 0201 	bic.w	r2, r2, #1
 8004c8e:	615a      	str	r2, [r3, #20]

      /* Rx process is completed, restore huart->RxState to Ready */
      huart->RxState = HAL_UART_STATE_READY;
 8004c90:	687b      	ldr	r3, [r7, #4]
 8004c92:	2220      	movs	r2, #32
 8004c94:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

      /* Check current reception Mode :
         If Reception till IDLE event has been selected : */
      if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8004c98:	687b      	ldr	r3, [r7, #4]
 8004c9a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004c9c:	2b01      	cmp	r3, #1
 8004c9e:	d123      	bne.n	8004ce8 <UART_Receive_IT+0x13a>
      {
        /* Set reception type to Standard */
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8004ca0:	687b      	ldr	r3, [r7, #4]
 8004ca2:	2200      	movs	r2, #0
 8004ca4:	631a      	str	r2, [r3, #48]	; 0x30

        /* Disable IDLE interrupt */
        CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8004ca6:	687b      	ldr	r3, [r7, #4]
 8004ca8:	681b      	ldr	r3, [r3, #0]
 8004caa:	68da      	ldr	r2, [r3, #12]
 8004cac:	687b      	ldr	r3, [r7, #4]
 8004cae:	681b      	ldr	r3, [r3, #0]
 8004cb0:	f022 0210 	bic.w	r2, r2, #16
 8004cb4:	60da      	str	r2, [r3, #12]

        /* Check if IDLE flag is set */
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_IDLE))
 8004cb6:	687b      	ldr	r3, [r7, #4]
 8004cb8:	681b      	ldr	r3, [r3, #0]
 8004cba:	681b      	ldr	r3, [r3, #0]
 8004cbc:	f003 0310 	and.w	r3, r3, #16
 8004cc0:	2b10      	cmp	r3, #16
 8004cc2:	d10a      	bne.n	8004cda <UART_Receive_IT+0x12c>
        {
          /* Clear IDLE flag in ISR */
          __HAL_UART_CLEAR_IDLEFLAG(huart);
 8004cc4:	2300      	movs	r3, #0
 8004cc6:	60fb      	str	r3, [r7, #12]
 8004cc8:	687b      	ldr	r3, [r7, #4]
 8004cca:	681b      	ldr	r3, [r3, #0]
 8004ccc:	681b      	ldr	r3, [r3, #0]
 8004cce:	60fb      	str	r3, [r7, #12]
 8004cd0:	687b      	ldr	r3, [r7, #4]
 8004cd2:	681b      	ldr	r3, [r3, #0]
 8004cd4:	685b      	ldr	r3, [r3, #4]
 8004cd6:	60fb      	str	r3, [r7, #12]
 8004cd8:	68fb      	ldr	r3, [r7, #12]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, huart->RxXferSize);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 8004cda:	687b      	ldr	r3, [r7, #4]
 8004cdc:	8d9b      	ldrh	r3, [r3, #44]	; 0x2c
 8004cde:	4619      	mov	r1, r3
 8004ce0:	6878      	ldr	r0, [r7, #4]
 8004ce2:	f7ff fe2f 	bl	8004944 <HAL_UARTEx_RxEventCallback>
 8004ce6:	e002      	b.n	8004cee <UART_Receive_IT+0x140>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)		  
       /*Call registered Rx complete callback*/
       huart->RxCpltCallback(huart);
#else
       /*Call legacy weak Rx complete callback*/
       HAL_UART_RxCpltCallback(huart);
 8004ce8:	6878      	ldr	r0, [r7, #4]
 8004cea:	f7fc ff59 	bl	8001ba0 <HAL_UART_RxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }

      return HAL_OK;
 8004cee:	2300      	movs	r3, #0
 8004cf0:	e002      	b.n	8004cf8 <UART_Receive_IT+0x14a>
    }
    return HAL_OK;
 8004cf2:	2300      	movs	r3, #0
 8004cf4:	e000      	b.n	8004cf8 <UART_Receive_IT+0x14a>
  }
  else
  {
    return HAL_BUSY;
 8004cf6:	2302      	movs	r3, #2
  }
}
 8004cf8:	4618      	mov	r0, r3
 8004cfa:	3718      	adds	r7, #24
 8004cfc:	46bd      	mov	sp, r7
 8004cfe:	bd80      	pop	{r7, pc}

08004d00 <UART_SetConfig>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_SetConfig(UART_HandleTypeDef *huart)
{
 8004d00:	b580      	push	{r7, lr}
 8004d02:	b084      	sub	sp, #16
 8004d04:	af00      	add	r7, sp, #0
 8004d06:	6078      	str	r0, [r7, #4]
  assert_param(IS_UART_MODE(huart->Init.Mode));

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits
     according to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8004d08:	687b      	ldr	r3, [r7, #4]
 8004d0a:	681b      	ldr	r3, [r3, #0]
 8004d0c:	691b      	ldr	r3, [r3, #16]
 8004d0e:	f423 5140 	bic.w	r1, r3, #12288	; 0x3000
 8004d12:	687b      	ldr	r3, [r7, #4]
 8004d14:	68da      	ldr	r2, [r3, #12]
 8004d16:	687b      	ldr	r3, [r7, #4]
 8004d18:	681b      	ldr	r3, [r3, #0]
 8004d1a:	430a      	orrs	r2, r1
 8004d1c:	611a      	str	r2, [r3, #16]
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
  MODIFY_REG(huart->Instance->CR1,
             (uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | USART_CR1_RE | USART_CR1_OVER8),
             tmpreg);
#else
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode;
 8004d1e:	687b      	ldr	r3, [r7, #4]
 8004d20:	689a      	ldr	r2, [r3, #8]
 8004d22:	687b      	ldr	r3, [r7, #4]
 8004d24:	691b      	ldr	r3, [r3, #16]
 8004d26:	431a      	orrs	r2, r3
 8004d28:	687b      	ldr	r3, [r7, #4]
 8004d2a:	695b      	ldr	r3, [r3, #20]
 8004d2c:	4313      	orrs	r3, r2
 8004d2e:	60bb      	str	r3, [r7, #8]
  MODIFY_REG(huart->Instance->CR1,
 8004d30:	687b      	ldr	r3, [r7, #4]
 8004d32:	681b      	ldr	r3, [r3, #0]
 8004d34:	68db      	ldr	r3, [r3, #12]
 8004d36:	f423 53b0 	bic.w	r3, r3, #5632	; 0x1600
 8004d3a:	f023 030c 	bic.w	r3, r3, #12
 8004d3e:	687a      	ldr	r2, [r7, #4]
 8004d40:	6812      	ldr	r2, [r2, #0]
 8004d42:	68b9      	ldr	r1, [r7, #8]
 8004d44:	430b      	orrs	r3, r1
 8004d46:	60d3      	str	r3, [r2, #12]
             tmpreg);
#endif /* USART_CR1_OVER8 */

  /*-------------------------- USART CR3 Configuration -----------------------*/
  /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 8004d48:	687b      	ldr	r3, [r7, #4]
 8004d4a:	681b      	ldr	r3, [r3, #0]
 8004d4c:	695b      	ldr	r3, [r3, #20]
 8004d4e:	f423 7140 	bic.w	r1, r3, #768	; 0x300
 8004d52:	687b      	ldr	r3, [r7, #4]
 8004d54:	699a      	ldr	r2, [r3, #24]
 8004d56:	687b      	ldr	r3, [r7, #4]
 8004d58:	681b      	ldr	r3, [r3, #0]
 8004d5a:	430a      	orrs	r2, r1
 8004d5c:	615a      	str	r2, [r3, #20]


  if(huart->Instance == USART1)
 8004d5e:	687b      	ldr	r3, [r7, #4]
 8004d60:	681b      	ldr	r3, [r3, #0]
 8004d62:	4a2c      	ldr	r2, [pc, #176]	; (8004e14 <UART_SetConfig+0x114>)
 8004d64:	4293      	cmp	r3, r2
 8004d66:	d103      	bne.n	8004d70 <UART_SetConfig+0x70>
  {
    pclk = HAL_RCC_GetPCLK2Freq();
 8004d68:	f7fe fa68 	bl	800323c <HAL_RCC_GetPCLK2Freq>
 8004d6c:	60f8      	str	r0, [r7, #12]
 8004d6e:	e002      	b.n	8004d76 <UART_SetConfig+0x76>
  }
  else
  {
    pclk = HAL_RCC_GetPCLK1Freq();
 8004d70:	f7fe fa50 	bl	8003214 <HAL_RCC_GetPCLK1Freq>
 8004d74:	60f8      	str	r0, [r7, #12]
  else
  {
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
  }
#else
  huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 8004d76:	68fa      	ldr	r2, [r7, #12]
 8004d78:	4613      	mov	r3, r2
 8004d7a:	009b      	lsls	r3, r3, #2
 8004d7c:	4413      	add	r3, r2
 8004d7e:	009a      	lsls	r2, r3, #2
 8004d80:	441a      	add	r2, r3
 8004d82:	687b      	ldr	r3, [r7, #4]
 8004d84:	685b      	ldr	r3, [r3, #4]
 8004d86:	009b      	lsls	r3, r3, #2
 8004d88:	fbb2 f3f3 	udiv	r3, r2, r3
 8004d8c:	4a22      	ldr	r2, [pc, #136]	; (8004e18 <UART_SetConfig+0x118>)
 8004d8e:	fba2 2303 	umull	r2, r3, r2, r3
 8004d92:	095b      	lsrs	r3, r3, #5
 8004d94:	0119      	lsls	r1, r3, #4
 8004d96:	68fa      	ldr	r2, [r7, #12]
 8004d98:	4613      	mov	r3, r2
 8004d9a:	009b      	lsls	r3, r3, #2
 8004d9c:	4413      	add	r3, r2
 8004d9e:	009a      	lsls	r2, r3, #2
 8004da0:	441a      	add	r2, r3
 8004da2:	687b      	ldr	r3, [r7, #4]
 8004da4:	685b      	ldr	r3, [r3, #4]
 8004da6:	009b      	lsls	r3, r3, #2
 8004da8:	fbb2 f2f3 	udiv	r2, r2, r3
 8004dac:	4b1a      	ldr	r3, [pc, #104]	; (8004e18 <UART_SetConfig+0x118>)
 8004dae:	fba3 0302 	umull	r0, r3, r3, r2
 8004db2:	095b      	lsrs	r3, r3, #5
 8004db4:	2064      	movs	r0, #100	; 0x64
 8004db6:	fb00 f303 	mul.w	r3, r0, r3
 8004dba:	1ad3      	subs	r3, r2, r3
 8004dbc:	011b      	lsls	r3, r3, #4
 8004dbe:	3332      	adds	r3, #50	; 0x32
 8004dc0:	4a15      	ldr	r2, [pc, #84]	; (8004e18 <UART_SetConfig+0x118>)
 8004dc2:	fba2 2303 	umull	r2, r3, r2, r3
 8004dc6:	095b      	lsrs	r3, r3, #5
 8004dc8:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8004dcc:	4419      	add	r1, r3
 8004dce:	68fa      	ldr	r2, [r7, #12]
 8004dd0:	4613      	mov	r3, r2
 8004dd2:	009b      	lsls	r3, r3, #2
 8004dd4:	4413      	add	r3, r2
 8004dd6:	009a      	lsls	r2, r3, #2
 8004dd8:	441a      	add	r2, r3
 8004dda:	687b      	ldr	r3, [r7, #4]
 8004ddc:	685b      	ldr	r3, [r3, #4]
 8004dde:	009b      	lsls	r3, r3, #2
 8004de0:	fbb2 f2f3 	udiv	r2, r2, r3
 8004de4:	4b0c      	ldr	r3, [pc, #48]	; (8004e18 <UART_SetConfig+0x118>)
 8004de6:	fba3 0302 	umull	r0, r3, r3, r2
 8004dea:	095b      	lsrs	r3, r3, #5
 8004dec:	2064      	movs	r0, #100	; 0x64
 8004dee:	fb00 f303 	mul.w	r3, r0, r3
 8004df2:	1ad3      	subs	r3, r2, r3
 8004df4:	011b      	lsls	r3, r3, #4
 8004df6:	3332      	adds	r3, #50	; 0x32
 8004df8:	4a07      	ldr	r2, [pc, #28]	; (8004e18 <UART_SetConfig+0x118>)
 8004dfa:	fba2 2303 	umull	r2, r3, r2, r3
 8004dfe:	095b      	lsrs	r3, r3, #5
 8004e00:	f003 020f 	and.w	r2, r3, #15
 8004e04:	687b      	ldr	r3, [r7, #4]
 8004e06:	681b      	ldr	r3, [r3, #0]
 8004e08:	440a      	add	r2, r1
 8004e0a:	609a      	str	r2, [r3, #8]
#endif /* USART_CR1_OVER8 */
}
 8004e0c:	bf00      	nop
 8004e0e:	3710      	adds	r7, #16
 8004e10:	46bd      	mov	sp, r7
 8004e12:	bd80      	pop	{r7, pc}
 8004e14:	40013800 	.word	0x40013800
 8004e18:	51eb851f 	.word	0x51eb851f

08004e1c <__errno>:
 8004e1c:	4b01      	ldr	r3, [pc, #4]	; (8004e24 <__errno+0x8>)
 8004e1e:	6818      	ldr	r0, [r3, #0]
 8004e20:	4770      	bx	lr
 8004e22:	bf00      	nop
 8004e24:	20000014 	.word	0x20000014

08004e28 <__libc_init_array>:
 8004e28:	b570      	push	{r4, r5, r6, lr}
 8004e2a:	2600      	movs	r6, #0
 8004e2c:	4d0c      	ldr	r5, [pc, #48]	; (8004e60 <__libc_init_array+0x38>)
 8004e2e:	4c0d      	ldr	r4, [pc, #52]	; (8004e64 <__libc_init_array+0x3c>)
 8004e30:	1b64      	subs	r4, r4, r5
 8004e32:	10a4      	asrs	r4, r4, #2
 8004e34:	42a6      	cmp	r6, r4
 8004e36:	d109      	bne.n	8004e4c <__libc_init_array+0x24>
 8004e38:	f000 f93a 	bl	80050b0 <_init>
 8004e3c:	2600      	movs	r6, #0
 8004e3e:	4d0a      	ldr	r5, [pc, #40]	; (8004e68 <__libc_init_array+0x40>)
 8004e40:	4c0a      	ldr	r4, [pc, #40]	; (8004e6c <__libc_init_array+0x44>)
 8004e42:	1b64      	subs	r4, r4, r5
 8004e44:	10a4      	asrs	r4, r4, #2
 8004e46:	42a6      	cmp	r6, r4
 8004e48:	d105      	bne.n	8004e56 <__libc_init_array+0x2e>
 8004e4a:	bd70      	pop	{r4, r5, r6, pc}
 8004e4c:	f855 3b04 	ldr.w	r3, [r5], #4
 8004e50:	4798      	blx	r3
 8004e52:	3601      	adds	r6, #1
 8004e54:	e7ee      	b.n	8004e34 <__libc_init_array+0xc>
 8004e56:	f855 3b04 	ldr.w	r3, [r5], #4
 8004e5a:	4798      	blx	r3
 8004e5c:	3601      	adds	r6, #1
 8004e5e:	e7f2      	b.n	8004e46 <__libc_init_array+0x1e>
 8004e60:	08005110 	.word	0x08005110
 8004e64:	08005110 	.word	0x08005110
 8004e68:	08005110 	.word	0x08005110
 8004e6c:	08005114 	.word	0x08005114

08004e70 <malloc>:
 8004e70:	4b02      	ldr	r3, [pc, #8]	; (8004e7c <malloc+0xc>)
 8004e72:	4601      	mov	r1, r0
 8004e74:	6818      	ldr	r0, [r3, #0]
 8004e76:	f000 b889 	b.w	8004f8c <_malloc_r>
 8004e7a:	bf00      	nop
 8004e7c:	20000014 	.word	0x20000014

08004e80 <free>:
 8004e80:	4b02      	ldr	r3, [pc, #8]	; (8004e8c <free+0xc>)
 8004e82:	4601      	mov	r1, r0
 8004e84:	6818      	ldr	r0, [r3, #0]
 8004e86:	f000 b819 	b.w	8004ebc <_free_r>
 8004e8a:	bf00      	nop
 8004e8c:	20000014 	.word	0x20000014

08004e90 <memcpy>:
 8004e90:	440a      	add	r2, r1
 8004e92:	4291      	cmp	r1, r2
 8004e94:	f100 33ff 	add.w	r3, r0, #4294967295
 8004e98:	d100      	bne.n	8004e9c <memcpy+0xc>
 8004e9a:	4770      	bx	lr
 8004e9c:	b510      	push	{r4, lr}
 8004e9e:	f811 4b01 	ldrb.w	r4, [r1], #1
 8004ea2:	4291      	cmp	r1, r2
 8004ea4:	f803 4f01 	strb.w	r4, [r3, #1]!
 8004ea8:	d1f9      	bne.n	8004e9e <memcpy+0xe>
 8004eaa:	bd10      	pop	{r4, pc}

08004eac <memset>:
 8004eac:	4603      	mov	r3, r0
 8004eae:	4402      	add	r2, r0
 8004eb0:	4293      	cmp	r3, r2
 8004eb2:	d100      	bne.n	8004eb6 <memset+0xa>
 8004eb4:	4770      	bx	lr
 8004eb6:	f803 1b01 	strb.w	r1, [r3], #1
 8004eba:	e7f9      	b.n	8004eb0 <memset+0x4>

08004ebc <_free_r>:
 8004ebc:	b538      	push	{r3, r4, r5, lr}
 8004ebe:	4605      	mov	r5, r0
 8004ec0:	2900      	cmp	r1, #0
 8004ec2:	d040      	beq.n	8004f46 <_free_r+0x8a>
 8004ec4:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8004ec8:	1f0c      	subs	r4, r1, #4
 8004eca:	2b00      	cmp	r3, #0
 8004ecc:	bfb8      	it	lt
 8004ece:	18e4      	addlt	r4, r4, r3
 8004ed0:	f000 f8e0 	bl	8005094 <__malloc_lock>
 8004ed4:	4a1c      	ldr	r2, [pc, #112]	; (8004f48 <_free_r+0x8c>)
 8004ed6:	6813      	ldr	r3, [r2, #0]
 8004ed8:	b933      	cbnz	r3, 8004ee8 <_free_r+0x2c>
 8004eda:	6063      	str	r3, [r4, #4]
 8004edc:	6014      	str	r4, [r2, #0]
 8004ede:	4628      	mov	r0, r5
 8004ee0:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8004ee4:	f000 b8dc 	b.w	80050a0 <__malloc_unlock>
 8004ee8:	42a3      	cmp	r3, r4
 8004eea:	d908      	bls.n	8004efe <_free_r+0x42>
 8004eec:	6820      	ldr	r0, [r4, #0]
 8004eee:	1821      	adds	r1, r4, r0
 8004ef0:	428b      	cmp	r3, r1
 8004ef2:	bf01      	itttt	eq
 8004ef4:	6819      	ldreq	r1, [r3, #0]
 8004ef6:	685b      	ldreq	r3, [r3, #4]
 8004ef8:	1809      	addeq	r1, r1, r0
 8004efa:	6021      	streq	r1, [r4, #0]
 8004efc:	e7ed      	b.n	8004eda <_free_r+0x1e>
 8004efe:	461a      	mov	r2, r3
 8004f00:	685b      	ldr	r3, [r3, #4]
 8004f02:	b10b      	cbz	r3, 8004f08 <_free_r+0x4c>
 8004f04:	42a3      	cmp	r3, r4
 8004f06:	d9fa      	bls.n	8004efe <_free_r+0x42>
 8004f08:	6811      	ldr	r1, [r2, #0]
 8004f0a:	1850      	adds	r0, r2, r1
 8004f0c:	42a0      	cmp	r0, r4
 8004f0e:	d10b      	bne.n	8004f28 <_free_r+0x6c>
 8004f10:	6820      	ldr	r0, [r4, #0]
 8004f12:	4401      	add	r1, r0
 8004f14:	1850      	adds	r0, r2, r1
 8004f16:	4283      	cmp	r3, r0
 8004f18:	6011      	str	r1, [r2, #0]
 8004f1a:	d1e0      	bne.n	8004ede <_free_r+0x22>
 8004f1c:	6818      	ldr	r0, [r3, #0]
 8004f1e:	685b      	ldr	r3, [r3, #4]
 8004f20:	4401      	add	r1, r0
 8004f22:	6011      	str	r1, [r2, #0]
 8004f24:	6053      	str	r3, [r2, #4]
 8004f26:	e7da      	b.n	8004ede <_free_r+0x22>
 8004f28:	d902      	bls.n	8004f30 <_free_r+0x74>
 8004f2a:	230c      	movs	r3, #12
 8004f2c:	602b      	str	r3, [r5, #0]
 8004f2e:	e7d6      	b.n	8004ede <_free_r+0x22>
 8004f30:	6820      	ldr	r0, [r4, #0]
 8004f32:	1821      	adds	r1, r4, r0
 8004f34:	428b      	cmp	r3, r1
 8004f36:	bf01      	itttt	eq
 8004f38:	6819      	ldreq	r1, [r3, #0]
 8004f3a:	685b      	ldreq	r3, [r3, #4]
 8004f3c:	1809      	addeq	r1, r1, r0
 8004f3e:	6021      	streq	r1, [r4, #0]
 8004f40:	6063      	str	r3, [r4, #4]
 8004f42:	6054      	str	r4, [r2, #4]
 8004f44:	e7cb      	b.n	8004ede <_free_r+0x22>
 8004f46:	bd38      	pop	{r3, r4, r5, pc}
 8004f48:	200002ec 	.word	0x200002ec

08004f4c <sbrk_aligned>:
 8004f4c:	b570      	push	{r4, r5, r6, lr}
 8004f4e:	4e0e      	ldr	r6, [pc, #56]	; (8004f88 <sbrk_aligned+0x3c>)
 8004f50:	460c      	mov	r4, r1
 8004f52:	6831      	ldr	r1, [r6, #0]
 8004f54:	4605      	mov	r5, r0
 8004f56:	b911      	cbnz	r1, 8004f5e <sbrk_aligned+0x12>
 8004f58:	f000 f88c 	bl	8005074 <_sbrk_r>
 8004f5c:	6030      	str	r0, [r6, #0]
 8004f5e:	4621      	mov	r1, r4
 8004f60:	4628      	mov	r0, r5
 8004f62:	f000 f887 	bl	8005074 <_sbrk_r>
 8004f66:	1c43      	adds	r3, r0, #1
 8004f68:	d00a      	beq.n	8004f80 <sbrk_aligned+0x34>
 8004f6a:	1cc4      	adds	r4, r0, #3
 8004f6c:	f024 0403 	bic.w	r4, r4, #3
 8004f70:	42a0      	cmp	r0, r4
 8004f72:	d007      	beq.n	8004f84 <sbrk_aligned+0x38>
 8004f74:	1a21      	subs	r1, r4, r0
 8004f76:	4628      	mov	r0, r5
 8004f78:	f000 f87c 	bl	8005074 <_sbrk_r>
 8004f7c:	3001      	adds	r0, #1
 8004f7e:	d101      	bne.n	8004f84 <sbrk_aligned+0x38>
 8004f80:	f04f 34ff 	mov.w	r4, #4294967295
 8004f84:	4620      	mov	r0, r4
 8004f86:	bd70      	pop	{r4, r5, r6, pc}
 8004f88:	200002f0 	.word	0x200002f0

08004f8c <_malloc_r>:
 8004f8c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8004f90:	1ccd      	adds	r5, r1, #3
 8004f92:	f025 0503 	bic.w	r5, r5, #3
 8004f96:	3508      	adds	r5, #8
 8004f98:	2d0c      	cmp	r5, #12
 8004f9a:	bf38      	it	cc
 8004f9c:	250c      	movcc	r5, #12
 8004f9e:	2d00      	cmp	r5, #0
 8004fa0:	4607      	mov	r7, r0
 8004fa2:	db01      	blt.n	8004fa8 <_malloc_r+0x1c>
 8004fa4:	42a9      	cmp	r1, r5
 8004fa6:	d905      	bls.n	8004fb4 <_malloc_r+0x28>
 8004fa8:	230c      	movs	r3, #12
 8004faa:	2600      	movs	r6, #0
 8004fac:	603b      	str	r3, [r7, #0]
 8004fae:	4630      	mov	r0, r6
 8004fb0:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8004fb4:	4e2e      	ldr	r6, [pc, #184]	; (8005070 <_malloc_r+0xe4>)
 8004fb6:	f000 f86d 	bl	8005094 <__malloc_lock>
 8004fba:	6833      	ldr	r3, [r6, #0]
 8004fbc:	461c      	mov	r4, r3
 8004fbe:	bb34      	cbnz	r4, 800500e <_malloc_r+0x82>
 8004fc0:	4629      	mov	r1, r5
 8004fc2:	4638      	mov	r0, r7
 8004fc4:	f7ff ffc2 	bl	8004f4c <sbrk_aligned>
 8004fc8:	1c43      	adds	r3, r0, #1
 8004fca:	4604      	mov	r4, r0
 8004fcc:	d14d      	bne.n	800506a <_malloc_r+0xde>
 8004fce:	6834      	ldr	r4, [r6, #0]
 8004fd0:	4626      	mov	r6, r4
 8004fd2:	2e00      	cmp	r6, #0
 8004fd4:	d140      	bne.n	8005058 <_malloc_r+0xcc>
 8004fd6:	6823      	ldr	r3, [r4, #0]
 8004fd8:	4631      	mov	r1, r6
 8004fda:	4638      	mov	r0, r7
 8004fdc:	eb04 0803 	add.w	r8, r4, r3
 8004fe0:	f000 f848 	bl	8005074 <_sbrk_r>
 8004fe4:	4580      	cmp	r8, r0
 8004fe6:	d13a      	bne.n	800505e <_malloc_r+0xd2>
 8004fe8:	6821      	ldr	r1, [r4, #0]
 8004fea:	3503      	adds	r5, #3
 8004fec:	1a6d      	subs	r5, r5, r1
 8004fee:	f025 0503 	bic.w	r5, r5, #3
 8004ff2:	3508      	adds	r5, #8
 8004ff4:	2d0c      	cmp	r5, #12
 8004ff6:	bf38      	it	cc
 8004ff8:	250c      	movcc	r5, #12
 8004ffa:	4638      	mov	r0, r7
 8004ffc:	4629      	mov	r1, r5
 8004ffe:	f7ff ffa5 	bl	8004f4c <sbrk_aligned>
 8005002:	3001      	adds	r0, #1
 8005004:	d02b      	beq.n	800505e <_malloc_r+0xd2>
 8005006:	6823      	ldr	r3, [r4, #0]
 8005008:	442b      	add	r3, r5
 800500a:	6023      	str	r3, [r4, #0]
 800500c:	e00e      	b.n	800502c <_malloc_r+0xa0>
 800500e:	6822      	ldr	r2, [r4, #0]
 8005010:	1b52      	subs	r2, r2, r5
 8005012:	d41e      	bmi.n	8005052 <_malloc_r+0xc6>
 8005014:	2a0b      	cmp	r2, #11
 8005016:	d916      	bls.n	8005046 <_malloc_r+0xba>
 8005018:	1961      	adds	r1, r4, r5
 800501a:	42a3      	cmp	r3, r4
 800501c:	6025      	str	r5, [r4, #0]
 800501e:	bf18      	it	ne
 8005020:	6059      	strne	r1, [r3, #4]
 8005022:	6863      	ldr	r3, [r4, #4]
 8005024:	bf08      	it	eq
 8005026:	6031      	streq	r1, [r6, #0]
 8005028:	5162      	str	r2, [r4, r5]
 800502a:	604b      	str	r3, [r1, #4]
 800502c:	4638      	mov	r0, r7
 800502e:	f104 060b 	add.w	r6, r4, #11
 8005032:	f000 f835 	bl	80050a0 <__malloc_unlock>
 8005036:	f026 0607 	bic.w	r6, r6, #7
 800503a:	1d23      	adds	r3, r4, #4
 800503c:	1af2      	subs	r2, r6, r3
 800503e:	d0b6      	beq.n	8004fae <_malloc_r+0x22>
 8005040:	1b9b      	subs	r3, r3, r6
 8005042:	50a3      	str	r3, [r4, r2]
 8005044:	e7b3      	b.n	8004fae <_malloc_r+0x22>
 8005046:	6862      	ldr	r2, [r4, #4]
 8005048:	42a3      	cmp	r3, r4
 800504a:	bf0c      	ite	eq
 800504c:	6032      	streq	r2, [r6, #0]
 800504e:	605a      	strne	r2, [r3, #4]
 8005050:	e7ec      	b.n	800502c <_malloc_r+0xa0>
 8005052:	4623      	mov	r3, r4
 8005054:	6864      	ldr	r4, [r4, #4]
 8005056:	e7b2      	b.n	8004fbe <_malloc_r+0x32>
 8005058:	4634      	mov	r4, r6
 800505a:	6876      	ldr	r6, [r6, #4]
 800505c:	e7b9      	b.n	8004fd2 <_malloc_r+0x46>
 800505e:	230c      	movs	r3, #12
 8005060:	4638      	mov	r0, r7
 8005062:	603b      	str	r3, [r7, #0]
 8005064:	f000 f81c 	bl	80050a0 <__malloc_unlock>
 8005068:	e7a1      	b.n	8004fae <_malloc_r+0x22>
 800506a:	6025      	str	r5, [r4, #0]
 800506c:	e7de      	b.n	800502c <_malloc_r+0xa0>
 800506e:	bf00      	nop
 8005070:	200002ec 	.word	0x200002ec

08005074 <_sbrk_r>:
 8005074:	b538      	push	{r3, r4, r5, lr}
 8005076:	2300      	movs	r3, #0
 8005078:	4d05      	ldr	r5, [pc, #20]	; (8005090 <_sbrk_r+0x1c>)
 800507a:	4604      	mov	r4, r0
 800507c:	4608      	mov	r0, r1
 800507e:	602b      	str	r3, [r5, #0]
 8005080:	f7fc fe1c 	bl	8001cbc <_sbrk>
 8005084:	1c43      	adds	r3, r0, #1
 8005086:	d102      	bne.n	800508e <_sbrk_r+0x1a>
 8005088:	682b      	ldr	r3, [r5, #0]
 800508a:	b103      	cbz	r3, 800508e <_sbrk_r+0x1a>
 800508c:	6023      	str	r3, [r4, #0]
 800508e:	bd38      	pop	{r3, r4, r5, pc}
 8005090:	200002f4 	.word	0x200002f4

08005094 <__malloc_lock>:
 8005094:	4801      	ldr	r0, [pc, #4]	; (800509c <__malloc_lock+0x8>)
 8005096:	f000 b809 	b.w	80050ac <__retarget_lock_acquire_recursive>
 800509a:	bf00      	nop
 800509c:	200002f8 	.word	0x200002f8

080050a0 <__malloc_unlock>:
 80050a0:	4801      	ldr	r0, [pc, #4]	; (80050a8 <__malloc_unlock+0x8>)
 80050a2:	f000 b804 	b.w	80050ae <__retarget_lock_release_recursive>
 80050a6:	bf00      	nop
 80050a8:	200002f8 	.word	0x200002f8

080050ac <__retarget_lock_acquire_recursive>:
 80050ac:	4770      	bx	lr

080050ae <__retarget_lock_release_recursive>:
 80050ae:	4770      	bx	lr

080050b0 <_init>:
 80050b0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80050b2:	bf00      	nop
 80050b4:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80050b6:	bc08      	pop	{r3}
 80050b8:	469e      	mov	lr, r3
 80050ba:	4770      	bx	lr

080050bc <_fini>:
 80050bc:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80050be:	bf00      	nop
 80050c0:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80050c2:	bc08      	pop	{r3}
 80050c4:	469e      	mov	lr, r3
 80050c6:	4770      	bx	lr
